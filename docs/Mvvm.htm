<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>MvvmLib.Core - MvvmLib Documentation</title>
    <link rel="shortcut icon" href="favicon.ico">
    <link rel="stylesheet" href="css/theme.css" type="text/css" />
    <link rel="stylesheet" href="css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="css/styles/vs.css">
    <link rel="stylesheet" href="css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="index.htm"><i class="fa fa-home"></i> MvvmLib Documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="index.htm">Home</a>
</li>

<li class="tocentry current"><a class="current" href="Mvvm.htm">MvvmLib.Core</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#bindablebase">BindableBase</a></li>

<li class="tocentry"><a href="#editable">Editable</a></li>

<li class="tocentry"><a href="#validatable">Validatable</a></li>

<li class="tocentry"><a href="#validatableandeditable">ValidatableAndEditable</a></li>

<li class="tocentry"><a href="#modelwrapper">ModelWrapper</a></li>

<li class="tocentry"><a href="#notifypropertychangedobserver-and-filterablenotifypropertychangedobserver">NotifyPropertyChangedObserver and FilterableNotifyPropertyChangedObserver</a></li>

<li class="tocentry"><a href="#relay-command">Relay command</a></li>

<li class="tocentry"><a href="#composite-command">Composite command</a></li>

<li class="tocentry"><a href="#sync-data">Sync Data</a></li>

<li class="tocentry"><a href="#singleton">Singleton</a></li>

<li class="tocentry"><a href="#eventaggregator">EventAggregator</a></li>



</ul>
<li class="tocentry"><a href="DI.htm">MvvmLib.IoC</a>
</li>
<li class="tocentry"><a href="Navigation.htm">MvvmLib.Wpf</a>
</li>
<li class="tocentry"><a href="Navigation_Uwp.htm">MvvmLib.Windows</a>
</li>
<li class="tocentry"><a href="Navigation_XF.htm">MvvmLib.XF</a>
</li>
<li class="tocentry"><a href="Animation.htm">MvvmLib.Animation.Wpf</a>
</li>
<li class="tocentry"><a href="Adaptive.htm">MvvmLib.Adaptive.Wpf</a>
</li>
<li class="tocentry"><a href="Adaptive_Uwp.htm">MvvmLib.Adaptive.Windows</a>
</li>
<li class="tocentry"><a href="LICENSE.htm">LICENSE</a>
</li>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="index.htm">MvvmLib Documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="index.htm">Home</a></li> / <li><a href="Mvvm.htm">MvvmLib.Core</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="mvvm">Mvvm<a class="headerlink" href="#mvvm" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<ul>
<li><strong>BindableBase</strong>, <strong>Editable</strong>, <strong>Validatable</strong>, <strong>ValidatableAndEditable</strong> and <strong>ModelWrapper</strong> base classes for <em>Models and ViewModels</em></li>
<li><strong>NotifyPropertyChangedObserver</strong> and <strong>FilterableNotifyPropertyChangedObserver</strong>: allows to observe and filter an object that implements INotifyPropertyChanged</li>
<li><strong>Commands</strong> and <strong>composite</strong> command</li>
<li><strong>Sync</strong> <em>extensions for list and collections</em>. Allows to <strong>sync data</strong></li>
<li><strong>Singleton</strong></li>
<li><strong>EventAggregator</strong> : allows to <strong>subscribe</strong>, <strong>publish</strong> and filter messages</li>
</ul>
<h2 id="bindablebase">BindableBase<a class="headerlink" href="#bindablebase" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Implements <em>INotifyPropertyChanged</em> interface.</p>
</blockquote>
<p>Allows to observe a property and notify the view that a value has changed.</p>
<p>SetProperty</p>
<pre><code class="cs">public class UserViewModel : BindableBase
{
    private string firstName;
    public string FirstName
    {
        get { return firstName; }
        set { SetProperty(ref firstName, value); }
    }
}
</code></pre>

<p>RaisePropertyChanged</p>
<pre><code class="cs">public class UserViewModel : BindableBase
{
    private string firstName;
    public string FirstName
    {
        get { return firstName; }
        set
        {
            SetProperty(ref firstName, value);
            RaisePropertyChanged(&quot;FullName&quot;);
        }
    }

    private string lastName;
    public string LastName
    {
        get { return lastName; }
        set
        {
            SetProperty(ref lastName, value);
            RaisePropertyChanged(&quot;FullName&quot;);
        }
    }

    public string FullName
    {
        get { return $&quot;{firstName} {LastName}&quot;; }
    }
}
</code></pre>

<p>Or with <strong>Linq</strong> Expression</p>
<pre><code class="cs">public class User : BindableBase
{

    private string firstName;
    public string FirstName
    {
        get { return firstName; }
        set
        {
            firstName = value;
            RaisePropertyChanged(() =&gt; FirstName);
        }
    }
}
</code></pre>

<h2 id="editable">Editable<a class="headerlink" href="#editable" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Implements <em>IEditableObject</em> interface.</p>
</blockquote>
<p>Allows to cancel and <strong>restore</strong> <strong>old values</strong>. Entity Framework (ICollection, ect.) and circular references are supported.</p>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Method</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>BeginEdit</td>
	<td>Store model values</td>
</tr>
<tr>
	<td>CancelEdit</td>
	<td>Restore model values</td>
</tr>
</tbody>
</table>
<p>Example</p>
<pre><code class="cs">public class User : Editable
{
    public string FirstName { get; set; }

    public string LastName { get; set; }

    // object, list , etc.
}
</code></pre>

<pre><code class="cs">var user = new User
{
    FirstName = &quot;Marie&quot;,
    LastName = &quot;Bellin&quot;,
    // etc.
};

user.BeginEdit();

user.FirstName = &quot;Marie!!&quot;;

user.CancelEdit(); 
</code></pre>

<h2 id="validatable">Validatable<a class="headerlink" href="#validatable" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Allows to validate.</p>
</blockquote>
<h2 id="validatableandeditable">ValidatableAndEditable<a class="headerlink" href="#validatableandeditable" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Validation + Edition</p>
</blockquote>
<p>Allows to <strong>validate</strong> the model with <strong>Data Annotations</strong> and <strong>custom validations</strong>. Allows to cancel and <strong>restore</strong> <strong>old values</strong>. </p>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Validation Handling</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>OnPropertyChange</td>
	<td>Default. Validation on property changed</td>
</tr>
<tr>
	<td>OnSubmit</td>
	<td>Validation only after &quot;ValidateAll&quot; invoked. Validation on property changed only after &quot;ValidateAll&quot; invoked</td>
</tr>
<tr>
	<td>Explicit</td>
	<td>Validation only with &quot;ValidateProperty&quot; and &quot;ValidateAll&quot;</td>
</tr>
</tbody>
</table>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Property</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>UseDataAnnotations</td>
	<td>Ignore or use Data Annotations for validation</td>
</tr>
<tr>
	<td>UseCustomValidations</td>
	<td>Ignore or use Custom validations</td>
</tr>
</tbody>
</table>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Method</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>ValidateProperty</td>
	<td>Validate one property</td>
</tr>
<tr>
	<td>ValidateAll</td>
	<td>Validate all properties</td>
</tr>
<tr>
	<td>Reset</td>
	<td>Reset the errors</td>
</tr>
<tr>
	<td>BeginEdit</td>
	<td>Store model values</td>
</tr>
<tr>
	<td>CancelEdit</td>
	<td>Restore model values and errors</td>
</tr>
</tbody>
</table>
<p>The model requires to use SetProperty</p>
<pre><code class="cs">public class User : ValidatableAndEditable
{
    private string firstName;

    [Required]
    [StringLength(50)]
    public string FirstName
    {
        get { return firstName; }
        set { SetProperty(ref firstName, value); }
    }

    // object, list , etc.
}
</code></pre>

<pre><code class="cs">var user = new User
{
    FirstName = &quot;Marie&quot;,
    LastName = &quot;Bellin&quot;,
    // etc.
};


// validate a property
user.ValidateProperty(&quot;FirstName&quot;, &quot;&quot;);

// validate all
user.ValidateAll();

if (user.HasErrors)
{

}

// reset errors the errors
user.Reset();

// reset the errors and the model
user.CancelEdit();

// etc.
</code></pre>

<h2 id="modelwrapper">ModelWrapper<a class="headerlink" href="#modelwrapper" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Allows to wrap, edit and validate a model.</p>
</blockquote>
<p>The model does not require to use SetProperty</p>
<pre><code class="cs">public class User
{
    public int Id { get; set; }

    [Required]
    [StringLength(50)]
    public string FirstName { get; set; }

    [StringLength(50)]
    public string LastName { get; set; }

    // object, list , etc.
}
</code></pre>

<p>Create a Generic model wrapper class</p>
<pre><code class="cs">public class UserWrapper : ModelWrapper&lt;User&gt;
{
    public UserWrapper(User model) : base(model)
    {
    }

    public int Id { get { return Model.Id; } }

    public string FirstName
    {
        get { return GetValue&lt;string&gt;(); }
        set { SetValue(value); }
    }

    public string LastName
    {
        get { return GetValue&lt;string&gt;(); }
        set { SetValue(value); }
    }

    // etc.

    // custom validations
    protected override IEnumerable&lt;string&gt; DoCustomValidations(string propertyName)
    {
        switch (propertyName)
        {
            case nameof(FirstName):
                if (string.Equals(FirstName, &quot;Marie&quot;, StringComparison.OrdinalIgnoreCase))
                {
                    yield return &quot;Marie is not allowed&quot;;
                }
                break;
        }
    }
}
</code></pre>

<p>ViewModel sample</p>
<pre><code class="cs">public class UserDetailViewModel : BindableBase
{
    private UserWrapper user;
    public UserWrapper User
    {
        get { return user; }
        set { SetProperty(ref user, value); }
    }

    public ICommand SaveCommand { get; }
    public ICommand ResetCommand { get; }

    public UserDetailViewModel()
    {
        User = new UserWrapper(new Models.User
        {
            Id = 1
        });

        this.user.BeginEdit();

        SaveCommand = new RelayCommand(OnSave);
        ResetCommand = new RelayCommand(OnReset);
    }

    private void OnSave()
    {
        this.User.ValidateAll();
    }

    private void OnReset()
    {
        this.user.CancelEdit(); // reset the errors and the model
    }
}
</code></pre>

<p><strong>Wpf</strong></p>
<p>Binding</p>
<pre><code class="xml">&lt;!-- the default value of UpdateSourceTrigger is LostFocus --&gt;
&lt;TextBox Text=&quot;{Binding User.FirstName, UpdateSourceTrigger=PropertyChanged}&quot; /&gt;
</code></pre>

<p>Create a Style that displays errors</p>
<pre><code class="xml">&lt;Style TargetType=&quot;TextBox&quot;&gt;
    &lt;Setter Property=&quot;Validation.ErrorTemplate&quot;&gt;
        &lt;Setter.Value&gt;
            &lt;ControlTemplate&gt;
                &lt;StackPanel&gt;
                    &lt;AdornedElementPlaceholder x:Name=&quot;placeholder&quot;/&gt;
                    &lt;!--TextBlock with error --&gt;
                    &lt;TextBlock FontSize=&quot;12&quot; Foreground=&quot;Red&quot; 
                        Text=&quot;{Binding ElementName=placeholder,Path=AdornedElement.(Validation.Errors)[0].ErrorContent}&quot;/&gt;
                &lt;/StackPanel&gt;
            &lt;/ControlTemplate&gt;
        &lt;/Setter.Value&gt;
    &lt;/Setter&gt;
    &lt;Style.Triggers&gt;
        &lt;Trigger Property=&quot;Validation.HasError&quot; Value=&quot;True&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;Red&quot;/&gt;
            &lt;!--Tooltip with error --&gt;
            &lt;Setter Property=&quot;ToolTip&quot; 
            Value=&quot;{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}&quot;/&gt;
        &lt;/Trigger&gt;
    &lt;/Style.Triggers&gt;
&lt;/Style&gt;
</code></pre>

<p><strong>Uwp</strong></p>
<pre><code class="xml">&lt;TextBox Text=&quot;{Binding User.FirstName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}&quot; /&gt;
&lt;TextBlock Text=&quot;{Binding User.Errors[FirstName][0]}&quot; Foreground=&quot;Red&quot;&gt;&lt;/TextBlock&gt;
</code></pre>

<p>Or Create a <em>Converter</em> that displays the <em>first error</em> of the list</p>
<pre><code class="cs">public sealed class FirstErrorConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, string language)
    {
        var errors = value as IList&lt;string&gt;;
        return errors != null &amp;&amp; errors.Count &gt; 0 ? errors.ElementAt(0) : null;
    }

    public object ConvertBack(object value, Type targetType, object parameter, string language)
    {
        throw new NotImplementedException();
    }
}
</code></pre>

<p>And use it</p>
<pre><code class="xml">&lt;Page.Resources&gt;
    &lt;converters:FirstErrorConverter x:Name=&quot;FirstErrorConverter&quot;&gt;&lt;/converters:FirstErrorConverter&gt;
&lt;/Page.Resources&gt;
</code></pre>

<pre><code class="xml"> &lt;TextBox Text=&quot;{Binding User.FirstName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}&quot; /&gt;
&lt;!-- with converter --&gt;
&lt;TextBlock Text=&quot;{Binding User.Errors[FirstName], Converter={StaticResource FirstErrorConverter}}&quot; Foreground=&quot;Red&quot;&gt;&lt;/TextBlock&gt;
</code></pre>

<h2 id="notifypropertychangedobserver-and-filterablenotifypropertychangedobserver">NotifyPropertyChangedObserver and FilterableNotifyPropertyChangedObserver<a class="headerlink" href="#notifypropertychangedobserver-and-filterablenotifypropertychangedobserver" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Allows to observe and filter an object that implements INotifyPropertyChanged</p>
</blockquote>
<p>Example 1:</p>
<pre><code class="cs">var owner = new User();
var propertyName = &quot;FirstName&quot;;

// the callback is invoked only if the property name is &quot;FirstName&quot; for example
var filter = new Func&lt;INotifyPropertyChanged, PropertyChangedEventArgs, bool&gt;((s, e) =&gt; e.PropertyName == propertyName);

var propertyChangedObserver = new FilterableNotifyPropertyChangedObserver(owner, filter);
propertyChangedObserver.SubscribeToPropertyChanged((e) =&gt; RaiseCanExecuteChanged());
</code></pre>

<p>Example 2:
The owner can be any object that implements INotifyPropertyChanged. Example with the ItemCollection of a TabControl. Notification on tab item count changed.</p>
<pre><code class="cs">var observer = new NotifyPropertyChangedObserver(MyTabControl.Items);
observer.SubscribeToPropertyChanged((e) =&gt;
{
    MessageBox.Show(e.PropertyName);
});
</code></pre>

<p>We can use PropertyDescriptor in Wpf.</p>
<pre><code class="cs">DependencyPropertyDescriptor
    .FromProperty(TabControl.HasItemsProperty, typeof(TabControl))
    .AddValueChanged(MyTabControl, (s, e) =&gt;
    {
        MessageBox.Show(e.ToString()); // raised when the tab items collection is empty
    });
</code></pre>

<h2 id="relay-command">Relay command<a class="headerlink" href="#relay-command" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Example</p>
<pre><code class="cs">public class PageAViewModel : ViewModel
{
        public IRelayCommand MyCommand { get; }

        public PageAViewModel()
        {     
            this.MyCommand = new RelayCommand(() =&gt; {  /* do something */ });
        }
}
</code></pre>

<p>And in the view</p>
<pre><code class="xml">&lt;Button Command=&quot;{Binding MyCommand}&quot;&gt;Do something&lt;/Button&gt;
</code></pre>

<p>Other example <strong>with parameter and condition</strong></p>
<pre><code class="cs">public class PageAViewModel
{
        public ICommand MyCommand { get; }

        public PageAViewModel()
        {     
            this.MyCommand = new RelayCommand&lt;string&gt;((value) =&gt;{  /* do something */ }, (value) =&gt; true);
        }
}
</code></pre>

<pre><code class="xml">&lt;Button Command=&quot;{Binding MyCommand}&quot; CommandParameter=&quot;my parameter&quot;&gt;Do something&lt;/Button&gt;
</code></pre>

<p><strong>RaiseCanExecuteChanged</strong> allows to invoke the can execute method &quot;on demand&quot;.</p>
<pre><code class="cs">public class TabViewModel : BindableBase
{
    private bool canSave;
    public bool CanSave
    {
        get { return canSave; }
        set
        {
            if (SetProperty(ref canSave, value))
            {
                SaveCommand.RaiseCanExecuteChanged(); // &lt;=
            }
        }
    }

    public IRelayCommand SaveCommand { get; set; }

    public TabViewModel()
    {
        canSave = true;
        SaveCommand = new RelayCommand(OnSave, CheckCanSave);
    }

    private void OnSave()
    {
        var message = $&quot;Save TabView {Title}! {DateTime.Now.ToLongTimeString()}&quot;;
        MessageBox.Show(message);
        SaveMessage = message;
    }

    private bool CheckCanSave()
    {
        return canSave;
    }  
}
</code></pre>

<p>Or with <strong>ObserveProperty</strong>. This method allows to <strong>observe a property</strong> and <strong>raise can execute changed automatically</strong> on property changed. </p>
<pre><code class="cs">public class TabViewModel : BindableBase
{
    private bool canSave;
    public bool CanSave
    {
        get { return canSave; }
        set { SetProperty(ref canSave, value); }
    }

    public IRelayCommand SaveCommand { get; set; }

    public TabViewModel()
    {
        canSave = true;
        SaveCommand = new RelayCommand(OnSave, CheckCanSave)
            .ObserveProperty(() =&gt; CanSave); // &lt;=
    }

    private void OnSave()
    {
        var message = $&quot;Save TabView {Title}! {DateTime.Now.ToLongTimeString()}&quot;;
        MessageBox.Show(message);
        SaveMessage = message;
    }

    private bool CheckCanSave()
    {
        return canSave;
    }  
}
</code></pre>

<h2 id="composite-command">Composite command<a class="headerlink" href="#composite-command" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>The command is executed only if all conditions are true</p>
<pre><code class="cs">// create a composite command
var compositeCommand = new CompositeCommand();

// create commands
var commandA = new RelayCommand(() =&gt; {  /* do something */ });
var commandB = new RelayCommand(() =&gt; {  /* do something */ });

// add commands to the composite command
compositeCommand.Add(commandA);
compositeCommand.Add(commandB);

// the composite command executes all registered commands if all commands can execute
compositeCommand.Execute(null);
</code></pre>

<p><em>Real sample</em></p>
<p>Create an interface and a class with a composite command. This allows to inject the service to view models with an IoC container.</p>
<pre><code class="cs">public interface IApplicationCommands
{
    CompositeCommand SaveAllCommand { get; }
}

public class ApplicationCommands : IApplicationCommands
{
    public CompositeCommand SaveAllCommand { get; } = new CompositeCommand();
}
</code></pre>

<p>Register with MvvmLib.IoC Container at App Startup for example:</p>
<pre><code class="cs"> container.RegisterSingleton&lt;IApplicationCommands, ApplicationCommands&gt;();
</code></pre>

<p>Create a view and view model (for a tabcontrol for example)</p>
<pre><code class="cs">public class TabViewModel : BindableBase, INavigatable
{
    // other properties, etc.

    private bool canSave;
    public bool CanSave
    {
        get { return canSave; }
        set
        {
            if (SetProperty(ref canSave, value))
            {
                // the composite is notified that can execute of this command changed (enable/disable the SaveAllCommand button)
                SaveCommand.RaiseCanExecuteChanged();
            }
        }
    }

    public IRelayCommand SaveCommand { get; set; }

    public TabViewModel(IApplicationCommands applicationCommands)
    {
        canSave = true;
        SaveCommand = new RelayCommand(OnSave, CheckCanSave);

        // add the command to the composite command
        applicationCommands.SaveAllCommand.Add(SaveCommand);
    }

    private void OnSave()
    {
        var message = $&quot;Save TabView {Title}! {DateTime.Now.ToLongTimeString()}&quot;;
        MessageBox.Show(message);
        SaveMessage = message;
    }

    private bool CheckCanSave()
    {
        return canSave;
    }

    // INavigatable implementation, etc.
}
</code></pre>

<p>Bind the command in the view</p>
<pre><code class="xml">&lt;UserControl x:Class=&quot;CompositeCommandSample.Views.TabView&quot;
             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
             xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; 
             xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot; 
             xmlns:local=&quot;clr-namespace:CompositeCommandSample.Views&quot;
             mc:Ignorable=&quot;d&quot; 
             d:DesignHeight=&quot;450&quot; d:DesignWidth=&quot;800&quot;&gt;

    &lt;StackPanel HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot;&gt;
        &lt;TextBlock Text=&quot;{Binding Title}&quot; FontSize=&quot;18&quot; FontWeight=&quot;Bold&quot; Margin=&quot;4&quot;&gt;&lt;/TextBlock&gt;
        &lt;CheckBox IsChecked=&quot;{Binding CanSave}&quot; Content=&quot;Can save?&quot; Margin=&quot;4&quot;&gt;&lt;/CheckBox&gt;
        &lt;!-- the button is disabled if cannot save --&gt;
        &lt;Button Content=&quot;Save&quot; Command=&quot;{Binding SaveCommand}&quot; Margin=&quot;4&quot;&gt;&lt;/Button&gt;
        &lt;TextBlock Text=&quot;{Binding SaveMessage}&quot; Margin=&quot;4&quot;&gt;&lt;/TextBlock&gt;
    &lt;/StackPanel&gt;

&lt;/UserControl&gt;
</code></pre>

<p>Create the shell and the ShellViewModel (Sample with Wpf)</p>
<pre><code class="cs">public class ShellViewModel : ILoadedEventListener
{
    public CompositeCommand SaveAllCommand { get; }

    private IRegionManager regionManager;

    public ShellViewModel(IApplicationCommands applicationCommands, IRegionManager regionManager)
    {
        SaveAllCommand = applicationCommands.SaveAllCommand;
        this.regionManager = regionManager;
    }

    public async void OnLoaded(object parameter)
    {
        // create 3 tabs for a tab control
        await regionManager.GetItemsRegion(&quot;TabRegion&quot;).AddAsync(typeof(TabView), &quot;TabA&quot;);
        await regionManager.GetItemsRegion(&quot;TabRegion&quot;).AddAsync(typeof(TabView), &quot;TabB&quot;);
        await regionManager.GetItemsRegion(&quot;TabRegion&quot;).AddAsync(typeof(TabView), &quot;TabC&quot;);
    }
}
</code></pre>

<p>Bind the composite command in the Shell</p>
<pre><code class="xml">&lt;Window x:Class=&quot;CompositeCommandSample.Views.Shell&quot;
        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
        xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;
        xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;
        xmlns:local=&quot;clr-namespace:CompositeCommandSample.Views&quot;
        xmlns:nav=&quot;http://mvvmlib.com/&quot;
        nav:ViewModelLocator.ResolveWindowViewModel=&quot;True&quot;
        mc:Ignorable=&quot;d&quot;
        Title=&quot;Shell&quot; Height=&quot;450&quot; Width=&quot;800&quot;&gt;
    &lt;Grid&gt;
        &lt;Grid.RowDefinitions&gt;
            &lt;RowDefinition Height=&quot;Auto&quot;/&gt;
            &lt;RowDefinition /&gt;
        &lt;/Grid.RowDefinitions&gt;

        &lt;!-- the button is disabled if one command cannot save --&gt;
        &lt;Button Content=&quot;Save All&quot; Command=&quot;{Binding SaveAllCommand}&quot; Width=&quot;120&quot; Margin=&quot;4&quot; HorizontalAlignment=&quot;Left&quot;&gt;&lt;/Button&gt;

        &lt;TabControl nav:RegionManager.ItemsRegionName=&quot;TabRegion&quot; Grid.Row=&quot;1&quot;&gt;
            &lt;TabControl.ItemContainerStyle&gt;
                &lt;Style TargetType=&quot;TabItem&quot;&gt;
                    &lt;Setter Property=&quot;Header&quot; Value=&quot;{Binding Title}&quot; /&gt;
                &lt;/Style&gt;
            &lt;/TabControl.ItemContainerStyle&gt;
        &lt;/TabControl&gt;
        
    &lt;/Grid&gt;
&lt;/Window&gt;
</code></pre>

<h2 id="sync-data">Sync Data<a class="headerlink" href="#sync-data" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Model have to implement <strong>ISyncItem</strong> interface:</p>
<ul>
<li><strong>NeedSync</strong>: check if the &quot;<strong>other<strong>&quot; instance is the same (&quot;</strong>deep equal</strong>&quot;)</li>
<li><strong>Sync</strong> : <strong>update values</strong> <strong>with <strong>the &quot;</strong>other<strong>&quot; instance</strong> values</strong></li>
</ul>
<pre><code class="cs">  public class Item : Observable, ISyncItem&lt;Item&gt;
    {
        public string Id { get; set; }

        private string _title;
        public string Title
        {
            get { return _title; }
            set { this.Set(ref _title, value); }
        }
        // other properties ...

        public bool NeedSync(Item other)
        {
            return Id == other.Id &amp;&amp; (this.Title != other.Title); // Test each property
        }

        public void Sync(Item other)
        {
            Title = other.Title;
            // etc.
        }

        public bool Equals(Item other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (ReferenceEquals(null, other)) return false;

            return this.Id == other.Id;
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as Item);
        }

        public override int GetHashCode()
        {
            if (string.IsNullOrEmpty(this.Id))
            {
                return 0;
            }
            return this.Id.GetHashCode();
        }
    }
</code></pre>

<p>Example:</p>
<p>Call <strong>Sync</strong> (extension method for lists and collections)</p>
<pre><code class="cs"> var oldItems = new List&lt;Item&gt; {
                new Item { Id=&quot;1&quot;, Title = &quot;Title 1&quot; },
                new Item { Id=&quot;2&quot;, Title = &quot;Title 2&quot; },
                new Item { Id=&quot;3&quot;, Title = &quot;Title 3&quot; }
            };

var newItems = new List&lt;Item&gt;{
                new Item{ Id=&quot;2&quot;, Title = &quot;Title 2!!!!!!&quot;},
                new Item{ Id=&quot;3&quot;, Title = &quot;Title 3&quot;},
                new Item{ Id=&quot;4&quot;, Title = &quot;Title 4&quot;}
            };

oldItems.Sync(newItems);
// item 1 removed
// item 2 updated
// item 3 not updated
// item 4 added
</code></pre>

<h2 id="singleton">Singleton<a class="headerlink" href="#singleton" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Example:</p>
<pre><code class="cs">Singleton&lt;MyService&gt;.Instance.DoSomething();
</code></pre>

<h2 id="eventaggregator">EventAggregator<a class="headerlink" href="#eventaggregator" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>allows to subscribe, publish and filter messages</p>
</blockquote>
<p>Register the eventAggregator as singleton with an ioc container. </p>
<pre><code class="cs">public class ShellViewModel : BindableBase
{
    public ShellViewModel(EventAggregator eventAggregator)
    {

    }
}
</code></pre>

<p>Or without an ioc container, use the Singleton class.</p>
<pre><code class="cs">var eventAggregator = Singleton&lt;EventAggregator&gt;.Instance;
</code></pre>

<p><strong>Subscribe</strong> and <strong>publish</strong> with empty event (no parameter)</p>
<p>Create the event class</p>
<pre><code class="cs">public class MyEvent : EmptyEvent
{ }
</code></pre>

<pre><code class="cs">// subscriber
eventAggregator.GetEvent&lt;MyEvent&gt;().Subscribe(() =&gt; { /* do something with args.Message */ });
</code></pre>

<pre><code class="cs">// publisher
eventAggregator.GetEvent&lt;MyEvent&gt;().Publish();
</code></pre>

<p><strong>Subscribe</strong> and <strong>publish</strong> with parameter</p>
<pre><code class="cs">public class DataSavedEvent : ParameterizedEvent&lt;DataSavedEventArgs&gt;
{ }

public class DataSavedEventArgs
{
    public string Message { get; set; }
}
</code></pre>

<pre><code class="cs">// subscriber
eventAggregator.GetEvent&lt;DataSavedEvent&gt;().Subscribe(args =&gt; { /* do something with args.Message */ });
</code></pre>

<pre><code class="cs">// publisher
eventAggregator.GetEvent&lt;DataSavedEvent&gt;().Publish(new DataSavedEventArgs { Message = &quot;Data saved.&quot; })
</code></pre>

<p><strong>Filter</strong></p>
<p>Example: Filter on &quot;user id&quot;</p>
<pre><code class="cs">eventAggregator.GetEvent&lt;MyUserEvent&gt;().Subscribe(user =&gt; { /* do something */ }).WithFilter(user =&gt; user.Id == 1); // &lt;= not notified

messenger.GetEvent&lt;MyUserEvent&gt;().Publish(new User { Id = 2, UserName = &quot;Marie&quot; });  // &lt;=
</code></pre>

<p>The event class:</p>
<pre><code class="cs">public class MyUserEvent : ParameterizedEvent&lt;User&gt;
{ }
</code></pre>

<p><strong>Execution strategy</strong>:</p>
<ul>
<li><strong>PublisherThread</strong> (default)</li>
<li><strong>UIThread</strong></li>
<li><strong>BackgroundThread</strong></li>
</ul>
<pre><code class="cs">eventAggregator.GetEvent&lt;DataSavedEvent&gt;().Subscribe(_ =&gt; { }).WithExecutionStrategy(ExecutionStrategyType.UIThread);
</code></pre>

<p><strong>Unsubscribe</strong> with the token received on subscription.</p>
<pre><code class="cs">var subscriberOptions = eventAggregator.GetEvent&lt;DataSavedEvent&gt;().Subscribe(_ =&gt; { });

var success = eventAggregator.GetEvent&lt;DataSavedEvent&gt;().Unsubscribe(subscriberOptions.Token);
</code></pre>


                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
MvvmLib Documentation. &copy;2019. <a href='https://github.com/romagny13/MvvmLib' target='_blank'>GitHub</a> | <a href='https://www.nuget.org/profiles/romagny13' target='_blank'>NuGet</a>.
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="js/jquery-2.1.1.min.js"></script>
    <script src="js/modernizr-2.8.3.min.js"></script>
    <script src="js/highlight.pack.js"></script>
    <script src="js/theme.js"></script>

</body>
</html>
