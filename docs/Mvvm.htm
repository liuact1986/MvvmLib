<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>MvvmLib.Core - MvvmLib Documentation</title>
    <link rel="shortcut icon" href="favicon.ico">
    <link rel="stylesheet" href="css/theme.css" type="text/css" />
    <link rel="stylesheet" href="css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="css/styles/vs.css">
    <link rel="stylesheet" href="css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="index.htm"><i class="fa fa-home"></i> MvvmLib Documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="index.htm">Home</a>
</li>

<li class="tocentry current"><a class="current" href="Mvvm.htm">MvvmLib.Core</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#bindablebase">BindableBase</a></li>

<li class="tocentry"><a href="#editable">Editable</a></li>

<li class="tocentry"><a href="#validatable">Validatable</a></li>

<li class="tocentry"><a href="#modelwrapper">ModelWrapper</a></li>

<li class="tocentry"><a href="#relay-command">Relay command</a></li>

<li class="tocentry"><a href="#composite-command">Composite command</a></li>

<li class="tocentry"><a href="#sync-data">Sync Data</a></li>

<li class="tocentry"><a href="#singleton">Singleton</a></li>

<li class="tocentry"><a href="#messenger">Messenger</a></li>



</ul>
<li class="tocentry"><a href="DI.htm">MvvmLib.IoC</a>
</li>
<li class="tocentry"><a href="Navigation.htm">MvvmLib.Wpf</a>
</li>
<li class="tocentry"><a href="Navigation_Uwp.htm">MvvmLib.Windows</a>
</li>
<li class="tocentry"><a href="Navigation_XF.htm">MvvmLib.XF</a>
</li>
<li class="tocentry"><a href="Adaptive.htm">MvvmLib.Adaptive.Wpf</a>
</li>
<li class="tocentry"><a href="Adaptive_Uwp.htm">MvvmLib.Adaptive.Windows</a>
</li>
<li class="tocentry"><a href="LICENSE.htm">LICENSE</a>
</li>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="index.htm">MvvmLib Documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="index.htm">Home</a></li> / <li><a href="Mvvm.htm">MvvmLib.Core</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="mvvm">Mvvm<a class="headerlink" href="#mvvm" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<ul>
<li><strong>BindableBase</strong>, <strong>Editable</strong>, <strong>Validatable</strong> and <strong>ModelWrapper</strong> base classes for <em>Models and ViewModels</em></li>
<li><strong>Commands</strong> and <strong>composite</strong> command</li>
<li><strong>Sync</strong> <em>extensions for list and collections</em>. Allows to <strong>sync data</strong></li>
<li><strong>Singleton</strong></li>
<li><strong>Messenger</strong> : allows to <strong>subscribe</strong>, <strong>publish</strong> and filter messages</li>
</ul>
<h2 id="bindablebase">BindableBase<a class="headerlink" href="#bindablebase" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Implements <em>INotifyPropertyChanged</em> interface.</p>
</blockquote>
<p>Allows to observe a property and notify the view that a value has changed.</p>
<p>SetProperty</p>
<pre><code class="cs">public class UserViewModel : BindableBase
{
    private string firstName;
    public string FirstName
    {
        get { return firstName; }
        set { SetProperty(ref firstName, value); }
    }
}
</code></pre>

<p>RaisePropertyChanged</p>
<pre><code class="cs">public class UserViewModel : BindableBase
{
    private string firstName;
    public string FirstName
    {
        get { return firstName; }
        set
        {
            SetProperty(ref firstName, value);
            RaisePropertyChanged(&quot;FullName&quot;);
        }
    }

    private string lastName;
    public string LastName
    {
        get { return lastName; }
        set
        {
            SetProperty(ref lastName, value);
            RaisePropertyChanged(&quot;FullName&quot;);
        }
    }

    public string FullName
    {
        get { return $&quot;{firstName} {LastName}&quot;; }
    }
}
</code></pre>

<h2 id="editable">Editable<a class="headerlink" href="#editable" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Implements <em>IEditableObject</em> interface.</p>
</blockquote>
<p>Allows to cancel and <strong>restore</strong> <strong>old values</strong>. Entity Framework (ICollection, ect.) and circular references are supported.</p>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Method</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>BeginEdit</td>
	<td>Store model values</td>
</tr>
<tr>
	<td>CancelEdit</td>
	<td>Restore model values</td>
</tr>
</tbody>
</table>
<p>Example</p>
<pre><code class="cs">public class User : Editable
{
    public string FirstName { get; set; }

    public string LastName { get; set; }

    // object, list , etc.
}
</code></pre>

<pre><code class="cs">var user = new User
{
    FirstName = &quot;Marie&quot;,
    LastName = &quot;Bellin&quot;,
    // etc.
};

user.BeginEdit();

user.FirstName = &quot;Marie!!&quot;;

user.CancelEdit(); 
</code></pre>

<h2 id="validatable">Validatable<a class="headerlink" href="#validatable" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Validation + Edition</p>
</blockquote>
<p>Allows to <strong>validate</strong> the model with <strong>Data Annotations</strong> and <strong>custom validations</strong>. Allows to cancel and <strong>restore</strong> <strong>old values</strong>. </p>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Validation Handling</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>OnPropertyChange</td>
	<td>Default. Validation on property changed</td>
</tr>
<tr>
	<td>OnSubmit</td>
	<td>Validation only after &quot;ValidateAll&quot; invoked. Validation on property changed only after &quot;ValidateAll&quot; invoked</td>
</tr>
<tr>
	<td>Explicit</td>
	<td>Validation only with &quot;ValidateProperty&quot; and &quot;ValidateAll&quot;</td>
</tr>
</tbody>
</table>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Property</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>UseDataAnnotations</td>
	<td>Ignore or use Data Annotations for validation</td>
</tr>
<tr>
	<td>UseCustomValidations</td>
	<td>Ignore or use Custom validations</td>
</tr>
</tbody>
</table>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Method</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>ValidateProperty</td>
	<td>Validate one property</td>
</tr>
<tr>
	<td>ValidateAll</td>
	<td>Validate all properties</td>
</tr>
<tr>
	<td>Reset</td>
	<td>Reset the errors</td>
</tr>
<tr>
	<td>BeginEdit</td>
	<td>Store model values</td>
</tr>
<tr>
	<td>CancelEdit</td>
	<td>Restore model values and errors</td>
</tr>
</tbody>
</table>
<p>The model require to use SetProperty</p>
<pre><code class="cs">public class User : Validatable
{
    private string firstName;

    [Required]
    [StringLength(50)]
    public string FirstName
    {
        get { return firstName; }
        set { SetProperty(ref firstName, value); }
    }

    // object, list , etc.
}
</code></pre>

<pre><code class="cs">var user = new User
{
    FirstName = &quot;Marie&quot;,
    LastName = &quot;Bellin&quot;,
    // etc.
};


// validate a property
user.ValidateProperty(&quot;FirstName&quot;, &quot;&quot;);

// validate all
user.ValidateAll();

if (user.HasErrors)
{

}

// reset errors the errors
user.Reset();

// reset the errors and the model
user.CancelEdit();

// etc.
</code></pre>

<h2 id="modelwrapper">ModelWrapper<a class="headerlink" href="#modelwrapper" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Allows to wrap, edit and validate a model.</p>
</blockquote>
<p>The model do not require to use SetProperty</p>
<pre><code class="cs">public class User
{
    public int Id { get; set; }

    [Required]
    [StringLength(50)]
    public string FirstName { get; set; }

    [StringLength(50)]
    public string LastName { get; set; }

    // object, list , etc.
}
</code></pre>

<p>Create a Generic model wrapper class</p>
<pre><code class="cs">public class UserWrapper : ModelWrapper&lt;User&gt;
{
    public UserWrapper(User model) : base(model)
    {
    }

    public int Id { get { return Model.Id; } }

    public string FirstName
    {
        get { return GetValue&lt;string&gt;(); }
        set { SetValue(value); }
    }

    public string LastName
    {
        get { return GetValue&lt;string&gt;(); }
        set { SetValue(value); }
    }

    // etc.

    // custom validations
    protected override IEnumerable&lt;string&gt; DoCustomValidations(string propertyName)
    {
        switch (propertyName)
        {
            case nameof(FirstName):
                if (string.Equals(FirstName, &quot;Marie&quot;, StringComparison.OrdinalIgnoreCase))
                {
                    yield return &quot;Marie is not allowed&quot;;
                }
                break;
        }
    }
}
</code></pre>

<p>ViewModel sample</p>
<pre><code class="cs">public class UserDetailViewModel : BindableBase
{
    private UserWrapper user;
    public UserWrapper User
    {
        get { return user; }
        set { SetProperty(ref user, value); }
    }

    public ICommand SaveCommand { get; }
    public ICommand ResetCommand { get; }

    public UserDetailViewModel()
    {
        User = new UserWrapper(new Models.User
        {
            Id = 1
        });

        this.user.BeginEdit();

        SaveCommand = new RelayCommand(OnSave);
        ResetCommand = new RelayCommand(OnReset);
    }

    private void OnSave()
    {
        this.User.ValidateAll();
    }

    private void OnReset()
    {
        this.user.CancelEdit(); // reset the errors and the model
    }
}
</code></pre>

<p><strong>Wpf</strong></p>
<p>Binding</p>
<pre><code class="xml"> &lt;TextBox Text=&quot;{Binding User.FirstName, UpdateSourceTrigger=PropertyChanged}&quot; /&gt;
</code></pre>

<p>Create a Style that displays errors</p>
<pre><code class="xml">&lt;Style TargetType=&quot;TextBox&quot;&gt;
    &lt;Setter Property=&quot;Validation.ErrorTemplate&quot;&gt;
        &lt;Setter.Value&gt;
            &lt;ControlTemplate&gt;
                &lt;StackPanel&gt;
                    &lt;AdornedElementPlaceholder x:Name=&quot;placeholder&quot;/&gt;
                    &lt;!--TextBlock with error --&gt;
                    &lt;TextBlock FontSize=&quot;12&quot; Foreground=&quot;Red&quot; 
                        Text=&quot;{Binding ElementName=placeholder,Path=AdornedElement.(Validation.Errors)[0].ErrorContent}&quot;/&gt;
                &lt;/StackPanel&gt;
            &lt;/ControlTemplate&gt;
        &lt;/Setter.Value&gt;
    &lt;/Setter&gt;
    &lt;Style.Triggers&gt;
        &lt;Trigger Property=&quot;Validation.HasError&quot; Value=&quot;True&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;Red&quot;/&gt;
            &lt;!--Tooltip with error --&gt;
            &lt;Setter Property=&quot;ToolTip&quot; 
            Value=&quot;{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}&quot;/&gt;
        &lt;/Trigger&gt;
    &lt;/Style.Triggers&gt;
&lt;/Style&gt;
</code></pre>

<p><strong>Uwp</strong></p>
<pre><code class="xml"> &lt;TextBox Text=&quot;{Binding User.FirstName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}&quot; /&gt;
&lt;!-- with converter --&gt;
&lt;TextBlock Text=&quot;{Binding User.Errors[FirstName][0]}&quot; Foreground=&quot;Red&quot;&gt;&lt;/TextBlock&gt;
</code></pre>

<p>Or Create a <em>Converter</em> that displays the <em>first error</em> of the list</p>
<pre><code class="cs">public sealed class FirstErrorConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, string language)
    {
        var errors = value as IList&lt;string&gt;;
        return errors != null &amp;&amp; errors.Count &gt; 0 ? errors.ElementAt(0) : null;
    }

    public object ConvertBack(object value, Type targetType, object parameter, string language)
    {
        throw new NotImplementedException();
    }
}
</code></pre>

<p>And use it</p>
<pre><code class="xml">&lt;Page.Resources&gt;
    &lt;converters:FirstErrorConverter x:Name=&quot;FirstErrorConverter&quot;&gt;&lt;/converters:FirstErrorConverter&gt;
&lt;/Page.Resources&gt;
</code></pre>

<pre><code class="xml"> &lt;TextBox Text=&quot;{Binding User.FirstName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}&quot; /&gt;
&lt;!-- with converter --&gt;
&lt;TextBlock Text=&quot;{Binding User.Errors[FirstName], Converter={StaticResource FirstErrorConverter}}&quot; Foreground=&quot;Red&quot;&gt;&lt;/TextBlock&gt;
</code></pre>

<h2 id="relay-command">Relay command<a class="headerlink" href="#relay-command" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Example</p>
<pre><code class="cs">public class PageOneViewModel : ViewModel
{
        public IRelayCommand MyCommand { get; }

        public PageOneViewModel()
        {     
            this.MyCommand = new RelayCommand(() =&gt;
            {

            });
        }
}
</code></pre>

<p>And in the view</p>
<pre><code class="xml">&lt;Button Command=&quot;{Binding MyCommand}&quot;&gt;Do something&lt;/Button&gt;
</code></pre>

<p>Other example <strong>with parameter and condition</strong></p>
<pre><code class="cs">public class PageOneViewModel
{
        public ICommand MyCommand { get; }

        public PageOneViewModel()
        {     
            this.MyCommand = new RelayCommand&lt;string&gt;((value) =&gt;
            {
                // 
            }, (value)=&gt;
            {
                return true;
            });
        }
}
</code></pre>

<pre><code class="xml">&lt;Button Command=&quot;{Binding MyCommand}&quot; CommandParameter=&quot;my parameter&quot;&gt;Do something&lt;/Button&gt;
</code></pre>

<h2 id="composite-command">Composite command<a class="headerlink" href="#composite-command" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>The command is executed only if all conditions are true</p>
<pre><code class="cs">// create a composite command
var compositeCommand = new CompositeCommand();

// create commands
var commandA = new RelayCommand(() =&gt; {  /* do something */ });
var commandB = new RelayCommand(() =&gt; {  /* do something */ });

// add commands to the composite command
compositeCommand.Add(commandA);
compositeCommand.Add(commandB);

// the composite command executes all registered commands if all commands can execute
compositeCommand.Execute(null);
</code></pre>

<p>Or register commands with composite command constructor</p>
<pre><code class="cs">var commandA = new RelayCommand(() =&gt; {  /* do something */ });
var commandB = new RelayCommand(() =&gt; {  /* do something */ });

var compositeCommand = new CompositeCommand(commandA, commandB); // &lt;= params ICommand[] commands

compositeCommand.Execute(null);
</code></pre>

<p>Or with AddRange</p>
<pre><code class="cs">var compositeCommand = new CompositeCommand();

compositeCommand.AddRange(new List&lt;ICommand&gt;
{
    new RelayCommand(() =&gt; { /* do something */ }),
    new RelayCommand(() =&gt; { /* do something */ })
});

compositeCommand.Execute(&quot;My parameter&quot;);
</code></pre>

<p>With parameter. Each command receives the parameter.</p>
<pre><code class="cs">var compositeCommand = new CompositeCommand();

var commandA = new RelayCommand&lt;string&gt;((p) =&gt; { /* do something */ });
var commandB = new RelayCommand&lt;string&gt;((p) =&gt; { /* do something */ });

compositeCommand.Add(commandA);
compositeCommand.Add(commandB);

compositeCommand.Execute(&quot;My parameter&quot;);
</code></pre>

<p>Check if command can be executed</p>
<pre><code class="cs">// if all command can be excecuted, all commands of composite command are executed
if (compositeCommand.CanExecute(&quot;My parameter&quot;))
{
    compositeCommand.Execute(&quot;My parameter&quot;);
}
</code></pre>

<p>Bind the command or composite command in <strong>Xaml</strong></p>
<p>Create a ViewModel with a command and set the DataContext to this ViewModel</p>
<pre><code class="cs">public class ShellViewModel
{
    public ICommand MyCommand { get; set; }

    public ShellViewModel()
    {
        MyCommand = new RelayCommand(() =&gt; MessageBox.Show(&quot;My command works!&quot;));
    }
}
</code></pre>

<pre><code class="xml">&lt;Button Content=&quot;My command&quot; Command=&quot;{Binding MyCommand}&quot; CommandParameter=&quot;My parameter&quot;&gt;&lt;/Button&gt;
</code></pre>

<h2 id="sync-data">Sync Data<a class="headerlink" href="#sync-data" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Model have to implement <strong>ISyncItem</strong> interface:</p>
<ul>
<li><strong>NeedSync</strong>: check if the &quot;<strong>other<strong>&quot; instance is the same (&quot;</strong>deep equal</strong>&quot;)</li>
<li><strong>Sync</strong> : <strong>update values</strong> <strong>with <strong>the &quot;</strong>other<strong>&quot; instance</strong> values</strong></li>
</ul>
<pre><code class="cs">  public class Item : Observable, ISyncItem&lt;Item&gt;
    {
        public string Id { get; set; }

        private string _title;
        public string Title
        {
            get { return _title; }
            set { this.Set(ref _title, value); }
        }
        // other properties ...

        public bool NeedSync(Item other)
        {
            return Id == other.Id &amp;&amp; (this.Title != other.Title); // Test each property
        }

        public void Sync(Item other)
        {
            Title = other.Title;
            // etc.
        }

        public bool Equals(Item other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (ReferenceEquals(null, other)) return false;

            return this.Id == other.Id;
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as Item);
        }

        public override int GetHashCode()
        {
            if (string.IsNullOrEmpty(this.Id))
            {
                return 0;
            }
            return this.Id.GetHashCode();
        }
    }
</code></pre>

<p>Example:</p>
<p>Call <strong>Sync</strong> (extension method for lists and collections)</p>
<pre><code class="cs"> var oldItems = new List&lt;Item&gt; {
                new Item { Id=&quot;1&quot;, Title = &quot;Title 1&quot; },
                new Item { Id=&quot;2&quot;, Title = &quot;Title 2&quot; },
                new Item { Id=&quot;3&quot;, Title = &quot;Title 3&quot; }
            };

var newItems = new List&lt;Item&gt;{
                new Item{ Id=&quot;2&quot;, Title = &quot;Title 2!!!!!!&quot;},
                new Item{ Id=&quot;3&quot;, Title = &quot;Title 3&quot;},
                new Item{ Id=&quot;4&quot;, Title = &quot;Title 4&quot;}
            };

oldItems.Sync(newItems);
// item 1 removed
// item 2 updated
// item 3 not updated
// item 4 added
</code></pre>

<h2 id="singleton">Singleton<a class="headerlink" href="#singleton" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Example:</p>
<pre><code class="cs">Singleton&lt;MyService&gt;.Instance.DoSomething();
</code></pre>

<h2 id="messenger">Messenger<a class="headerlink" href="#messenger" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Inject the service</p>
<pre><code class="cs">public class ShellViewModel
{
    IMessenger messenger;
    
    public ShellViewModel(IMessenger messenger)
    {
        this.messenger = messenger;
    }
}
</code></pre>

<p><strong>Subscribe</strong> and <strong>publish</strong> with empty event (no parameter)</p>
<p>Create the event class</p>
<pre><code class="cs">public class MyEvent : EmptyEvent
{

}
</code></pre>

<pre><code class="cs">messenger.GetEvent&lt;MyEvent&gt;().Subscribe(() =&gt;
{

});

messenger.GetEvent&lt;MyEvent&gt;().Publish();
</code></pre>

<p><strong>Subscribe</strong> and <strong>publish</strong> with parameter</p>
<p>Example with a string parameter</p>
<p>Create the event class</p>
<pre><code class="cs">public class MyStringEvent : ParameterizedEvent&lt;string&gt;
{
}
</code></pre>

<pre><code class="cs">messenger.GetEvent&lt;MyStringEvent&gt;().Subscribe((parameter) =&gt;
{

});

messenger.GetEvent&lt;MyStringEvent&gt;().Publish(&quot;my parameter&quot;);
</code></pre>

<p><strong>Filter</strong></p>
<p>Exemple: Filter on &quot;user id&quot;</p>
<pre><code class="cs">messenger.GetEvent&lt;MyUserEvent&gt;().Subscribe((result) =&gt;
{

}, (user) =&gt; user.Id == 1); // subscriber not notified

messenger.GetEvent&lt;MyUserEvent&gt;().Publish(new User { Id = 2, UserName = &quot;Marie&quot; });
</code></pre>

<p>The event class:</p>
<pre><code class="cs">public class MyUserEvent : ParameterizedEvent&lt;User&gt;
{ }
</code></pre>

<p>Result <strong>with callback</strong> (the publisher receive a response from the subscriber).</p>
<pre><code class="cs">public class MyCallbackEvent : ParameterizedEvent&lt;MyCallbackResult&gt;
{

}

public class MyCallbackResult : ResultWithCallback&lt;string&gt;
{
    public string Message { get; set; }

    public MyCallbackResult(string message, Action&lt;string&gt; callback)
        : base(callback)
    {
        this.Message = message;
    }
}
</code></pre>

<pre><code class="cs">messenger.GetEvent&lt;MyCallbackEvent&gt;().Subscribe((result) =&gt;
{
   // result.Message
    result.InvokeCallback(&quot;my response&quot;);
});


messenger.GetEvent&lt;MyCallbackEvent&gt;().Publish(new MyCallbackResult(&quot;first message&quot;,(response) =&gt;
{
    // &quot;my response&quot;
}));
</code></pre>


                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
MvvmLib Documentation. &copy;2019. <a href='https://github.com/romagny13/MvvmLib' target='_blank'>GitHub</a> | <a href='https://www.nuget.org/profiles/romagny13' target='_blank'>NuGet</a>.
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="js/jquery-2.1.1.min.js"></script>
    <script src="js/modernizr-2.8.3.min.js"></script>
    <script src="js/highlight.pack.js"></script>
    <script src="js/theme.js"></script>

</body>
</html>
