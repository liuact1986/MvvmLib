<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>MvvmLib.Wpf - MvvmLib Documentation</title>
    <link rel="shortcut icon" href="favicon.ico">
    <link rel="stylesheet" href="css/theme.css" type="text/css" />
    <link rel="stylesheet" href="css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="css/styles/vs.css">
    <link rel="stylesheet" href="css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="index.htm"><i class="fa fa-home"></i> MvvmLib Documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="index.htm">Home</a>
</li>

<li class="tocentry"><a href="Mvvm.htm">MvvmLib.Core</a>
</li>
<li class="tocentry"><a href="DI.htm">MvvmLib.IoC</a>
</li>
<li class="tocentry current"><a class="current" href="Navigation.htm">MvvmLib.Wpf</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#mvvmlib.wpf-navigation-net-4.5">MvvmLib.Wpf (Navigation) [net 4.5]</a></li>

<li class="tocentry"><a href="#create-a-bootstrapper">Create a Bootstrapper</a></li>

<li class="tocentry"><a href="#navigationsource-keyednavigationsource-and-contentcontrolnavigationsource">NavigationSource, KeyedNavigationSource and ContentControlNavigationSource</a></li>

<li class="tocentry"><a href="#sharedsource-for-itemscontrol-listbox-tabcontrol-etc.">SharedSource for ItemsControl, ListBox, TabControl, etc.</a></li>

<li class="tocentry"><a href="#viewmodellocator">ViewModelLocator</a></li>

<li class="tocentry"><a href="#inavigationaware">INavigationAware</a></li>

<li class="tocentry"><a href="#navigation-guards-icanactivate-icandeactivate">Navigation Guards (ICanActivate, ICanDeactivate)</a></li>

<li class="tocentry"><a href="#iselectable-with-navigationsource">ISelectable with NavigationSource</a></li>

<li class="tocentry"><a href="#listcollectionviewex">ListCollectionViewEx</a></li>

<li class="tocentry"><a href="#pagedsource">PagedSource</a></li>

<li class="tocentry"><a href="#predicatebuilder-and-filters">PredicateBuilder and filters</a></li>

<li class="tocentry"><a href="#iisselected-iselectable-and-selectionsyncbehavior">IIsSelected, ISelectable and SelectionSyncBehavior</a></li>

<li class="tocentry"><a href="#animatingcontentcontrol">AnimatingContentControl</a></li>

<li class="tocentry"><a href="#transitioningcontentcontrol">TransitioningContentControl</a></li>

<li class="tocentry"><a href="#transitioningitemscontrol">TransitioningItemsControl</a></li>

<li class="tocentry"><a href="#triggers-and-triggeractions">Triggers and TriggerActions</a></li>

<li class="tocentry"><a href="#behaviors">Behaviors</a></li>

<li class="tocentry"><a href="#bindingproxy">BindingProxy</a></li>

<li class="tocentry"><a href="#modules">Modules</a></li>

</ul>
<li class="tocentry"><a href="Navigation_Uwp.htm">MvvmLib.Windows</a>
</li>
<li class="tocentry"><a href="Navigation_XF.htm">MvvmLib.XF</a>
</li>
<li class="tocentry"><a href="Adaptive.htm">MvvmLib.Adaptive.Wpf</a>
</li>
<li class="tocentry"><a href="Adaptive_Uwp.htm">MvvmLib.Adaptive.Windows</a>
</li>
<li class="tocentry"><a href="LICENSE.htm">LICENSE</a>
</li>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="index.htm">MvvmLib Documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="index.htm">Home</a></li> / <li><a href="Navigation.htm">MvvmLib.Wpf</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h2 id="mvvmlib.wpf-navigation-net-4.5">MvvmLib.Wpf (Navigation) [net 4.5]<a class="headerlink" href="#mvvmlib.wpf-navigation-net-4.5" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<ul>
<li><strong>BootstrapperBase</strong>: allows to manage the startup of the application. Configure an IoC Container, the view and ViewModel factories, register dependencies, preload data, create the Shell ViewModel and the Shell.</li>
<li><strong>NavigationSource</strong>: Source for <strong>Views</strong> and <strong>ViewModels</strong>. It has an History, a collection of &quot;Sources&quot; (a source is a View or a ViewModel), a <strong>Current</strong> source that can be binded to the content of the <strong>ContentControls</strong>. There is two other NavigationSource Types: <strong>KeyedNavigationSource</strong> (a navigation source with a key) and <strong>ContentControlNavigationSource</strong> that updates directly the content of the ContentControl provided. The <strong>SourceName Attached Property</strong> of the NavigationManager allows to attach in Xaml a ContentControl to a ContentControlNavigationSource. The NavigationManager has a collection of NavigationSources stored with <strong>NavigationSourceContainers</strong>. It allows to <strong>navigate simultaneously</strong> for all NavigationSources registered for a SourceName and/or open new Shells.</li>
<li><strong>SharedSource</strong>: Source for <strong>Models</strong> and <strong>ViewModels</strong> with a collection of Items and SelectedItem/SelectedIndex. It supports Views but its not the target. This is the source for ItemsControls, Selectors (ListBox, TabControl), etc.</li>
<li><strong>ListCollectionViewEx</strong>: allows to browse, filter, sort, group, add, edit with lists and collections.</li>
<li><strong>PagedSource</strong>: paging for DataGrid, etc.</li>
<li><strong>Command providers</strong>: NavigationSourceCommands, NavigationSourceContainerCommands, SharedSourceCommands, ListCollectionViewCommands, PagedSourceCommands</li>
<li><strong>ViewModelLocator</strong>: is used by <strong>NavigationSources</strong> and <strong>SharedSources</strong> (With CreateNew) to resolve the ViewModels for the Views. The default factory can be overridden and use an IoC Container to resolve dependencies. The <strong>ResolveViewModel</strong> attached property can be used on UserControls and Windows not used by the navigation to resolve the ViewModel and inject dependencies.</li>
<li><strong>SourceResolver</strong> is the factory for the views (FrameworkElements). It has to always create a new instance (and not use singletons) to avoid binding troubles.</li>
<li><strong>NavigationManager</strong>: allows to manage NavigationSources and SharedSources</li>
<li><strong>INavigationAware</strong>: allows <em>view models</em> to be notified on navigate</li>
<li><strong>ICanActivate</strong>, <strong>ICanDeactivate</strong>: allow to cancel navigation</li>
<li><strong>IIsSelected</strong>, <strong>ISelectable</strong>, <strong>SelectionSyncBehavior</strong>: allow to select a view </li>
<li><strong>IIsLoaded</strong>: allows to notify view model that the view is loaded for a view that use resolve view model attached property.</li>
<li><strong>AnimatingContentControl</strong>, <strong>TransitioningContentControl</strong>, <strong>TransitioningItemsControl</strong>: allow to animate content</li>
<li><strong>Triggers</strong>, <strong>TriggerActions</strong> and <strong>Behaviors</strong>: <strong>EventTrigger</strong>, <strong>DataTrigger</strong>, <strong>CallMethodeAction</strong>, <strong>SelectionSyncBehavior</strong>, <strong>EventToCommandBehavior<strong>,</strong>EventToMethodBehavior</strong>, etc.</li>
<li><strong>PropertyFilter</strong> and <strong>CompositeFilter</strong>: allow to generate predicates.</li>
<li><strong>ModuleManager</strong>: allows to manage modules/assemblies loaded &quot;on demand&quot;</li>
</ul>
<p><em>Usage:</em></p>
<ul>
<li>Content control that requires only navigation: <strong>NavigationSource</strong></li>
<li>Items control that does not require filtering or sorting (TabControl for example): SharedSource or ObservableCollection + SelectedItem + NavigationHelper</li>
<li>Items control/ custom control/ etc. that require <strong>filtering, sorting, edition</strong>, ...: <strong>ListCollectionView</strong> or <strong>ListCollectionViewEx</strong></li>
<li>Items control/ custom control/ etc. that require <strong>paging</strong> (DataGrid for example): <strong>PagedSource</strong></li>
</ul>
<p><em>Command Providers:</em></p>
<ul>
<li>For NavigationSource: NavigationSourceCommands</li>
<li>For NavigationSourceContainer: NavigationSourceContainerCommands</li>
<li>For ListCollectionView: ListCollectionViewCommands</li>
<li>For PagedSource: PagedSourceCommands</li>
<li>For SharedSource: SharedSourceCommands</li>
</ul>
<h2 id="create-a-bootstrapper">Create a Bootstrapper<a class="headerlink" href="#create-a-bootstrapper" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Create a new Wpf application. Remove the MainWindow. Create a &quot;Views&quot; directory and a Window named &quot;Shell&quot;.</p>
<p>Install the packages:</p>
<ul>
<li><strong>MvvmLib.Wpf</strong> (<strong>MvvmLib.Core</strong> dependency is automatically installed)</li>
<li><strong>MvvmLib.IoC</strong> or another IoC container (Unity, Autofac, etc.)</li>
</ul>
<p>Create a Bootstrapper Base Class</p>
<p>With <strong>MvvmLib.IoC</strong></p>
<pre><code class="cs">using MvvmLib.IoC;
using MvvmLib.Message;
using MvvmLib.Navigation;

namespace NavigationSample.Wpf.Startup
{
    public abstract class MvvmLibBootstrapper : BootstrapperBase
    {
        protected IInjector container;

        public MvvmLibBootstrapper(IInjector container)
        {
            if (container == null)
                throw new System.ArgumentNullException(nameof(container));

            this.container = container;
        }

        protected override void RegisterRequiredTypes()
        {
            container.RegisterInstance&lt;IInjector&gt;(container);
            container.RegisterSingleton&lt;IEventAggregator, EventAggregator&gt;();
        }

        protected override void SetViewFactory()
        {
            SourceResolver.SetFactory((sourceType) =&gt; container.GetNewInstance(sourceType));
        }

        protected override void SetViewModelFactory()
        {
            ViewModelLocationProvider.SetViewModelFactory((viewModelType) =&gt; container.GetInstance(viewModelType));
        }
    }
}
</code></pre>

<p>Create the Bootstrapper</p>
<pre><code class="cs">public class Bootstrapper : MvvmLibBootstrapper
{
    public Bootstrapper(IInjector container)
        : base(container)
    { }

    protected override void RegisterTypes()
    {
        container.RegisterSingleton&lt;IFakePeopleService, FakePeopleService&gt;();
    }

    protected override void PreloadApplicationData()
    {
        NavigationManager.CreateDefaultNavigationSource(&quot;Main&quot;);
        NavigationManager.CreateDefaultNavigationSource(&quot;MasterDetails&quot;);

        NavigationManager.CreateSharedSource&lt;MenuItem&gt;();
        NavigationManager.CreateSharedSource&lt;IDetailViewModel&gt;();
        NavigationManager.CreateSharedSource&lt;Person&gt;(&quot;MasterDetails&quot;);
    }

    // its possible to define the ShellViewModel
    //protected override object CreateShellViewModel()
    //{
    //    return container.GetInstance&lt;ShellViewModel&gt;();
    //}

    protected override Window CreateShell()
    {
        return container.GetInstance&lt;Shell&gt;();
    }
}
</code></pre>

<p>App.Xaml: Remove &quot;StartupUri=&quot;MainWindow.xaml&quot; and add a startup event (Startup=&quot;Application_Startup&quot;)</p>
<pre><code class="cs">public partial class App : Application
{
    private void Application_Startup(object sender, StartupEventArgs e)
    {
        var bootstrapper = new Bootstrapper(new Injector());
        bootstrapper.Run();
    }
}
</code></pre>

<h2 id="navigationsource-keyednavigationsource-and-contentcontrolnavigationsource">NavigationSource, KeyedNavigationSource and ContentControlNavigationSource<a class="headerlink" href="#navigationsource-keyednavigationsource-and-contentcontrolnavigationsource" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>The NavigationSource is not linked to the UI. So its possible to create all the navigation sources required by the application at Startup.</p>
<p>The method CreateNavigationSource creates a container (for navigation sources with source name provided) and a first Navigation Source (returned by the function). The first naigation source created is a KeyedNavigationSource with the default key.</p>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Method</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>Navigate</td>
	<td>Navigates to the source (a source is a view or ViewModel) type or source name (for a type registered with SourceResolver.RegisterTypeForNavigation)</td>
</tr>
<tr>
	<td>NavigateFast</td>
	<td>Useful for navigation cancellation and not recheck guards</td>
</tr>
<tr>
	<td>Redirect</td>
	<td>Redirects and removes the previous entry from the history</td>
</tr>
<tr>
	<td>MoveToFirst</td>
	<td>Navigates to the first source and clears the history</td>
</tr>
<tr>
	<td>MoveToPrevious</td>
	<td>Navigates to the previous source</td>
</tr>
<tr>
	<td>MoveToNext</td>
	<td>Navigates to the next source</td>
</tr>
<tr>
	<td>MoveToLast</td>
	<td>Move to the last or the source</td>
</tr>
<tr>
	<td>MoveTo</td>
	<td>Move to the index or the (existing) source</td>
</tr>
<tr>
	<td>SuspendNotifications</td>
	<td>Suspends notification on current changed</td>
</tr>
<tr>
	<td>ResumeNotifications</td>
	<td>Resumes notification on current changed</td>
</tr>
<tr>
	<td>Sync</td>
	<td>Synchronizes the history and sources with the navigation source provided</td>
</tr>
</tbody>
</table>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Property</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>Sources</td>
	<td>The collection of sources</td>
</tr>
<tr>
	<td>Current</td>
	<td>The current source. Can be binded to Content property of ContentControls</td>
</tr>
<tr>
	<td>CurrentIndex</td>
	<td>The index of the current source</td>
</tr>
<tr>
	<td>Entries</td>
	<td>The navigation history entries</td>
</tr>
<tr>
	<td>CanMoveToPrevious</td>
	<td>Checks if can go back</td>
</tr>
<tr>
	<td>CanMoveToNext</td>
	<td>Checks if can go forward</td>
</tr>
<tr>
	<td>ClearSourcesOnNavigate</td>
	<td>By default the sources (&quot;forward stack&quot;) are removed on navigate and navigate to root</td>
</tr>
</tbody>
</table>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Events</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>PropertyChanged</td>
	<td>Invoked on property changed (Current, CurrentIndex, etc.)</td>
</tr>
<tr>
	<td>CollectionChanged</td>
	<td>Invoked on collection changed (Sources)</td>
</tr>
<tr>
	<td>CurrentChanged</td>
	<td>Invoked on Current changed</td>
</tr>
<tr>
	<td>CanMoveToPreviousChanged</td>
	<td>Invoked on CanMoveToPrevious changed</td>
</tr>
<tr>
	<td>CanMoveToNextChanged</td>
	<td>Invoked on CanMoveToNext changed</td>
</tr>
<tr>
	<td>Navigating</td>
	<td>Invoked before navigation starts</td>
</tr>
<tr>
	<td>Navigated</td>
	<td>Invoked after navigation ends</td>
</tr>
<tr>
	<td>NavigationFailed</td>
	<td>Invoked on navigation cancelled</td>
</tr>
</tbody>
</table>
<p>Commands: Use NavigationSourceCommands</p>
<ul>
<li>NavigateCommand with source type</li>
<li>MoveToFirstCommand</li>
<li>MoveToPreviousCommand</li>
<li>MoveToNextCommand</li>
<li>MoveToIndexCommand and MoveToCommand</li>
</ul>
<p>Create the default navigation source.</p>
<pre><code class="cs">this.Navigation = NavigationManager.CreateDefaultNavigationSource(&quot;Main&quot;);
</code></pre>

<p>Get the default navigation source</p>
<pre><code class="cs">this.Navigation = NavigationManager.GetDefaultNavigationSource(&quot;Main&quot;);
</code></pre>

<p>Or ...</p>
<pre><code class="cs">this.Navigation = NavigationManager.GetOrCreateDefaultNavigationSource(&quot;Main&quot;);
</code></pre>

<pre><code class="cs">this.Navigation = new NavigationSource();
</code></pre>

<p>Navigation</p>
<pre><code class="cs">var  navigation = NavigationManager.CreateDefaultNavigationSource(&quot;Main&quot;);

navigation.Navigate(typeof(ViewA));

// with parameter
navigation.Navigate(typeof(ViewA), &quot;My parameter&quot;);

// MoveToPrevious
navigation.MoveToPrevious();

// MoveToNext
navigation.MoveToNext();

// Navigate to root (&quot;forward stack&quot; cleared)
navigation.MoveToFirst();
</code></pre>

<p>Add navigation sources for the same source name:</p>
<pre><code class="cs">NavigationManager.AddNavigationSource(&quot;Main&quot;, new KeyedNavigationSource(&quot;MyKeyA&quot;));
NavigationManager.AddNavigationSource(&quot;Main&quot;, new KeyedNavigationSource(&quot;MyKeyB&quot;));
</code></pre>

<p>Navigate simultaneously with all sources of a container</p>
<pre><code class="cs">var navigationSources = NavigationManager.GetNavigationSources(&quot;Main&quot;);
navigationSources.Navigate(typeof(ViewA), &quot;My parameter&quot;);
</code></pre>

<p>NavigationSourceCommands provides commands for NavigationSource
NavigationSourceContainerCommands provide commands for NavigationSourceContainer</p>
<ul>
<li>NavigateCommand with source type</li>
<li>MoveToFirstCommand</li>
<li>MoveToPreviousCommand</li>
<li>MoveToNextCommand</li>
<li>RedirectCommand</li>
<li>MoveToIndexCommand and MoveToCommand</li>
</ul>
<p>Bind the NavigationSource <strong>Current</strong> property to a <strong>ContentControl</strong></p>
<pre><code class="cs">this.Commands = new NavigationSourceContainerCommands(navigation);
</code></pre>

<pre><code class="xml">&lt;ContentControl Content=&quot;{Binding Navigation.Current}&quot; /&gt;
</code></pre>

<p>NavigationSourceCommands provides some quick Commands</p>
<pre><code class="cs">this.Commands = new NavigationSourceCommands(navigation);
</code></pre>

<pre><code class="xml">&lt;!--Navigate command --&gt;
&lt;Button Content=&quot;View A&quot; Command=&quot;{Binding Commands.NavigateCommand}&quot; CommandParameter=&quot;{x:Type views:ViewA}&quot; /&gt;

&lt;!--MoveToPrevious command --&gt;
&lt;Button Content=&quot;Go Back&quot; Command=&quot;{Binding Commands.MoveToPreviousCommand}&quot; /&gt;

&lt;!--MoveToNext command --&gt;
&lt;Button Content=&quot;Go Forward&quot; Command=&quot;{Binding Commands.MoveToNextCommand}&quot; /&gt;

&lt;!--MoveToFirst command --&gt;
&lt;Button Content=&quot;Root&quot; Command=&quot;{Binding Commands.MoveToFirstCommand}&quot; /&gt;
</code></pre>

<p>Sources management</p>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Methods</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>InsertNewSource</td>
	<td>Creates the source with SourceResolver, inject dependencies and inserts the source at the index. The parameter is stored</td>
</tr>
<tr>
	<td>AddNewSource</td>
	<td>Creates the source with SourceResolver, inject dependencies and adds the source. The parameter is stored</td>
</tr>
<tr>
	<td>RemoveSourceAt</td>
	<td>Removes the source at the index</td>
</tr>
<tr>
	<td>RemoveSource</td>
	<td>Removes the source</td>
</tr>
<tr>
	<td>RemoveSources</td>
	<td>Removes the sources from the start index to the end (remove range)</td>
</tr>
<tr>
	<td>ClearSources</td>
	<td>Clears the source collection</td>
</tr>
</tbody>
</table>
<p>Example: insert and move to a source</p>
<pre><code class="cs">var source = Navigation.InsertNewSource(0, typeof(ViewA), &quot;View A Inserted at index 0&quot;);
Navigation.MoveTo(source);
// or by index
Navigation.MoveTo(0);
</code></pre>

<p>Navigation processes</p>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Process</th>
	<th>Methods</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>&quot;Navigate&quot;</td>
	<td>Navigate, NavigateFast, Redirect</td>
	<td>Find the <strong>selectable</strong> (ISelectable) or create a <strong>new</strong> instance, <strong>INavigationAware</strong> methods invoked (OnNavigatingTo and OnNavigatedTo only for new instance)</td>
</tr>
<tr>
	<td>&quot;Move&quot;</td>
	<td>MoveTo, MoveToPrevious, MoveToNext, MoveToFirst, MoveToLast</td>
	<td>Only <strong>INavigationAware</strong> methods invoked</td>
</tr>
</tbody>
</table>
<h3 id="contentcontrolnavigationsource">ContentControlNavigationSource<a class="headerlink" href="#contentcontrolnavigationsource" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Inherits from NavigationSource and updates directly the content of the ContentControl.</p>
<pre><code class="xml">&lt;ContentControl mvvmLib:NavigationManager.SourceName=&quot;Main&quot; /&gt;
</code></pre>

<p>Registering navigation sources for the same source name :</p>
<pre><code class="xml">&lt;ContentControl mvvmLib:NavigationManager.SourceName=&quot;Main&quot; /&gt;
&lt;ContentControl mvvmLib:NavigationManager.SourceName=&quot;Main&quot; /&gt;
&lt;ContentControl mvvmLib:NavigationManager.SourceName=&quot;Main&quot; /&gt;
</code></pre>

<p>The namespace:</p>
<pre><code class="xml">&lt;UserControl ...
            xmlns:mvvmLib=&quot;http://mvvmlib.com/&quot;&gt;
</code></pre>

<h2 id="sharedsource-for-itemscontrol-listbox-tabcontrol-etc.">SharedSource for ItemsControl, ListBox, TabControl, etc.<a class="headerlink" href="#sharedsource-for-itemscontrol-listbox-tabcontrol-etc." title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Provides an Items collection that implements INotifyCollectionChanged, a SelectedItem and more to quickly bind sources... add, remove, replace, move items, select an item by SelectedIndex or SelectedItem, etc. INotifyCollectionChanged and INotifyPropertyChanged do the work for the UI.</p>
<p>Methods</p>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Method</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>Load</td>
	<td>Allows to initialize the SharedSource with a collection and parameters</td>
</tr>
<tr>
	<td>CreateNew</td>
	<td>Returns an item instance created with the SourceResolver</td>
</tr>
<tr>
	<td>InsertNew</td>
	<td>Creates a new instance with the SourceResolver an inserts the item created at index. A parameter can be provided for navigation</td>
</tr>
<tr>
	<td>AddNew</td>
	<td>Creates a new instance with the SourceResolver an inserts the item created at index. A parameter can be provided for navigation</td>
</tr>
<tr>
	<td>Insert</td>
	<td>Allows to insert item at index. ICanDeactive, ICanActivate and INavigationAware are invoked for items that implement these interfaces</td>
</tr>
<tr>
	<td>Add</td>
	<td>Adds and item. ICanDeactive, ICanActivate and INavigationAware are invoked for items that implement these interfaces</td>
</tr>
<tr>
	<td>Move</td>
	<td>Moves the item from the old index to the new index. Navigation guards and INavigationAware are not invoked</td>
</tr>
<tr>
	<td>Replace</td>
	<td>Replaces the old item at thhe index by the new item</td>
</tr>
<tr>
	<td>RemoveAt</td>
	<td>Removes the item at the index. ICanDeactive is checked for the item and OnNavigatingFrom is invoked for item that implement INavigationAware</td>
</tr>
<tr>
	<td>Remove</td>
	<td>Removes the item. ICanDeactive is checked for the item and OnNavigatingFrom is invoked for item that implement INavigationAware</td>
</tr>
<tr>
	<td>Clear</td>
	<td>Removes all items. ICanDeactive and INavigationAware OnNavigatingFrom methods are invoked for each item before deletion</td>
</tr>
<tr>
	<td>ClearFast</td>
	<td>Removes all items. ICanDeactive and INavigationAware methods are not invoked</td>
</tr>
<tr>
	<td>Sync</td>
	<td>Synchronizes the SharedSource with the SharedSource provided</td>
</tr>
</tbody>
</table>
<p>Properties</p>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Property</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>SelectedItem</td>
	<td>The selected item. Allows to bind quickly for Selectors (ListBox, TabControl, etc.)</td>
</tr>
<tr>
	<td>SelectedIndex</td>
	<td>The index of selected item</td>
</tr>
<tr>
	<td>SelectionHandling</td>
	<td>Allows to select automatically items after insertion, etc. (SelectedItem)</td>
</tr>
</tbody>
</table>
<p>Events</p>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Event</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>PropertyChanged</td>
	<td>Invoked on property changed (count, indexer)</td>
</tr>
<tr>
	<td>SelectedItemChanged</td>
	<td>Invoked on selected item changed</td>
</tr>
<tr>
	<td>CanMoveToPreviousChanged</td>
	<td>Invoked on CanMoveToPrevious changed</td>
</tr>
<tr>
	<td>CanMoveToNextChanged</td>
	<td>Invoked on CanMoveToNext changed</td>
</tr>
</tbody>
</table>
<p>Commands: Use SharedSourceCommands</p>
<ul>
<li>MoveToFirstCommand</li>
<li>MoveToPreviousCommand</li>
<li>MoveToNextCommand</li>
<li>MoveToIndexCommand and MoveToCommand</li>
</ul>
<h3 id="creating-sharedsources">Creating SharedSources<a class="headerlink" href="#creating-sharedsources" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre><code class="cs">var s = NavigationManager.CreateSharedSource&lt;MySharedItem&gt;();
</code></pre>

<p>... or locally</p>
<pre><code class="cs">var s = new SharedSource&lt;MySharedItem&gt;();
</code></pre>

<p>Get a SharedSource already created</p>
<pre><code class="cs">var s = NavigationManager.GetSharedSource&lt;MySharedItem&gt;();
</code></pre>

<p>Or use GetOrCreateSharedSource method</p>
<pre><code class="cs">var s = NavigationManager.GetOrCreateSharedSource&lt;MySharedItem&gt;();
</code></pre>

<p>Creating SharedSources with keys. Allows to use the same type for multiple SharedSource.</p>
<pre><code class="cs">var s1 = NavigationManager.CreateSharedSource&lt;MySharedItem&gt;(&quot;key1&quot;);
var s2 = NavigationManager.CreateSharedSource&lt;MySharedItem&gt;(&quot;key2&quot;);
</code></pre>

<p>GetSharedSource, GetOrCreateSharedSource, etc. methods are available with keys.</p>
<p>Remove a SharedSource</p>
<pre><code class="cs">NavigationManager.RemoveSharedSource&lt;MySharedItem&gt;();
NavigationManager.RemoveSharedSource&lt;MySharedItem&gt;(&quot;key1&quot;);
</code></pre>

<p>Always get a new SharedSource for the type</p>
<pre><code class="cs">var s = NavigationManager.GetNewSharedSource&lt;MySharedItem&gt;();
</code></pre>

<h3 id="add-items-to-a-shared-source">Add items to a Shared source<a class="headerlink" href="#add-items-to-a-shared-source" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Load</p>
<pre><code class="cs">DetailsSource.Load(new List&lt;MyItemDetailsViewModel&gt;
{
    new MyItemDetailsViewModel(new MyItem { Name = &quot;Item.1&quot; }),
    new MyItemDetailsViewModel(new MyItem { Name = &quot;Item.2&quot; })
});
</code></pre>

<p>Or with parameters</p>
<pre><code class="cs">DetailsSource.Load(new InitItemCollection&lt;MyItemDetailsViewModel&gt;
{
    { new MyItemDetailsViewModel(new MyItem { Name = &quot;Item.1&quot; }), &quot;Parameter 1&quot; },
    { new MyItemDetailsViewModel(new MyItem { Name = &quot;Item.2&quot; }), &quot;Parameter 2&quot; }
});
</code></pre>

<p>Adding items</p>
<pre><code class="cs">var s = NavigationManager.GetSharedSource&lt;MyViewModel&gt;();
s.Add(1, new MyViewModel(), &quot;My parameter to pass to view model&quot;);
s.Insert(1, new MyViewModel(), &quot;My parameter to pass to view model&quot;);
</code></pre>

<p>Or with short cuts</p>
<pre><code class="cs">var s = NavigationManager.GetSharedSource&lt;MyViewModel&gt;();
s.AddNew(&quot;My parameter to pass to view model&quot;);
s.InsertNew(1, &quot;My parameter to pass to view model&quot;);
</code></pre>

<p>Remove</p>
<pre><code class="cs">var s = NavigationManager.GetSharedSource&lt;MyViewModel&gt;();
s.RemoveAt(1);

var vieModel = new MyViewModel();
s.Remove(viewModel);
</code></pre>

<p>Clear</p>
<pre><code class="cs">s.Clear();

s.ClearFast(); // without invoking ICanDeactivate and OnNavigatingFrom
</code></pre>

<p>Move</p>
<pre><code class="cs">s.Move(1, 2); // moves the item at index 1 to index 2
</code></pre>

<p>Replace Item</p>
<pre><code class="cs">var newItem = new MyViewModel();
NavigationHelper.Replace(1, newItem);
</code></pre>

<h3 id="select-an-item">Select an item<a class="headerlink" href="#select-an-item" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre><code class="cs">s.SelectedIndex = 1;

// or
var item = s.Items[1];
s.SelectedItem = item;
</code></pre>

<p>Note: The selected item is automatically set on insertion, deletion, etc. with <strong>SelectionHandling</strong> &quot;Select&quot; (default). Set the SelectionHandling to <em>None</em> to remove this behavior.</p>
<pre><code class="cs">s.SelectionHandling = SelectionHandling.None;
s.SelectionHandling = SelectionHandling.Select;
</code></pre>

<p>ViewModel Sample</p>
<pre><code class="cs">public class ViewAViewModel: INavigationAware
{
    public SharedSource&lt;MyItemDetailsViewModel&gt; DetailsSource { get; }

    public SharedSourceSampleViewModel()
    {
        DetailsSource = NavigationManager.GetOrCreateSharedSource&lt;MyItemDetailsViewModel&gt;();
    }

    public void Load()
    {   
        // load data
        DetailsSource.Load(new List&lt;MyItemDetailsViewModel&gt;
        {
            new MyItemDetailsViewModel(new MyItem { Name = &quot;Item.1&quot; }),
            new MyItemDetailsViewModel(new MyItem { Name = &quot;Item.2&quot; })
        });
    }

    public void OnNavigatingFrom(NavigationContext navigationContext)
    {

    }

    public void OnNavigatingTo(NavigationContext navigationContext)
    {
        Load();
    }

    public void OnNavigatedTo(NavigationContext navigationContext)
    {

    }
}
</code></pre>

<p>Bind the source to controls:</p>
<p>ItemsControl</p>
<pre><code class="xml">&lt;ItemsControl ItemsSource=&quot;{Binding DetailsSource.Items}&quot; /&gt;
</code></pre>

<p>Selector (ListBox, TabControl, etc.) :</p>
<pre><code class="xml">&lt;ListView ItemsSource=&quot;{Binding DetailsSource.Items}&quot; SelectedItem=&quot;{Binding DetailsSource.SelectedItem}&quot; /&gt;
</code></pre>

<pre><code class="xml">&lt;TabControl ItemsSource=&quot;{Binding DetailsSource.Items}&quot;  
            SelectedItem=&quot;{Binding DetailsSource.SelectedItem}&quot;&gt;
    &lt;TabControl.ItemTemplate&gt;
        &lt;DataTemplate&gt;
            &lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;
                &lt;TextBlock Text=&quot;{Binding Item.Name}&quot; Margin=&quot;20,0&quot;/&gt;
                &lt;Button Content=&quot;X&quot; 
                        Command=&quot;{Binding CloseCommand}&quot; 
                        HorizontalAlignment=&quot;Right&quot; Height=&quot;20&quot; Width=&quot;20&quot; 
                        VerticalAlignment=&quot;Top&quot; /&gt;
            &lt;/StackPanel&gt;
        &lt;/DataTemplate&gt;
    &lt;/TabControl.ItemTemplate&gt;
&lt;/TabControl&gt;
</code></pre>

<p><strong>Tip</strong>: Use an interface (IDetailViewModel for example) for TabControls that can display multiple views.</p>
<pre><code class="cs">public interface IDetailsViewModel
{
    string Title { get; set; }
}

public abstract class DetailsViewModelBase : BindableBase, IDetailsViewModel
{
    protected string title;
    public string Title
    {
        get { return title; }
        set { SetProperty(ref title, value); }
    }

    public SharedSource&lt;IDetailsViewModel&gt; DetailsSource { get; }

    public DetailsViewModelBase()
    {
        DetailsSource = SharedSourceManager.GetOrCreate&lt;IDetailsViewModel&gt;();
    }
}

public class ViewAViewModel : DetailsViewModelBase, ICanDeactivate
{
    // ...
}
public class ViewBViewModel : DetailsViewModelBase
{
    // ...
}
</code></pre>

<h2 id="viewmodellocator">ViewModelLocator<a class="headerlink" href="#viewmodellocator" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Allows to resolve ViewModels for Views with <strong>ResolveViewModel</strong>. </p>
</blockquote>
<p>Default <strong>convention</strong>:</p>
<ul>
<li>Views in <code>Views</code> namespace</li>
<li>View models in <code>ViewModels</code> namespace</li>
<li>
View model name: 
<ul>
<li><em>view name + &quot;ViewModel&quot;</em> (example: ShellViewModel for Shell)</li>
<li>Or if the view name ends by &quot;View&quot;: <em>view name + &quot;Model&quot;</em> (example: NavigationViewModel for NavigationView)</li>
</ul>
</li>
</ul>
<h3 id="change-the-convention">Change the convention<a class="headerlink" href="#change-the-convention" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Example with &quot;View&quot; and &quot;ViewModel&quot; namespaces</p>
<pre><code class="cs">ViewModelLocationProvider.ChangeConvention((viewType) =&gt;
{
  var viewFullName = viewType.FullName;
  viewFullName = viewFullName.Replace(&quot;.View.&quot;, &quot;.ViewModel.&quot;); // &lt;= 
  var suffix = viewFullName.EndsWith(&quot;View&quot;) ? &quot;Model&quot; : &quot;ViewModel&quot;;
  var viewModelFullName = string.Format(CultureInfo.InvariantCulture, &quot;{0}{1}&quot;, viewFullName, suffix);
  var viewModelType = viewType.Assembly.GetType(viewModelFullName);

  return viewModelType;
});
</code></pre>

<h3 id="register-a-custom-view-model-for-a-view">Register a custom View Model for a view<a class="headerlink" href="#register-a-custom-view-model-for-a-view" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>For example: the view model for a ViewA is not ViewAViewModel but MyCustomViewAViewModel</p>
<pre><code class="cs">ViewModelLocationProvider.RegisterCustom(typeof(ViewA), typeof(MyCustomViewAViewModel));
</code></pre>

<h3 id="resolveviewmodel-attached-property-window-usercontrol">ResolveViewModel Attached property (Window, UserControl)<a class="headerlink" href="#resolveviewmodel-attached-property-window-usercontrol" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Allows to resolve the ViewModel (and inject dependencies) for the View. Usefull only for Views not used by the Navigation.</p>
<p>Example:</p>
<pre><code class="xml">&lt;Window x:Class=&quot;Sample.Views.Shell&quot;
        ...
         xmlns:nav=&quot;http://mvvmlib.com/&quot;
         nav:ViewModelLocator.ResolveViewModel=&quot;True&quot;&gt;
</code></pre>

<p><strong>Note</strong>: NavigationSources and Shared Sources resolve automatically the ViewModel with the ViewModelLocator. So, using &quot;ResolveViewModel&quot; attached property is rarely required.</p>
<p><strong>IIsLoaded</strong> allows to notify view model that the view is loaded for a view that use resolve view model attached property or defined in Bootstrapper.</p>
<pre><code class="cs">public class AuthorsViewModel : IIsLoaded
{
    private readonly IAuthorLookupService authorLookupService;

    public ObservableCollection&lt;LookupItem&gt; Authors { get; set; }

    public AuthorsViewModel(IAuthorLookupService authorLookupService)
    {
        this.authorLookupService = authorLookupService;
    }

    public async void LoadAsync()
    {
        var authors = await this.authorLookupService.GetAuthorLookupAsync();
        this.Authors = new ObservableCollection&lt;LookupItem&gt;(authors);
    }

    public void OnLoaded()
    {
        LoadAsync();
    }
}
</code></pre>

<h2 id="inavigationaware">INavigationAware<a class="headerlink" href="#inavigationaware" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Allows to notify ViewModel with parameter</p>
</blockquote>
<ul>
<li><strong>OnNavigatingFrom</strong></li>
<li><strong>OnNavigatingTo</strong></li>
<li><strong>OnNavigatedTo</strong></li>
</ul>
<pre><code class="cs">public class ViewAViewModel : INavigationAware
{
    public void OnNavigatingFrom(NavigationContext navigationContext)
    {

    }

    public void OnNavigatingTo(NavigationContext navigationContext)
    {
       // Usefull to preload data 
    }

    public void OnNavigatedTo(NavigationContext navigationContext)
    {
        // gets the parameter
        var parameter = navigationContext.Parameter;
        // etc.
    }
}
</code></pre>

<p>The navigation context contains the navigation parameter. That allows to modify this parameter (on MoveToPrevious, MoveToNext, check activation, ect.). </p>
<pre><code class="cs">Navigation.Navigate(typeof(ViewA), &quot;My parameter&quot;);
</code></pre>

<p>Use a dictionary for multiple parameters.</p>
<pre><code class="cs">var navigationParameters = new Dictionary&lt;string, object&gt;
{
    { &quot;redirectTo&quot;,typeof(ViewE) },
    { &quot;parameter&quot;, navigationContext.Parameter }
};
Navigation.NavigateFast(typeof(LoginView), navigationParameters);
</code></pre>

<h2 id="navigation-guards-icanactivate-icandeactivate">Navigation Guards (ICanActivate, ICanDeactivate)<a class="headerlink" href="#navigation-guards-icanactivate-icandeactivate" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Useful when the user want to leave a page or close a tabitem for example.</p>
<pre><code class="cs">public class ViewAViewModel : ICanActivate, ICanDeactivate
{

    public Task&lt;bool&gt; CanActivate(NavigationContext navigationContext)
    {
        var canActivate = MessageBox.Show(&quot;Activate?&quot;, &quot;Confirmation&quot;, MessageBoxButton.OKCancel) == MessageBoxResult.OK;
        return Task.FromResult(canActivate);
    }

    public Task&lt;bool&gt; CanDeactivate(NavigationContext navigationContext)
    {
        var canDeactivate = MessageBox.Show(&quot;Deactivate?&quot;, &quot;Confirmation&quot;, MessageBoxButton.OKCancel) == MessageBoxResult.OK;
        return Task.FromResult(canDeactivate);
    }
}
</code></pre>

<p>Async example:</p>
<pre><code class="cs">public class ViewAViewModel : ICanActivate
{

    public async Task&lt;bool&gt; CanActivate(NavigationContext navigationContext)
    {
        var canActivate = MessageBox.Show(&quot;Activate?&quot;, &quot;Confirmation&quot;, MessageBoxButton.OKCancel) == MessageBoxResult.OK;

        await Task.Delay(2000).ConfigureAwait(false);

        return canActivate;
    }
}
</code></pre>

<h2 id="iselectable-with-navigationsource">ISelectable with NavigationSource<a class="headerlink" href="#iselectable-with-navigationsource" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Allows to use the &quot;same view&quot; multiple times. For example in a Master/ details scenario, the details view is used for displaying each user.</p>
<pre><code class="cs">public class PersonDetailsViewModel : BindableBase, ISelectable 
{
    private Person person;
    public Person Person
    {
        get { return person; }
        set { SetProperty(ref person, value); }
    }

    // etc.

    public bool IsTarget(Type viewType, object parameter)
    {
        if (parameter != null)
            return person.Id == (int)parameter;
        
        return false;
    }
}
</code></pre>

<h2 id="listcollectionviewex">ListCollectionViewEx<a class="headerlink" href="#listcollectionviewex" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Allows to browse, filter, sort, group, add, edit with lists and collections.</p>
</blockquote>
<pre><code class="cs">People = new  List&lt;Person&gt;
{
    new Person { Id = 1, FirstName = &quot;First1&quot;, LastName = &quot;Last1&quot; },
    new Person { Id = 2, FirstName = &quot;First2&quot;, LastName = &quot;Last2&quot; },
    new Person { Id = 3, FirstName = &quot;First3&quot;, LastName = &quot;Last3&quot;}
};

this.CollectionView = new ListCollectionViewEx(People);
this.Commands = new ListCollectionViewCommands(CollectionView);
</code></pre>

<p>Add buttons and bind commands</p>
<pre><code class="xml">&lt;!-- move --&gt;
&lt;Button Content=&quot;First&quot; Command=&quot;{Binding Commands.MoveCurrentToFirstCommand}&quot; /&gt;
&lt;Button Content=&quot;Previous&quot; Command=&quot;{Binding Commands.MoveCurrentToPreviousCommand}&quot; /&gt;
&lt;Button Content=&quot;Next&quot; Command=&quot;{Binding Commands.MoveCurrentToNextCommand}&quot; /&gt;
&lt;Button Content=&quot;Last&quot; Command=&quot;{Binding Commands.MoveCurrentToLastCommand}&quot; /&gt;
&lt;TextBox x:Name=&quot;RankTextBox&quot; Text=&quot;{Binding CollectionView.Rank, Mode=OneWay}&quot; Width=&quot;30&quot; TextAlignment=&quot;Center&quot; VerticalContentAlignment=&quot;Center&quot; Margin=&quot;2&quot;&gt;
    &lt;mvvmLib:Interaction.Behaviors&gt;
        &lt;mvvmLib:EventToCommandBehavior EventName=&quot;KeyUp&quot; 
                                        Command=&quot;{Binding Commands.MoveCurrentToRankCommand}&quot;
                                        CommandParameter=&quot;{Binding ElementName=RankTextBox, Path=Text}&quot;
                                        /&gt;
    &lt;/mvvmLib:Interaction.Behaviors&gt;
&lt;/TextBox&gt;
&lt;TextBlock Text=&quot;{Binding CollectionView.Count, StringFormat='of {0}'}&quot; VerticalAlignment=&quot;Center&quot; Margin=&quot;5,0&quot;/&gt;

&lt;!-- group --&gt;
&lt;Button Content=&quot;Group&quot; Command=&quot;{Binding Commands.ToggleGroupByCommand}&quot; CommandParameter=&quot;Type&quot; /&gt;

&lt;!-- sort --&gt;
&lt;Button Content=&quot;SORT (descending)&quot; Command=&quot;{Binding Commands.SortByDescendingCommand}&quot; CommandParameter=&quot;Name&quot; /&gt;

&lt;!-- Add edit delete --&gt;
&lt;Button Content=&quot;Add&quot; Command=&quot;{Binding Commands.AddNewCommand}&quot; /&gt;
&lt;Button Content=&quot;Edit&quot; Command=&quot;{Binding Commands.EditCommand}&quot; /&gt;
&lt;Button Content=&quot;Delete&quot; Command=&quot;{Binding Commands.DeleteCommand}&quot; /&gt;

&lt;!-- cancel new or edit --&gt;
&lt;Button Content=&quot;Cancel&quot; Command=&quot;{Binding Commands.CancelCommand}&quot; /&gt;
&lt;!-- commit new or commit edit --&gt;
&lt;Button Content=&quot;Save&quot; Command=&quot;{Binding Commands.SaveCommand}&quot; /&gt;
</code></pre>

<p>Filter</p>
<pre><code class="cs">this.CollectionView.FilterBy&lt;Person&gt;(p =&gt; p.Age &gt; age);
</code></pre>

<p>Reset filter</p>
<pre><code class="cs"> this.CollectionView.ClearFilter();
</code></pre>

<p>Sort</p>
<pre><code class="cs">this.CollectionView.SortBy(&quot;Age&quot;, true); // true to clear sort descriptions
</code></pre>

<p>Save</p>
<pre><code class="cs">try
{
    if (this.CollectionView.IsAddingNew)
    {
        var current = this.CollectionView.CurrentAddItem as Person;
        current.ValidateAll();
        if (!current.HasErrors)
        {
            // save to db ...

            CollectionView.CommitNew();

            eventAggregator.GetEvent&lt;NotificationMessageEvent&gt;().Publish($&quot;{current.FirstName} added!&quot;);
        }
    }
    else if (this.CollectionView.IsEditingItem)
    {
        var current = this.CollectionView.CurrentEditItem as Person;
        current.ValidateAll();
        if (!current.HasErrors)
        {

            // save to db ..

            CollectionView.CommitEdit();

            eventAggregator.GetEvent&lt;NotificationMessageEvent&gt;().Publish($&quot;{current.FirstName} saved!&quot;);
        }
    }
}
catch (Exception ex)
{
    MessageBox.Show($&quot;A problem occured:{ex.Message}&quot;);
}
</code></pre>

<p>Delete with confirmation</p>
<pre><code class="cs">var current = this.CollectionView.CurrentItem as Person;
string name = current.FirstName;
var result = MessageBox.Show($&quot;Delete {name}?&quot;, &quot;Confirmation&quot;, MessageBoxButton.OKCancel) == MessageBoxResult.OK;
if (result)
{
    try
    {
        // remove from db ...

        CollectionView.Remove(current);

        eventAggregator.GetEvent&lt;NotificationMessageEvent&gt;().Publish($&quot;{name} removed!&quot;);
    }
    catch (Exception ex)
    {
        MessageBox.Show($&quot;A problem occured:{ex.Message}&quot;);
    }
}
</code></pre>

<p>Add new item</p>
<pre><code class="cs">var user = new UserWrapper(new User { RoleId = 1 });
this.CollectionView.AddNewItem(user);
</code></pre>

<h2 id="pagedsource">PagedSource<a class="headerlink" href="#pagedsource" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>PagedSource is a Paged CollectionView that implements ICollectionView and IEditableCollectionViewAddNewItem. Grouping is not supported.</p>
</blockquote>
<h3 id="paging">Paging<a class="headerlink" href="#paging" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre><code class="cs">this.People = new ObservableCollection&lt;Person&gt;(peopleList);
this.PagedSource = new PagedSource(People, 10);
</code></pre>

<pre><code class="xml">&lt;DataGrid x:Name=&quot;DataGrid1&quot; ItemsSource=&quot;{Binding PagedSource}&quot; AutoGenerateColumns=&quot;False&quot; IsReadOnly=&quot;True&quot;&gt;
    &lt;DataGrid.Columns&gt;
        &lt;DataGridTextColumn Header=&quot;First Name&quot; Width=&quot;*&quot; Binding=&quot;{Binding FirstName}&quot; /&gt;
        &lt;DataGridTextColumn Header=&quot;Last Name&quot; Width=&quot;*&quot; Binding=&quot;{Binding LastName}&quot; /&gt;
        &lt;DataGridTextColumn Header=&quot;Age&quot; Width=&quot;*&quot; Binding=&quot;{Binding Age}&quot; /&gt;
    &lt;/DataGrid.Columns&gt;
    &lt;DataGrid.RowDetailsTemplate&gt;
        &lt;DataTemplate&gt;
            &lt;StackPanel Margin=&quot;20,10&quot;&gt;
                &lt;Border Height=&quot;160&quot; Margin=&quot;0,5&quot; BorderBrush=&quot;#eee&quot; BorderThickness=&quot;2&quot; HorizontalAlignment=&quot;Left&quot;&gt;
                    &lt;Image Source=&quot;{Binding ImagePath}&quot; /&gt;
                &lt;/Border&gt;
                &lt;TextBlock Text=&quot;FIRSTNAME&quot; Style=&quot;{StaticResource HeadingStyle}&quot;/&gt;
                &lt;TextBlock Text=&quot;{Binding FirstName}&quot; Margin=&quot;0 2 0 8&quot;/&gt;
                &lt;TextBlock Text=&quot;LASTNAME&quot; Style=&quot;{StaticResource HeadingStyle}&quot;/&gt;
                &lt;TextBlock Text=&quot;{Binding LastName}&quot; Foreground=&quot;Black&quot; Margin=&quot;0 2 0 8&quot;/&gt;
            &lt;/StackPanel&gt;
        &lt;/DataTemplate&gt;
    &lt;/DataGrid.RowDetailsTemplate&gt;
&lt;/DataGrid&gt;
</code></pre>

<p>Commands provided by <strong>PagedSourceCommands</strong></p>
<ul>
<li>MoveToFirstPageCommand</li>
<li>MoveToPreviousPageCommand</li>
<li>MoveToNextPageCommand</li>
<li>MoveToLastPageCommand</li>
<li>MoveToPageCommand with page index</li>
</ul>
<p>Methods</p>
<ul>
<li>MoveToFirstPage</li>
<li>MoveToPreviousPage</li>
<li>MoveToNextPage</li>
<li>MoveToLastPage</li>
<li>MoveToPage with page index</li>
<li>Refresh (to use only if source collection does not implement INotifyCollectionChanged)</li>
</ul>
<p>Properties</p>
<ul>
<li>CanMoveToPreviousPage</li>
<li>CanMoveToNextPage</li>
<li>ItemsCount</li>
<li>PageCount</li>
<li>PageSize</li>
<li>PageIndex</li>
<li>CurrentPage (PageIndex + 1)</li>
<li>Start</li>
<li>End</li>
<li>Items</li>
<li>Filter</li>
<li>CustomSorter</li>
</ul>
<p>Events</p>
<ul>
<li>PropertyChanged</li>
<li>Refreshed</li>
<li>PageChanging</li>
<li>PageChanged</li>
</ul>
<h3 id="move-current">Move current<a class="headerlink" href="#move-current" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Properties</p>
<ul>
<li>CurrentItem</li>
<li>CurrentPosition</li>
<li>Rank (position + 1)</li>
<li>CanMoveCurrentToPrevious</li>
<li>CanMoveCurrentToNext</li>
<li>etc.</li>
</ul>
<p>Commands provided by <strong>PagedSourceCommands</strong></p>
<ul>
<li>MoveCurrentToFirstCommand</li>
<li>MoveCurrentToPreviousCommand</li>
<li>MoveCurrentToNextCommand</li>
<li>MoveCurrentToLastCommand</li>
<li>MoveCurrentToCommand with position or item</li>
<li>MoveCurrentToRankCommand rank = position + 1</li>
</ul>
<p>Methods</p>
<ul>
<li>MoveCurrentToFirst</li>
<li>MoveCurrentToPrevious</li>
<li>MoveCurrentToNext</li>
<li>MoveCurrentToLast</li>
<li>MoveCurrentTo with position or item</li>
<li>DeferRefresh</li>
<li>etc.</li>
</ul>
<p>bind to current item</p>
<pre><code class="xml">&lt;ContentControl Content=&quot;{Binding PagedSource.CurrentItem, Mode=OneWay}&quot; 
                Visibility=&quot;{Binding PagedSource.CurrentItem, Converter={StaticResource NullToVisibilityConverter}}&quot;
                Grid.Column=&quot;1&quot; Grid.Row=&quot;1&quot;&gt;
    &lt;ContentControl.Style&gt;
        &lt;Style TargetType=&quot;ContentControl&quot;&gt;
            &lt;Setter Property=&quot;ContentTemplate&quot; Value=&quot;{StaticResource DetailsTemplate}&quot; /&gt;
            &lt;Style.Triggers&gt;
                &lt;DataTrigger Binding=&quot;{Binding PagedSource.IsAddingNew}&quot; Value=&quot;True&quot;&gt;
                    &lt;Setter Property=&quot;ContentTemplate&quot; Value=&quot;{StaticResource AddAndEditTemplate}&quot; /&gt;
                &lt;/DataTrigger&gt;
                &lt;DataTrigger Binding=&quot;{Binding PagedSource.IsEditingItem}&quot; Value=&quot;True&quot;&gt;
                    &lt;Setter Property=&quot;ContentTemplate&quot; Value=&quot;{StaticResource AddAndEditTemplate}&quot; /&gt;
                &lt;/DataTrigger&gt;
            &lt;/Style.Triggers&gt;
        &lt;/Style&gt;
    &lt;/ContentControl.Style&gt;
&lt;/ContentControl&gt;
</code></pre>

<h3 id="filter">Filter<a class="headerlink" href="#filter" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre><code class="cs">PagedSource.Filter = new Perdicate&lt;object&gt;(p =&gt; ((Person)p).Age &gt; 30);
// or
PagedSource.FilterBy&lt;Person&gt;(p =&gt; p.Age &gt; age);
   
// reset the list
PagedSource.Filter = null;
// or
PagedSource.ClearFilter();
</code></pre>

<h3 id="sort">Sort<a class="headerlink" href="#sort" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>With Sort descriptions</p>
<pre><code class="cs">PagedSource.SortDescriptions.Add(new SortDescription(&quot;Age&quot;, ListSortDirection.Ascending));
</code></pre>

<p>Multiple sort descriptions</p>
<pre><code class="cs">PagedSource.SortDescriptions.Add(new SortDescription(&quot;LastName&quot;, ListSortDirection.Ascending));
PagedSource.SortDescriptions.Add(new SortDescription(&quot;FirstName&quot;, ListSortDirection.Ascending));
</code></pre>

<p>Clear</p>
<pre><code class="cs">pagedSource.SortDescriptions.Clear();
</code></pre>

<p>With methods</p>
<pre><code class="cs">PagedSource.SortBy(&quot;Age&quot;, true); // clear sort descritpions if true
// or
PagedSource.SortByDescending(&quot;Age&quot;, true);
</code></pre>

<p>With commands</p>
<pre><code class="cs">this.Commands = new PagedSourceCommands(PagedSource);
</code></pre>

<pre><code class="cs"> &lt;Button Content=&quot;Sort by age&quot; Command=&quot;{Binding Commands.SortByCommand}&quot; CommandParameter=&quot;Age&quot; /&gt;
</code></pre>

<p>... or descending</p>
<pre><code class="cs"> &lt;Button Content=&quot;Sort by age&quot; Command=&quot;{Binding Commands.SortByDescendingCommand}&quot; CommandParameter=&quot;Age&quot; /&gt;
</code></pre>

<p>With custom sort (has priority)</p>
<pre><code class="cs">PagedSource.CustomSort = new PersonSorter();
</code></pre>

<pre><code class="cs">public class PersonSorter : IComparer
{
    public int Compare(object x, object y)
    {
        return ((Person)x).Age.CompareTo(((Person)y).Age);
    }
}
</code></pre>

<p>Clear</p>
<pre><code class="cs">PagedSource.CustomSort = null;
</code></pre>

<h3 id="edition">Edition<a class="headerlink" href="#edition" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Commands provided by <strong>PagedSourceCommands</strong></p>
<ul>
<li>AddNewCommand</li>
<li>EditCommand</li>
<li>DeleteCommand</li>
<li>SaveCommand</li>
<li>CancelCommand</li>
</ul>
<p>Methods</p>
<ul>
<li>CreateNew </li>
<li>AddNew</li>
<li>AddNewItem</li>
<li>EditItem</li>
<li>EditCurrentItem</li>
<li>CancelNew</li>
<li>CancelEdit</li>
<li>CommitNew</li>
<li>CommitEdit</li>
<li>Remove</li>
<li>RemoveAt</li>
</ul>
<p>Properties</p>
<ul>
<li>CanAddNew</li>
<li>IsAddingNew</li>
<li>CurrentAddItem</li>
<li>CanEditem</li>
<li>IsEditingItem</li>
<li>CurrentEditItem</li>
</ul>
<p>DeferRefresh: allows to defer refresh. Avoid multiple calls of CurrentChanged.</p>
<p>Example:</p>
<pre><code class="cs">var people = new ObservableCollection&lt;Person&gt;
{
    new Person { Name =&quot;Ben&quot;, Age = 20 },
    new Person { Name = &quot;Marie&quot;, Age = 30 },
    new Person { Name = &quot;Deborah&quot;, Age = 22 }
};

var collectionView = new PagedSource(people);
collectionView.CurrentChanged += (s,e) =&gt; { };
DataGrid1.ItemsSource = collectionView;

// current changed is called 3 times
collectionView.SortDescriptions.Add(new SortDescription(&quot;Name&quot;, ListSortDirection.Ascending));
collectionView.SortDescriptions.Clear();
collectionView.SortDescriptions.Add(new SortDescription(&quot;Age&quot;, ListSortDirection.Ascending));
</code></pre>

<p>With DeferRefresh</p>
<pre><code class="cs">// current changed is called one time
using (collectionView.DeferRefresh())
{
    collectionView.SortDescriptions.Add(new SortDescription(&quot;Name&quot;, ListSortDirection.Ascending));
    collectionView.SortDescriptions.Clear();
    collectionView.SortDescriptions.Add(new SortDescription(&quot;Age&quot;, ListSortDirection.Ascending));
}
</code></pre>

<h2 id="predicatebuilder-and-filters">PredicateBuilder and filters<a class="headerlink" href="#predicatebuilder-and-filters" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Predicate builder sample</p>
<pre><code class="cs">var builder = new PredicateBuilder();
// filter on FirstName starts with &quot;A&quot;
var expression = builder.CreatePredicateExpression&lt;Person&gt;(&quot;FirstName&quot;, PredicateOperator.StartsWith, &quot;A&quot;);
// or with culture and case sensitive
// var expression = builder.CreatePredicateExpression&lt;Person&gt;(&quot;FirstName&quot;, PredicateOperator.StartsWith, &quot;A&quot;, CultureInfo.GetCultureInfo(&quot;fr&quot;), isCaseSensitive:true);
var predicate = expression.Compile(); // Predicate&lt;Person&gt;
</code></pre>

<p>PropertyFilter</p>
<pre><code class="cs">var collectionView = new ListCollectionView(people);

var propertyFilter = new PropertyFilter&lt;Person&gt;(&quot;Age&quot;, PredicateOperator.IsGreaterThan, 30);
collectionView.Filter = propertyFilter.Filter;
</code></pre>

<p>The filter is refreshed if the operator or the value is changed</p>
<pre><code class="cs">// explicitly call refresh 
propertyFilter.IsCaseSensitive = true; // example change case sensitive or CultureInfo
propertyFilter.Refresh(); // and refresh
</code></pre>

<p>With property path. Example a sub item</p>
<pre><code class="cs">var propertyFilter = new PropertyFilter&lt;Person&gt;(&quot;SubItem.MyString&quot;, PredicateOperator.IsEqual, &quot;A&quot;);
</code></pre>

<p>Supports value conversion . Example converts string to double</p>
<pre><code class="cs"> var propertyFilter = new PropertyFilter&lt;MyFilteredItem&gt;(&quot;MyDouble&quot;, PredicateOperator.IsEqual, &quot;10.5&quot;);
// with culture
 var propertyFilter = new PropertyFilter&lt;MyFilteredItem&gt;(&quot;MyDouble&quot;, PredicateOperator.IsEqual, &quot;10,5&quot;, CultureInfo.GetCultureInfo(&quot;fr&quot;));
</code></pre>

<p>Predicate operators:</p>
<ul>
<li>IsEqual</li>
<li>IsNotEqual</li>
<li>IsLessThan</li>
<li>IsLessThanOrEqualTo</li>
<li>IsGreaterThan</li>
<li>IsGreaterThanOrEqualTo</li>
</ul>
<p>Only available for strings:</p>
<ul>
<li>StartsWith </li>
<li>EndsWith</li>
<li>Contains</li>
<li>DoesNotContain</li>
</ul>
<p>Composite filter</p>
<pre><code class="cs">var compositeFilter = new CompositeFilter&lt;Person&gt;();
compositeFilter.AddFilter(new PropertyFilter&lt;Person&gt;(&quot;FirstName&quot;, PredicateOperator.StartsWith, &quot;A&quot;));
compositeFilter.AddFilter(new PropertyFilter&lt;Person&gt;(&quot;Age&quot;, PredicateOperator.IsGreaterThan, 30));
compositeFilter.Refresh();
collectionView.Filter = compositeFilter.Filter;
</code></pre>

<p>Example 2 with Logical Operator OR</p>
<pre><code class="cs">var compositeFilter = new CompositeFilter&lt;Person&gt;(LogicalOperator.Or);
compositeFilter.AddFilter(new PropertyFilter&lt;Person&gt;(&quot;FirstName&quot;, PredicateOperator.StartsWith, &quot;A&quot;));
compositeFilter.AddFilter(new PropertyFilter&lt;Person&gt;(&quot;FirstName&quot;, PredicateOperator.StartsWith, &quot;B&quot;));
compositeFilter.Refresh();
collectionView.Filter = compositeFilter.Filter;
</code></pre>

<p>Example 3 with not null and starts with</p>
<pre><code class="cs">var compositeFilter = new CompositeFilter&lt;Person&gt;(LogicalOperator.Or);
compositeFilter.AddFilter(new PropertyFilter&lt;Person&gt;(&quot;FirstName&quot;, PredicateOperator.IsNotEqual, null));
compositeFilter.AddFilter(new PropertyFilter&lt;Person&gt;(&quot;FirstName&quot;, PredicateOperator.StartsWith, &quot;B&quot;));
compositeFilter.Refresh();
collectionView.Filter = compositeFilter.Filter;
</code></pre>

<h2 id="iisselected-iselectable-and-selectionsyncbehavior">IIsSelected, ISelectable and SelectionSyncBehavior<a class="headerlink" href="#iisselected-iselectable-and-selectionsyncbehavior" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Bind the Items collection and the SelectedItem of the SharedSource is easy.</p>
<p><strong>IIsSelected</strong> allows to be notified from ViewModel of selection.</p>
<pre><code class="cs">public class ViewCViewModel : DetailsViewModelBase, IIsSelected
{
    private bool isSelected;
    public bool IsSelected
    {
        get { return isSelected; }
        set
        {
            SetProperty(ref isSelected, value);
            if (isSelected)
                Title = &quot;ACTIVE&quot;;
            else
                Title = &quot;NOT Active&quot;;
        }
    }
}
</code></pre>

<p><strong>ISelectable</strong> allows for example to select a tabitem opened</p>
<pre><code class="cs">public class ViewDViewModel : DetailsViewModelBase, ISelectable
{
    public bool IsTarget(Type sourceType, object parameter)
    {
        return sourceType == typeof(ViewDViewModel);
    }
}
</code></pre>

<p><strong>SelectionSyncBehavior</strong> allows to notify all ViewModels (that implements IIsSelected) for a ListView with selection mode Multiple for example.</p>
<pre><code class="xml">&lt;ListView x:Name=&quot;ListView1&quot; 
            ItemsSource=&quot;{Binding DetailsSource.Items}&quot;
            SelectedItem=&quot;{Binding DetailsSource.SelectedItem}&quot;
            SelectionMode=&quot;Multiple&quot; 
            ItemContainerStyle=&quot;{StaticResource ListViewItemStyle}&quot;&gt;
    &lt;mvvmLib:NavigationInteraction.Behaviors&gt;
        &lt;mvvmLib:SelectionSyncBehavior /&gt;
    &lt;/mvvmLib:NavigationInteraction.Behaviors&gt;
&lt;/ListView&gt;
</code></pre>

<h2 id="animatingcontentcontrol">AnimatingContentControl<a class="headerlink" href="#animatingcontentcontrol" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Content Control that allows to animate on content change. </p>
</blockquote>
<p>2 Storyboards : </p>
<ul>
<li>EntranceAnimation </li>
<li>ExitAnimation</li>
<li>Simultaneous (boolean) allows to play simultaneously the animations.</li>
<li>CanAnimateOnLoad: allows to cancel animation on load</li>
</ul>
<pre><code class="xml">&lt;mvvmLib:AnimatingContentControl mvvmLib:NavigationManager.SourceName=&quot;Main&quot;&gt;
    &lt;mvvmLib:AnimatingContentControl.EntranceAnimation&gt;
        &lt;Storyboard&gt;
            &lt;!-- Target &quot;CurrentContentPresenter&quot;  --&gt;
            &lt;DoubleAnimation Storyboard.TargetName=&quot;CurrentContentPresenter&quot; 
                             Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)&quot;
                             From=&quot;400&quot; To=&quot;0&quot; Duration=&quot;0:0:0.4&quot;  /&gt;
        &lt;/Storyboard&gt;
    &lt;/mvvmLib:AnimatingContentControl.EntranceAnimation&gt;
    &lt;mvvmLib:AnimatingContentControl.ExitAnimation&gt;
        &lt;Storyboard&gt;
            &lt;!-- Target &quot;CurrentContentPresenter&quot; or with Simultaneous &quot;PreviousContentPresenter&quot; --&gt;
            &lt;DoubleAnimation Storyboard.TargetName=&quot;CurrentContentPresenter&quot; 
                             Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)&quot;
                             From=&quot;0&quot; To=&quot;400&quot; Duration=&quot;0:0:0.4&quot;  /&gt;
        &lt;/Storyboard&gt;
    &lt;/mvvmLib:AnimatingContentControl.ExitAnimation&gt;
&lt;/mvvmLib:AnimatingContentControl&gt;
</code></pre>

<p>Or Simultaneous</p>
<pre><code class="xml">  &lt;mvvmLib:AnimatingContentControl Content=&quot;{Binding Navigation.Current}&quot; 
                                    Simultaneous=&quot;True&quot;
                                    IsCancelled=&quot;{Binding IsCancelled}&quot;&gt;
    &lt;mvvmLib:AnimatingContentControl.EntranceAnimation&gt;
        &lt;Storyboard&gt;
            &lt;DoubleAnimation  Storyboard.TargetName=&quot;CurrentContentPresenter&quot;
                                Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)&quot;
                                From=&quot;{Binding ElementName=ThisControl,Path=ActualWidth,FallbackValue=400}&quot; To=&quot;0&quot; 
                                Duration=&quot;{Binding ElementName=DuractionComboBox,Path=SelectedItem}&quot;&gt;
                &lt;DoubleAnimation.EasingFunction&gt;
                    &lt;SineEase EasingMode=&quot;EaseInOut&quot; /&gt;
                &lt;/DoubleAnimation.EasingFunction&gt;
            &lt;/DoubleAnimation&gt;
        &lt;/Storyboard&gt;
    &lt;/mvvmLib:AnimatingContentControl.EntranceAnimation&gt;
    &lt;mvvmLib:AnimatingContentControl.ExitAnimation&gt;
        &lt;Storyboard&gt;
            &lt;DoubleAnimation  Storyboard.TargetName=&quot;PreviousContentPresenter&quot;
                                Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)&quot;
                                From=&quot;0&quot; To=&quot;{Binding ElementName=ThisControl,Path=ActualWidth,FallbackValue=400}&quot; 
                                Duration=&quot;{Binding ElementName=DuractionComboBox,Path=SelectedItem}&quot;&gt;
                &lt;DoubleAnimation.EasingFunction&gt;
                    &lt;SineEase EasingMode=&quot;EaseInOut&quot; /&gt;
                &lt;/DoubleAnimation.EasingFunction&gt;
            &lt;/DoubleAnimation&gt;
        &lt;/Storyboard&gt;
    &lt;/mvvmLib:AnimatingContentControl.ExitAnimation&gt;
&lt;/mvvmLib:AnimatingContentControl&gt;
</code></pre>

<p>Other sample: animations in resources</p>
<pre><code class="xml">&lt;UserControl.Resources&gt;
    &lt;Storyboard x:Key=&quot;EntranceAnimation1&quot;&gt;
        &lt;DoubleAnimation Storyboard.TargetName=&quot;CurrentContentPresenter&quot; 
                         Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)&quot;
                         From=&quot;400&quot; To=&quot;0&quot; Duration=&quot;0:0:0.4&quot;  /&gt;
    &lt;/Storyboard&gt;

    &lt;Storyboard x:Key=&quot;ExitAnimation1&quot;&gt;
        &lt;DoubleAnimation Storyboard.TargetName=&quot;CurrentContentPresenter&quot; 
                         Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)&quot;
                         From=&quot;0&quot; To=&quot;-400&quot; Duration=&quot;0:0:0.4&quot;  /&gt;
    &lt;/Storyboard&gt;
&lt;/UserControl.Resources&gt;
</code></pre>

<pre><code class="xml">&lt;mvvmLib:AnimatingContentControl Content=&quot;{Binding Navigation.Current}&quot; 
                                 EntranceAnimation=&quot;{StaticResource EntranceAnimation1}&quot;
                                 ExitAnimation=&quot;{StaticResource ExitAnimation1}&quot;&gt;
&lt;/mvvmLib:AnimatingContentControl&gt;
</code></pre>

<p>Other sample: Change Animations dynamically and controlling when the animation is played with &quot;CanAnimate&quot;. For a Schedule view for example.</p>
<pre><code class="xml">&lt;mvvmLib:AnimatingContentControl  Content=&quot;{Binding Navigation.Current}&quot; 
                                  CanAnimate=&quot;{Binding CanAnimate, Mode=OneWay}&quot; 
                                  CanAnimateOnLoad=&quot;False&quot;
                                  EntranceAnimation=&quot;{Binding EntranceAnimation, Mode=OneWay}&quot;
                                  ExitAnimation=&quot;{Binding ExitAnimation, Mode=OneWay}&quot;&gt;

    &lt;mvvmLib:Interaction.Triggers&gt;
        &lt;mvvmLib:EventTrigger EventName=&quot;AnimationCompleted&quot;&gt;
            &lt;mvvmLib:CallMethodAction TargetObject=&quot;{Binding}&quot; MethodName=&quot;CompleteChangingScheduleMode&quot;/&gt;
        &lt;/mvvmLib:EventTrigger&gt;
    &lt;/mvvmLib:Interaction.Triggers&gt;

&lt;/mvvmLib:AnimatingContentControl&gt;
</code></pre>

<h2 id="transitioningcontentcontrol">TransitioningContentControl<a class="headerlink" href="#transitioningcontentcontrol" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Allows to play a transition on loaded.</p>
</blockquote>
<p>2 Storyboards:</p>
<ul>
<li>EntranceTransition: played when control loaded (or explicitly with &quot;DoEnter&quot;)</li>
<li>ExitTransition: played explicitly with &quot;DoLeave&quot; or IsLeaving dependency property (for example played when the user click on a tab close button)</li>
</ul>
<p>Other methods:</p>
<ul>
<li>CancelTransition</li>
<li>Reset: reset the render transform property and opacity + cancel transition</li>
</ul>
<pre><code class="xml">&lt;mvvmLib:TransitioningContentControl x:Name=&quot;TransitioningContentControl1&quot; Margin=&quot;0,20&quot;&gt;
        &lt;mvvmLib:TransitioningContentControl.EntranceTransition&gt;
            &lt;Storyboard&gt;
                &lt;DoubleAnimation Storyboard.TargetName=&quot;ContentPresenter&quot; 
                                    Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)&quot; 
                                    From=&quot;0&quot; To=&quot;1&quot; Duration=&quot;0:0:0.6&quot;&gt;
                    &lt;DoubleAnimation.EasingFunction&gt;
                        &lt;ExponentialEase EasingMode=&quot;EaseInOut&quot;/&gt;
                    &lt;/DoubleAnimation.EasingFunction&gt;
                &lt;/DoubleAnimation&gt;
            &lt;/Storyboard&gt;
        &lt;/mvvmLib:TransitioningContentControl.EntranceTransition&gt;
        &lt;mvvmLib:TransitioningContentControl.ExitTransition&gt;
            &lt;Storyboard&gt;
                &lt;DoubleAnimation Storyboard.TargetName=&quot;ContentPresenter&quot; 
                                    Storyboard.TargetProperty=&quot;(UIElement.Opacity)&quot; 
                                    From=&quot;1&quot; To=&quot;0&quot; Duration=&quot;0:0:2&quot;/&gt;
            &lt;/Storyboard&gt;
&lt;/mvvmLib:TransitioningContentControl.ExitTransition&gt;
</code></pre>

<h2 id="transitioningitemscontrol">TransitioningItemsControl<a class="headerlink" href="#transitioningitemscontrol" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>ItemsControl that allows to animate on item insertion and deletion. </p>
</blockquote>
<p>The &quot;ControlledAnimation&quot; avoid to set the target and the target property of the storyboard. The TargetPropertyType is a shortcut. But it's possible to target explicitly the target property of the storyboard with &quot;TargetProperty&quot; dependency property.</p>
<pre><code class="xml">&lt;mvvmLib:TransitioningItemsControl ItemsSource=&quot;{Binding MyItems}&quot; 
                                   TransitionClearHandling=&quot;Transition&quot;
                                   IsCancelled=&quot;{Binding IsCancelled}&quot;&gt;
    &lt;mvvmLib:TransitioningItemsControl.EntranceAnimation&gt;
        &lt;mvvmLib:ParallelAnimation&gt;

            &lt;mvvmLib:ControlledAnimation TargetPropertyType=&quot;TranslateX&quot;&gt;
                &lt;DoubleAnimation From=&quot;200&quot; To=&quot;0&quot;  Duration=&quot;0:0:2&quot;/&gt;
            &lt;/mvvmLib:ControlledAnimation&gt;

        &lt;/mvvmLib:ParallelAnimation&gt;
    &lt;/mvvmLib:TransitioningItemsControl.EntranceAnimation&gt;

    &lt;mvvmLib:TransitioningItemsControl.ExitAnimation&gt;
        &lt;mvvmLib:ParallelAnimation&gt;
            &lt;mvvmLib:ControlledAnimation TargetPropertyType=&quot;TranslateX&quot;&gt;
                &lt;DoubleAnimation From=&quot;0&quot; To=&quot;200&quot; Duration=&quot;0:0:2&quot;/&gt;
            &lt;/mvvmLib:ControlledAnimation&gt;
        &lt;/mvvmLib:ParallelAnimation&gt;
    &lt;/mvvmLib:TransitioningItemsControl.ExitAnimation&gt;
&lt;/mvvmLib:TransitioningItemsControl&gt;
</code></pre>

<h2 id="triggers-and-triggeractions">Triggers and TriggerActions<a class="headerlink" href="#triggers-and-triggeractions" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Example:</p>
<pre><code class="xml">&lt;Button x:Name=&quot;Button1&quot; Content=&quot;Click!&quot;&gt;
    &lt;mvvmLib:Interaction.Triggers&gt;
        &lt;mvvmLib:EventTrigger EventName=&quot;Click&quot;&gt;
            &lt;mvvmLib:CallMethodAction TargetObject=&quot;{Binding}&quot; MethodName=&quot;SayHello&quot; Parameter=&quot;My parameter&quot; /&gt;
            &lt;mvvmLib:InvokeCommandAction Command=&quot;{Binding MyCommand}&quot; CommandParameter=&quot;My parameter&quot;/&gt;
            &lt;mvvmLib:ChangePropertyAction TargetObject=&quot;{Binding ElementName=Button1}&quot; PropertyPath=&quot;Foreground&quot; Value=&quot;Red&quot;/&gt;
        &lt;/mvvmLib:EventTrigger&gt;
    &lt;/mvvmLib:Interaction.Triggers&gt;
&lt;/Button&gt;
</code></pre>

<p>DataTrigger sample</p>
<pre><code class="xml">&lt;TextBlock x:Name=&quot;TextBlock1&quot; Text=&quot;{Binding MyValue}&quot;&gt;
    &lt;mvvmLib:Interaction.Triggers&gt;
        &lt;mvvmLib:DataTrigger Binding=&quot;{Binding MyValue}&quot; Value=&quot;My value&quot;&gt;
            &lt;mvvmLib:ChangePropertyAction TargetObject=&quot;{Binding ElementName=TextBlock1}&quot; PropertyPath=&quot;Foreground&quot; Value=&quot;Red&quot;/&gt;
        &lt;/mvvmLib:DataTrigger&gt;
        &lt;mvvmLib:DataTrigger Binding=&quot;{Binding MyValue}&quot; Comparison=&quot;NotEqual&quot; Value=&quot;My value&quot;&gt;
            &lt;mvvmLib:ChangePropertyAction TargetObject=&quot;{Binding ElementName=TextBlock1}&quot; PropertyPath=&quot;Foreground&quot; Value=&quot;Blue&quot;/&gt;
        &lt;/mvvmLib:DataTrigger&gt;
    &lt;/mvvmLib:Interaction.Triggers&gt;
&lt;/TextBlock&gt;
</code></pre>

<p>Triggers:</p>
<ul>
<li>EventTrigger</li>
<li>DataTrigger</li>
</ul>
<p>TriggerActions:</p>
<ul>
<li>CallMethodAction</li>
<li>InvokeCommandAction</li>
<li>ChangePropertyAction</li>
<li>GoToStateAction</li>
</ul>
<p>Easy to create our owns Triggers (inherit from TriggerBase) and TriggerActions (inherit from TriggerAction and implement Invoke method).</p>
<h2 id="behaviors">Behaviors<a class="headerlink" href="#behaviors" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<h3 id="eventtocommandbehavior">EventToCommandBehavior<a class="headerlink" href="#eventtocommandbehavior" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<blockquote>
<p>Allows to bind an event to a command.</p>
</blockquote>
<p>Sample button &quot;Click&quot; event binded to a ViewModel command</p>
<pre><code class="xml">&lt;Button Content=&quot;Click event&quot;&gt;
    &lt;mvvmLib:NavigationInteraction.Behaviors&gt;
        &lt;mvvmLib:EventToCommandBehavior EventName=&quot;Click&quot; Command=&quot;{Binding SayHelloCommand}&quot; CommandParameter=&quot;World&quot;/&gt;
    &lt;/mvvmLib:NavigationInteraction.Behaviors&gt;
&lt;/Button&gt;
</code></pre>

<p>ViewModel</p>
<pre><code class="cs">public class ViewAViewModel : BindableBase
{
    private string message;
    public string Message
    {
        get { return message; }
        set { SetProperty(ref message, value); }
    }

    public ICommand SayHelloCommand { get; }

    public ViewAViewModel()
    {
        SayHelloCommand = new RelayCommand&lt;string&gt;(SayHello);
    }

    private void SayHello(string value)
    {
        Message = $&quot;Hello {value}! {DateTime.Now.ToLongTimeString()}&quot;;
    }
}
</code></pre>

<h2 id="bindingproxy">BindingProxy<a class="headerlink" href="#bindingproxy" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Example:</p>
<pre><code class="xml">&lt;DataGrid x:Name=&quot;DataGrid1&quot; ItemsSource=&quot;{Binding CollectionView}&quot; AutoGenerateColumns=&quot;False&quot; IsReadOnly=&quot;True&quot;&gt;
    &lt;DataGrid.Resources&gt;
        &lt;!-- 1. Adds the Proxy in control or window resources--&gt;
        &lt;mvvmLib:BindingProxy x:Key=&quot;Proxy&quot;  Context=&quot;{Binding}&quot;/&gt;
    &lt;/DataGrid.Resources&gt;
    &lt;DataGrid.Columns&gt;
        &lt;DataGridTextColumn Binding=&quot;{Binding FirstName}&quot; Width=&quot;*&quot;&gt;
            &lt;DataGridTextColumn.Header&gt;
                &lt;Grid&gt;
                    &lt;Grid.ColumnDefinitions&gt;
                        &lt;ColumnDefinition/&gt;
                        &lt;ColumnDefinition Width=&quot;Auto&quot; /&gt;
                    &lt;/Grid.ColumnDefinitions&gt;

                    &lt;TextBlock Text=&quot;Name&quot; /&gt;

                    &lt;local:DropDownButton Grid.Column=&quot;1&quot;&gt;
                        &lt;local:DropDownButton.DropDownContent&gt;
                            &lt;Grid&gt;
                                &lt;Grid.RowDefinitions&gt;
                                    &lt;RowDefinition /&gt;
                                    &lt;RowDefinition Height=&quot;Auto&quot;/&gt;
                                &lt;/Grid.RowDefinitions&gt;

                                &lt;!-- code --&gt;

                                &lt;StackPanel Orientation=&quot;Horizontal&quot; Grid.Row=&quot;1&quot;&gt;
                                    &lt;!-- 2. Use the Proxy as Source and bind with The Context dependency property --&gt;
                                    &lt;Button Content=&quot;Filter&quot; Command=&quot;{Binding Context.FilterFirstNameCommand, Source={StaticResource Proxy}}&quot; /&gt;
                                &lt;/StackPanel&gt;
                            &lt;/Grid&gt;
                        &lt;/local:DropDownButton.DropDownContent&gt;
                    &lt;/local:DropDownButton&gt;
                &lt;/Grid&gt;
            &lt;/DataGridTextColumn.Header&gt;
        &lt;/DataGridTextColumn&gt;

        &lt;!-- other columns --&gt;
    &lt;/DataGrid.Columns&gt;
&lt;/DataGrid&gt;
</code></pre>

<h2 id="modules">Modules<a class="headerlink" href="#modules" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>allows to manage modules/assemblies loaded &quot;on demand&quot;</p>
</blockquote>
<h3 id="registering-modules">Registering modules<a class="headerlink" href="#registering-modules" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>For example:</p>
<ul>
<li>Create a library &quot;ModuleA&quot;</li>
<li>Add Views, ViewModels, etc.</li>
<li>Create a module configuration file</li>
</ul>
<pre><code class="cs">using ModuleA.ViewModels;
using ModuleA.Views;
using MvvmLib.Modules;
using MvvmLib.Navigation;

namespace ModuleA
{
    public class ModuleAConfiguration : IModuleConfiguration
    {
        public void Initialize()
        {
            SourceResolver.RegisterTypeForNavigation&lt;ViewA&gt;(); // With View
            SourceResolver.RegisterTypeForNavigation&lt;ViewBViewModel&gt;(&quot;ViewB&quot;); // With ViewModel (+ DataTemplate)
        }
    }
}
</code></pre>

<ul>
<li>Do not add a reference to this assembly from main project</li>
<li>In main project. Register the module infos:</li>
</ul>
<p>With Bootstrapper</p>
<p>Registering the module: </p>
<ul>
<li>With ModuleManager.Default instance</li>
</ul>
<pre><code class="cs">public class Bootstrapper : MvvmLibBootstrapper
{
    //  etc.

    protected override void RegisterModules()
    {
        // 1. The module name (an id)
        // 2. The path
        // 3. The module config class full name
        ModuleManager.Default.RegisterModule(&quot;ModuleA&quot;, &quot;ModuleA.dll&quot;, &quot;ModuleA.ModuleAConfiguration&quot;)
    }
}
</code></pre>

<ul>
<li>Or Register a ModuleManager with IoC Container</li>
</ul>
<pre><code class="cs">public abstract class MvvmLibBootstrapper : BootstrapperBase
{
    protected IInjector container;

    public MvvmLibBootstrapper(IInjector container)
    {
        if (container == null)
            throw new ArgumentNullException(nameof(container));

        this.container = container;
    }

    protected override void RegisterRequiredTypes()
    {
        container.RegisterInstance&lt;IInjector&gt;(container);
        container.RegisterSingleton&lt;IModuleManager, ModuleManager&gt;(); // &lt;=
        container.RegisterSingleton&lt;IEventAggregator, EventAggregator&gt;();
    }

    protected override void SetViewFactory()
    {
        SourceResolver.SetFactory((sourceType) =&gt; container.GetNewInstance(sourceType));
    }

    protected override void SetViewModelFactory()
    {
        ViewModelLocationProvider.SetViewModelFactory((viewModelType) =&gt; container.GetInstance(viewModelType));
    }
}
</code></pre>

<pre><code class="cs">public class Bootstrapper : MvvmLibBootstrapper
{
    // etc.

    protected override void RegisterModules()
    {
        var moduleManager = container.GetInstance&lt;IModuleManager&gt;();

        moduleManager.RegisterModule(&quot;ModuleA&quot;, @&quot;ModuleA.dll&quot;, &quot;ModuleA.ModuleAConfiguration&quot;);
    }
}
</code></pre>

<p>Or in App.Config file</p>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;configuration&gt;
  &lt;configSections&gt;
    &lt;section name=&quot;modules&quot; type=&quot;MvvmLib.Modules.ModulesConfigurationSection, MvvmLib.Wpf&quot;/&gt;
  &lt;/configSections&gt;
  &lt;startup&gt;
    &lt;supportedRuntime version=&quot;v4.0&quot; sku=&quot;.NETFramework,Version=v4.5&quot; /&gt;
  &lt;/startup&gt;
  &lt;modules&gt;
    &lt;module moduleName=&quot;ModuleA&quot; path=&quot;ModuleA.dll&quot; moduleConfigurationFullName=&quot;ModuleA.ModuleAConfiguration&quot;/&gt;
  &lt;/modules&gt;
&lt;/configuration&gt;
</code></pre>

<p><strong>Tip</strong>: copy dll to the main project (pre-build command lines in project properties)</p>
<pre class="nocode">copy &quot;$(SolutionDir)Samples\Modules\ModuleA\bin\Debug\ModuleA.dll&quot;  &quot;$(ProjectDir)bin\Debug\ModuleA.dll&quot; 
copy &quot;$(SolutionDir)Samples\Modules\ModuleB\bin\Debug\ModuleB.dll&quot;  &quot;$(ProjectDir)bin\Debug\ModuleB.dll&quot; 
</pre><h3 id="loading-the-module">Loading the module<a class="headerlink" href="#loading-the-module" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre><code class="cs">ModuleManager.Default.LoadModule(&quot;ModuleA&quot;);
</code></pre>

<p>or inject de module manager instance</p>
<pre><code class="cs">public class ShellViewModel : BindableBase
{
    private readonly IModuleManager moduleManager;

    public NavigationSource Navigation { get; }
    public ICommand NavigateCommand { get; set; }


    public ShellViewModel(IModuleManager moduleManager)
    {
        this.moduleManager = moduleManager;

        this.Navigation = new NavigationSource();
        NavigateCommand = new RelayCommand&lt;string&gt;(NavigateToModule);

        moduleManager.ModuleLoaded += OnModuleLoaded;
    }

    private void OnModuleLoaded(object sender, ModuleLoadedEventArgs e)
    {

    }

    private void NavigateToModule(string sourceName)
    {
        var moduleName = GetModuleName(sourceName);
        if (moduleName == null)
            return;

        LoadModule(moduleName);

        this.Navigation.Navigate(sourceName);
    }

    private string GetModuleName(string sourceName)
    {
        switch (sourceName)
        {
            case &quot;ViewA&quot;:
            case &quot;ViewB&quot;:
                return &quot;ModuleA&quot;;
            case &quot;ViewC&quot;:
                return &quot;ModuleB&quot;;
        }
        return null;
    }

    private void LoadModule(string moduleName)
    {
        if (!moduleManager.IsModuleLoaded(moduleName))
            moduleManager.LoadModule(moduleName);
    }
}
</code></pre>

<h3 id="shared-project-services-infrastructure-etc.">Shared project (services, infrastructure, etc.)<a class="headerlink" href="#shared-project-services-infrastructure-etc." title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Register the service with IoC container in main project</p>
<pre><code class="cs">public class Bootstrapper : MvvmLibBootstrapper
{
    public Bootstrapper(IInjector container)
        : base(container)
    { }

    protected override void RegisterTypes()
    {
        // shared service
        container.RegisterType&lt;IMySharedService, MySharedService&gt;();
    }

    // etc.
}
</code></pre>

<p>Use this service in modules</p>
<pre><code class="cs">public class ViewCViewModel : BindableBase
{
    public ViewCViewModel(IMySharedService mySharedService)
    {
        
    }
}
</code></pre>


                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
MvvmLib Documentation. &copy;2019. <a href='https://github.com/romagny13/MvvmLib' target='_blank'>GitHub</a> | <a href='https://www.nuget.org/profiles/romagny13' target='_blank'>NuGet</a>.
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="js/jquery-2.1.1.min.js"></script>
    <script src="js/modernizr-2.8.3.min.js"></script>
    <script src="js/highlight.pack.js"></script>
    <script src="js/theme.js"></script>

</body>
</html>
