<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>MvvmLib.Wpf - MvvmLib Documentation</title>
    <link rel="shortcut icon" href="favicon.ico">
    <link rel="stylesheet" href="css/theme.css" type="text/css" />
    <link rel="stylesheet" href="css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="css/styles/vs.css">
    <link rel="stylesheet" href="css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="index.htm"><i class="fa fa-home"></i> MvvmLib Documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="index.htm">Home</a>
</li>

<li class="tocentry"><a href="Mvvm.htm">MvvmLib.Core</a>
</li>
<li class="tocentry"><a href="DI.htm">MvvmLib.IoC</a>
</li>
<li class="tocentry current"><a class="current" href="Navigation.htm">MvvmLib.Wpf</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#mvvmlib.wpf-navigation-net-4.5">MvvmLib.Wpf (Navigation) [net 4.5]</a></li>

<li class="tocentry"><a href="#viewmodellocator">ViewModelLocator</a></li>

<li class="tocentry"><a href="#regions">Regions</a></li>

<li class="tocentry"><a href="#inavigatable">INavigatable</a></li>

<li class="tocentry"><a href="#iactivatable-and-ideactivatable-navigation-guards">IActivatable and IDeactivatable Navigation Guards</a></li>

<li class="tocentry"><a href="#iloadedeventlistener">ILoadedEventListener</a></li>

<li class="tocentry"><a href="#iselectable">ISelectable</a></li>

<li class="tocentry"><a href="#iviewlifetimestrategy">IViewLifetimeStrategy</a></li>

<li class="tocentry"><a href="#create-a-bootsrapper">Create a Bootsrapper</a></li>

<li class="tocentry"><a href="#create-a-region-adapter">Create a region Adapter</a></li>

<li class="tocentry"><a href="#bindableobject">BindableObject<T></a></li>

</ul>
<li class="tocentry"><a href="Navigation_Uwp.htm">MvvmLib.Windows</a>
</li>
<li class="tocentry"><a href="Navigation_XF.htm">MvvmLib.XF</a>
</li>
<li class="tocentry"><a href="Adaptive.htm">MvvmLib.Adaptive.Wpf</a>
</li>
<li class="tocentry"><a href="Adaptive_Uwp.htm">MvvmLib.Adaptive.Windows</a>
</li>
<li class="tocentry"><a href="LICENSE.htm">LICENSE</a>
</li>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="index.htm">MvvmLib Documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="index.htm">Home</a></li> / <li><a href="Navigation.htm">MvvmLib.Wpf</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h2 id="mvvmlib.wpf-navigation-net-4.5">MvvmLib.Wpf (Navigation) [net 4.5]<a class="headerlink" href="#mvvmlib.wpf-navigation-net-4.5" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<ul>
<li><strong>Regions</strong>: change and animate the content of <strong>ContentRegion</strong> (ContentControl) and <strong>ItemsRegions</strong> (ItemsControl, TabControl, ... and more with Adapters) </li>
<li><strong>ViewModelLocator</strong>: allows to resolve ViewModel for regions and for window with <strong>ResolveWindowViewModel</strong></li>
<li><strong>RegionManager</strong>: allows to get a region, then <strong>navigate</strong> <em>with regions</em> </li>
<li><strong>INavigatable</strong>: allows the views and view models to be notified on navigate</li>
<li><strong>IActivatable</strong>, <strong>IDeactivatable</strong>: allow to cancel navigation</li>
<li><strong>ILoadedEventListener</strong>: allows to be notified when the view or window is loaded</li>
<li><strong>IViewLifetimeStrategy</strong>: Allows to get always the same instance of a view (Singleton) for a region</li>
<li><strong>ISelectable</strong>: allows to select a view </li>
<li><strong>BootstrapperBase</strong>: bootstrapper base class</li>
<li><strong>BindableObject</strong>: Allows to bind a value or object to Value dependency property and be notified on value changed.</li>
</ul>
<h2 id="viewmodellocator">ViewModelLocator<a class="headerlink" href="#viewmodellocator" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Allows to resolve ViewModels for regions and window (with <strong>ResolveWindowViewModel</strong>)</p>
</blockquote>
<p>Default <strong>convention</strong>:</p>
<ul>
<li>Views in <code>Views</code> namespace</li>
<li>View models in <code>ViewModels</code> namespace</li>
<li>
View model name: 
<ul>
<li><em>view name + &quot;ViewModel&quot;</em> (example: ShellViewModel for Shell)</li>
<li>Or if the view name ends by &quot;View&quot;: <em>view name + &quot;Model&quot;</em> (example: NavigationViewModel for NavigationView)</li>
</ul>
</li>
</ul>
<h3 id="change-the-convention">Change the convention<a class="headerlink" href="#change-the-convention" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Example with &quot;View&quot; and &quot;ViewModel&quot; namespaces</p>
<pre><code class="cs"> ViewModelLocationProvider.SetViewTypeToViewModelTypeResolver((viewType) =&gt;
            {
                var viewAssemblyName = viewType.GetTypeInfo().Assembly.FullName;

                var viewName = viewType.FullName;
                viewName = viewName.Replace(&quot;.View.&quot;, &quot;.ViewModel.&quot;); // &lt;===
                var suffix = viewName.EndsWith(&quot;View&quot;) ? &quot;Model&quot; : &quot;ViewModel&quot;;
                var viewModelName = string.Format(CultureInfo.InvariantCulture, &quot;{0}{1}, {2}&quot;, viewName, suffix, viewAssemblyName);

                return Type.GetType(viewModelName);
            });
</code></pre>

<h3 id="register-a-custom-view-model-for-a-view">Register a custom View Model for a view<a class="headerlink" href="#register-a-custom-view-model-for-a-view" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>For example: the view model for a ViewA is not ViewAViewModel but MyCustomViewAViewModel</p>
<pre><code class="cs">ViewModelLocationProvider.RegisterCustom(typeof(ViewA), typeof(MyCustomViewAViewModel));
</code></pre>

<h3 id="resolvewindowviewmodel-attached-property-window">ResolveWindowViewModel Attached property (Window)<a class="headerlink" href="#resolvewindowviewmodel-attached-property-window" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Allows to resolve the view model of the Window. Example:</p>
<p><strong>Only on Windows</strong> (Shell or &quot;popup&quot;)</p>
<pre><code class="xml">&lt;Window x:Class=&quot;WpfLibSample.Views.Shell&quot;
        ...
         xmlns:nav=&quot;http://mvvmlib.com/&quot;
         nav:ViewModelLocator.ResolveWindowViewModel=&quot;True&quot;&gt;
</code></pre>

<h2 id="regions">Regions<a class="headerlink" href="#regions" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>namespace</p>
<pre class="nocode">xmlns:nav=&quot;http://mvvmlib.com/&quot;
</pre><p>With a ContentControl</p>
<pre><code class="xml">&lt;ContentControl x:Name=&quot;MyContentRegion1&quot; nav:RegionManager.ContentRegion=&quot;MyContentRegion&quot;&gt;&lt;/ContentControl&gt;
</code></pre>

<p>With an ItemsControl</p>
<pre><code class="xml">&lt;ItemsControl nav:RegionManager.ItemsRegion=&quot;MyItemsRegion&quot;&gt;&lt;/ItemsControl&gt;
</code></pre>

<p>With a TabControl (with the Header binded to the property Title of the ViewModel for example)</p>
<pre><code class="xml">&lt;TabControl nav:RegionManager.ItemsRegion=&quot;MyTabRegion&quot;&gt;
            &lt;TabControl.ItemContainerStyle&gt;
                &lt;Style TargetType=&quot;TabItem&quot;&gt;
                    &lt;Setter Property=&quot;Header&quot; Value=&quot;{Binding Title}&quot; /&gt;
                &lt;/Style&gt;
            &lt;/TabControl.ItemContainerStyle&gt;
&lt;/TabControl&gt;
</code></pre>

<p>The control name could be used to resolve the region if more than one region with the same region name are registered </p>
<p>Example:</p>
<pre><code class="xml">&lt;ContentControl x:Name=&quot;MyContentRegion1&quot; nav:RegionManager.ContentRegion=&quot;MyContentRegion&quot;&gt;&lt;/ContentControl&gt;
&lt;ContentControl x:Name=&quot;MyContentRegion2&quot; nav:RegionManager.ContentRegion=&quot;MyContentRegion&quot;&gt;&lt;/ContentControl&gt;
</code></pre>

<p><strong>Tip</strong>: create a class with region names</p>
<pre><code class="cs">internal class RegionNames
{
    public static string ContentControlRegionName = &quot;ContentControlRegion&quot;;
    public static string ItemsControlRegionName = &quot;ItemsControlRegion&quot;;
    public static string TabControlRegionName = &quot;TabControlRegion&quot;;
    public static string StackPanelRegionName = &quot;StackPanelRegionName&quot;;
}
</code></pre>

<p>... And change the name</p>
<pre><code class="xml">&lt;ContentControl nav:RegionManager.ContentRegion=&quot;{x:Static local:RegionNames.ContentControlRegionName}&quot;&gt;&lt;/ContentControl&gt;
</code></pre>

<h3 id="navigate">Navigate<a class="headerlink" href="#navigate" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<h4 id="with-content-region">With Content Region<a class="headerlink" href="#with-content-region" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h4>
<p>Inject the region manager (view and / or view model)</p>
<pre><code class="cs">public class ViewAViewModel
{
    IRegionManager regionManager;

    public ViewAViewModel(IRegionManager regionManager)
    {
        this.regionManager = regionManager;
    }
}
</code></pre>

<p>And use it</p>
<pre><code class="cs">// GetContentRegion returns the last region registered for this region name
await regionManager.GetContentRegion(&quot;MyContentRegion&quot;).NavigateAsync(typeof(ViewA));

// and the control name to target a control
await regionManager.GetContentRegion(&quot;MyContentRegion&quot;, &quot;MyContentRegion1&quot;).NavigateAsync(typeof(ViewA));
</code></pre>

<p>with parameter</p>
<pre><code class="cs">await regionManager.GetContentRegion(&quot;MyContentRegion&quot;).NavigateAsync(typeof(ViewA), &quot;my parameter&quot;);
</code></pre>

<p>with exit and entrance animations</p>
<pre><code class="cs">await regionManager.GetContentRegion(&quot;MyContentRegion&quot;).NavigateAsync(typeof(ViewA), EntranceTransitionType.FadeIn, ExitTransitionType.FadeOut);
</code></pre>

<p><strong>Content Region</strong></p>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Method</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>NavigateAsync</td>
	<td>Allows to navigate to a view or view model (with DataTemplate) (parameters: page type, parameter and navigation transition type)</td>
</tr>
<tr>
	<td>GoBackAsync</td>
	<td>Allows to go to the previous view</td>
</tr>
<tr>
	<td>GoForwardAsync</td>
	<td>Allows to go the next view</td>
</tr>
<tr>
	<td>NavigateToRootAsync</td>
	<td>Allows to navigate to the first view/ root view</td>
</tr>
<tr>
	<td>RedirectAsync</td>
	<td>allows to redirect to a view and do not add/remove current page from history</td>
</tr>
</tbody>
</table>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Property</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>History</td>
	<td>Navigation History with notification on add and remove entry</td>
</tr>
<tr>
	<td>CanGoBack</td>
	<td>Returns true if back stack history have more then one entry</td>
</tr>
<tr>
	<td>CanGoForward</td>
	<td>Returns true if forward stack history have one or more entries</td>
</tr>
</tbody>
</table>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Event</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>CanGoBackChanged</td>
	<td>Invoked after can go back changed</td>
</tr>
<tr>
	<td>CanGoForwardChanged</td>
	<td>Invoked after can go forward changed</td>
</tr>
<tr>
	<td>Navigating</td>
	<td>Invoked before navigation starts</td>
</tr>
<tr>
	<td>Navigated</td>
	<td>Invoked after navigation ends</td>
</tr>
<tr>
	<td>NavigatingFailed</td>
	<td>Invoked after navigation was cancelled</td>
</tr>
</tbody>
</table>
<h4 id="with-items-region">With Items Region<a class="headerlink" href="#with-items-region" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h4>
<p>AddAsync</p>
<pre><code class="cs">await regionManager.GetItemsRegion(&quot;MyItemsRegion&quot;).AddAsync(typeof(ViewA));

// by control name
await regionManager.GetItemsRegion(&quot;MyItemsRegion&quot;,&quot;MyItemsRegion1&quot;).AddAsync(typeof(ViewA));

// with a parameter
 await regionManager.GetItemsRegion(&quot;MyItemsRegion&quot;).AddAsync(typeof(ViewA),&quot;my parameter&quot;);

// with transition
 await regionManager.GetItemsRegion(&quot;MyItemsRegion&quot;).AddAsync(typeof(ViewA), EntranceTransitionType.SlideInFromRight);
</code></pre>

<p>InsertAsync</p>
<pre><code class="cs">// example : index 2
await regionManager.GetItemsRegion(&quot;MyItemsRegion&quot;).InsertAsync(2, typeof(ViewD));
</code></pre>

<p>RemoveLastAsync (remove the last item)</p>
<pre><code class="cs">await regionManager.GetItemsRegion(&quot;MyItemsRegion&quot;).RemoveLastAsync(ExitTransitionType.SlideOutToBottom);
</code></pre>

<p>RemoveAtAsync</p>
<pre><code class="cs">// example : index 2
await WpfNavigationService.Default.GetItemsRegion(RegionNames.ItemsControlRegionName).RemoveAtAsync(2);
</code></pre>

<p><strong>ItemsRegion Methods</strong> :</p>
<ul>
<li><strong>AddAsync</strong></li>
<li><strong>InsertAsync</strong></li>
<li><strong>RemoveAtAsync</strong></li>
<li><strong>RemoveLastAsync</strong></li>
<li><strong>Clear</strong></li>
</ul>
<h3 id="animation">Animation<a class="headerlink" href="#animation" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Define an entrance and an exit animation. Example:</p>
<pre><code class="cs">var entranceScaleAnimation = new ScaleAnimation
{
    From = 0,
    To = 1,
    RenderTransformOrigin = new Point(0.5, 0.5),
    EasingFunction = new ExponentialEase { EasingMode = EasingMode.EaseInOut }
};
var exitScaleAnimation = new ScaleAnimation
{
    From = 1,
    To = 0,
    RenderTransformOrigin = new Point(0.5, 0.5),
    EasingFunction = new ExponentialEase { EasingMode = EasingMode.EaseInOut }
};

var region = regionManager.GetContentRegion(&quot;ContentRegion&quot;);
 region.ConfigureAnimation(entranceScaleAnimation, exitScaleAnimation);
</code></pre>

<p>Playing the entrance and exit animations simultaneously:</p>
<p><code>cs
 region.ConfigureAnimation(entranceScaleAnimation, exitScaleAnimation, true);</code></p>
<p>Animation classes awailables:</p>
<ul>
<li><strong>OpacityAnimation</strong></li>
<li><strong>TranslateAnimation</strong></li>
<li><strong>SkewAnimation</strong></li>
<li><strong>ScaleAnimation</strong></li>
<li><strong>RotateAnimation</strong></li>
<li><strong>FxCornerEntranceAnimation</strong> and <strong>FxCornerExitAnimation</strong></li>
</ul>
<p>Create a custom animation class:</p>
<pre><code class="cs">// 1. inherit from ContentAnimationBase or TransformAnimationBase
public class MyAnimation : TransformAnimationBase
{
    // 2. implements the base class
    public override void CancelAnimation()
    {
        throw new System.NotImplementedException();
    }

    protected override void BeginAnimation()
    {
        throw new System.NotImplementedException();
    }

    protected override AnimationTimeline CreateAnimation()
    {
        throw new System.NotImplementedException();
    }
}
</code></pre>

<p>Example with the OpacityAnimation class:</p>
<pre><code class="cs">public class OpacityAnimation : ContentAnimationBase
{
    protected override double DefaultFrom =&gt; 0;
    protected override double DefaultTo =&gt; 1;

    public override void CancelAnimation()
    {
        // on animation cancelled
        if (Element != null)
        {
            Element.BeginAnimation(Control.OpacityProperty, null);
            AnimationWasCancelled = true;
            IsAnimating = false;
        }
    }

    protected override AnimationTimeline CreateAnimation()
    {
        // return an animation
        var animation = new DoubleAnimation(From, To, Duration);
        if (EasingFunction != null)
            animation.EasingFunction = EasingFunction;
        return animation;
    }

    protected override void BeginAnimation()
    {
        // begin the animation
        Element.BeginAnimation(Control.OpacityProperty, Animation);
    }
}
</code></pre>

<h2 id="inavigatable">INavigatable<a class="headerlink" href="#inavigatable" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>For View and/or View model</p>
<p>Example:</p>
<pre><code class="cs">public class ViewAViewModel : INavigatable
{
    // Allows to preload data before region content has changed
    public void OnNavigatingTo(object parameter)
    {
        
    }

    // Invoked after navigation ends
    public void OnNavigatedTo(object parameter)
    {
        
    }

    // Invoked before leaving
    public void OnNavigatingFrom()
    {
        
    }
}
</code></pre>

<h2 id="iactivatable-and-ideactivatable-navigation-guards">IActivatable and IDeactivatable Navigation Guards<a class="headerlink" href="#iactivatable-and-ideactivatable-navigation-guards" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Allow to cancel navigation (View and/or View model)</p>
<pre><code class="cs">public class ViewAViewModel : IActivatable, IDeactivatable
{
    public Task&lt;bool&gt; CanActivateAsync(object parameter)
    {
        var result = MessageBox.Show(&quot;Activate View A?&quot;, &quot;Activate (VIEWMODEL)&quot;, MessageBoxButton.OKCancel) == MessageBoxResult.OK;
        return Task.FromResult(result);
    }

    public Task&lt;bool&gt; CanDeactivateAsync()
    {
        var result = MessageBox.Show(&quot;Deactivate View A?&quot;, &quot;Deactivate&quot;, MessageBoxButton.OKCancel) == MessageBoxResult.OK;
        return Task.FromResult(result);
    }
}
</code></pre>

<h2 id="iloadedeventlistener">ILoadedEventListener<a class="headerlink" href="#iloadedeventlistener" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Allows to be notifed from ViewModel when view is loaded.</p>
</blockquote>
<pre><code class="cs">public class ShellViewModel : ILoadedEventListener
{
    IRegionManager regionManager;

    public ShellViewModel(IRegionManager regionManager)
    {
        this.regionManager = regionManager;
    }

    public async void OnLoaded(object parameter)
    {
        await regionManager.GetContentRegion(&quot;ContentRegion&quot;).NavigateAsync(typeof(HomeView));
    }
}
</code></pre>

<h2 id="iselectable">ISelectable<a class="headerlink" href="#iselectable" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Allows to select an existing item and not re-create a new item (for example with a tabcontrol). </p>
<p>Example with ItemsRegion. Select a TabITem for a TabControl </p>
<pre><code class="cs">public class MyTabViewModel : ISelectable
{
    public string Title =&gt; &quot;My Tab&quot;;

    public bool IsTarget(Type viewType, object parameter)
    {
       // check the view type or the navigation parameter (id) for example
        return viewType == typeof(MyTabView);
    }
}
</code></pre>

<p>Example with Content Region</p>
<pre><code class="cs">public class PersonDetailsViewModel : BindableBase, INavigatable, ISelectable 
{
    private Person person;
    public Person Person
    {
        get { return person; }
        set { SetProperty(ref person, value); }
    }

    private IRegionManager regionManager;

    private IFakePeopleService fakePeopleService;

    public PersonDetailsViewModel(IRegionManager regionManager, IFakePeopleService fakePeopleService)
    {
        this.regionManager = regionManager;
        this.fakePeopleService = fakePeopleService;
    }

    public void OnNavigatingFrom()
    {

    }

    public void OnNavigatingTo(object parameter)
    {
        int id = (int)parameter;
        var person = fakePeopleService.GetPersonById(id);
        Person = person;
    }

    public void OnNavigatedTo(object parameter)
    {

    }

    // we have a list of active views
    // select the view (note do not use Singleton with IViewLifetimeStrategy for this scenario)
    public bool IsTarget(Type viewType, object parameter)
    {
        if (parameter != null)
        {
            return person.Id == (int)parameter; // pass the id as parameter
        }
        return false;
    }
}
</code></pre>

<h2 id="iviewlifetimestrategy">IViewLifetimeStrategy<a class="headerlink" href="#iviewlifetimestrategy" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Allows to get always the same instance of a view (Singleton) for a region.</p>
</blockquote>
<pre><code class="cs">public class PersonDetailsViewModel : IViewLifetimeStrategy
{
    public StrategyType Strategy =&gt; StrategyType.Singleton;

    // etc.
}
</code></pre>

<h2 id="create-a-bootsrapper">Create a Bootsrapper<a class="headerlink" href="#create-a-bootsrapper" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Example: using MvvmLib.IoC Container (or Unity, StructureMap, etc.)</p>
<pre><code class="cs">public abstract class MvvmLibBootstrapper : BootstrapperBase
{
    protected IInjector container;

    public MvvmLibBootstrapper(IInjector container)
    {
        this.container = container;
    }

    protected override void RegisterRequiredTypes()
    {
        container.RegisterInstance&lt;IInjector&gt;(container);
        container.RegisterSingleton&lt;IEventAggregator, EventAggregator&gt;();
        container.RegisterSingleton&lt;IRegionManager, RegionManager&gt;();
    }

    protected override void SetViewFactory()
    {
        ViewResolver.SetViewFactory((viewType) =&gt; container.GetNewInstance(viewType));
    }

    protected override void SetViewModelFactory()
    {
        ViewModelLocationProvider.SetViewModelFactory((viewModelType) =&gt; container.GetInstance(viewModelType));
    }
}
</code></pre>

<p>The implementation class</p>
<pre><code class="cs">public class Bootstrapper : MvvmLibBootstrapper
{
    public Bootstrapper(IInjector container) 
        : base(container)
    {  }

    protected override Window CreateShell()
    {
        return container.GetInstance&lt;Shell&gt;();
    }

    protected override void RegisterTypes()
    {
        container.RegisterSingleton&lt;IFakePeopleService, FakePeopleService&gt;();
    }
}
</code></pre>

<p>(App)</p>
<p><strong>Replace StartupUri</strong> by the <strong>Startup event</strong></p>
<pre><code class="xml">&lt;Application ...
             Startup=&quot;Application_Startup&quot;&gt;

&lt;/Application&gt;
</code></pre>

<pre><code class="cs">public partial class App : Application
{
    private void Application_Startup(object sender, StartupEventArgs e)
    {
        var bootstrapper = new Bootstrapper(new Injector());
        bootstrapper.Run();
    }
}
</code></pre>

<h2 id="create-a-region-adapter">Create a region Adapter<a class="headerlink" href="#create-a-region-adapter" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<ul>
<li>ItemsRegionAdapter for controls with a collection of items or children (ItemsControl, ListView, TabControl,... StackPanel)</li>
</ul>
<p>Example for a StackPanel</p>
<pre><code class="cs">using System.Windows;
using System.Windows.Controls;
using WpfLib.Navigation;

namespace RegionSample.Adapters
{
    public class StackPanelRegionAdapter : ItemsRegionAdapterBase&lt;StackPanel&gt;
    {
        public override void OnClear(StackPanel control)
        {
            control.Children.Clear();
        }

        public override void OnInsert(StackPanel control, object view, int index)
        {
            if (index &gt;= 0 &amp;&amp; index &lt;= control.Children.Count)
            {
                control.Children.Insert(index, (UIElement)view);
            }
        }

        public override void OnRemoveAt(StackPanel control, int index)
        {
            if (index &gt;= 0 &amp;&amp; index &lt; control.Children.Count)
            {
                control.Children.RemoveAt(index);
            }
        }
    }
}
</code></pre>

<p>Then register this adapter (on Application Startup)</p>
<pre><code class="cs">public class Bootstrapper : WpfLibBootstrapper
{
    protected override Window CreateShell()
    {
        return container.GetInstance&lt;Shell&gt;();
    }

    protected override void RegisterTypes()
    {
            container.RegisterSingleton&lt;ViewBViewModel&gt;();
    }

    protected override void RegisterCustomRegionAdapters()
    {
        RegionAdapterContainer.RegisterAdapter(new StackPanelRegionAdapter()); // &lt;===
    }
}
</code></pre>

<p>And use it</p>
<pre><code class="xml">&lt;StackPanel nav:RegionManager.ItemsRegion=&quot;{x:Static local:RegionNames.StackPanelRegionName}&quot;&gt;&lt;/StackPanel&gt;
</code></pre>

<h2 id="bindableobject">BindableObject<T><a class="headerlink" href="#bindableobject" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Allows to bind a value or object to <code>Value</code> dependency property and be notified on value changed.</p>
</blockquote>
<p>Example 1:</p>
<pre><code class="cs">var bindableObject = new BindableObject&lt;string&gt;();
bindableObject.PropertyChanged += (s, e) =&gt;
{
    MessageBox.Show(e.PropertyName);
};
bindableObject.Value = &quot;my value&quot;;
</code></pre>

<p>Example 2:</p>
<p>binding in Xaml</p>
<pre><code class="xml">&lt;TextBox Text=&quot;{Binding Value, UpdateSourceTrigger=PropertyChanged}&quot;&gt;&lt;/TextBox&gt;
</code></pre>

<pre><code class="cs">var bindableObject = new BindableObject&lt;string&gt;();
bindableObject.PropertyChanged += (s, e) =&gt;
{
    MessageBox.Show(e.PropertyName);
};
this.DataContext = bindableObject;
</code></pre>


                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
MvvmLib Documentation. &copy;2019. <a href='https://github.com/romagny13/MvvmLib' target='_blank'>GitHub</a> | <a href='https://www.nuget.org/profiles/romagny13' target='_blank'>NuGet</a>.
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="js/jquery-2.1.1.min.js"></script>
    <script src="js/modernizr-2.8.3.min.js"></script>
    <script src="js/highlight.pack.js"></script>
    <script src="js/theme.js"></script>

</body>
</html>
