<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>MvvmLib.Wpf - MvvmLib Documentation</title>
    <link rel="shortcut icon" href="favicon.ico">
    <link rel="stylesheet" href="css/theme.css" type="text/css" />
    <link rel="stylesheet" href="css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="css/styles/vs.css">
    <link rel="stylesheet" href="css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="index.htm"><i class="fa fa-home"></i> MvvmLib Documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="index.htm">Home</a>
</li>

<li class="tocentry"><a href="Mvvm.htm">MvvmLib.Core</a>
</li>
<li class="tocentry"><a href="DI.htm">MvvmLib.IoC</a>
</li>
<li class="tocentry current"><a class="current" href="Navigation.htm">MvvmLib.Wpf</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#mvvmlib.wpf-navigation-net-4.5">MvvmLib.Wpf (Navigation) [net 4.5]</a></li>

<li class="tocentry"><a href="#viewmodellocator">ViewModelLocator</a></li>

<li class="tocentry"><a href="#navigationsource-and-contentcontrolnavigationsource">NavigationSource and ContentControlNavigationSource</a></li>

<li class="tocentry"><a href="#inavigatable">INavigatable</a></li>

<li class="tocentry"><a href="#navigation-guards-icanactivate-icandeactivate">Navigation Guards (ICanActivate, ICanDeactivate)</a></li>

<li class="tocentry"><a href="#iselectable-with-navigationsource">ISelectable with NavigationSource</a></li>

<li class="tocentry"><a href="#sharedsource-for-itemscontrol-listbox-tabcontrol-etc.">SharedSource for ItemsControl, ListBox, TabControl, etc.</a></li>

<li class="tocentry"><a href="#iisselected-iselectable-and-selectionchangedbehavior">IIsSelected, ISelectable and SelectionChangedBehavior</a></li>

<li class="tocentry"><a href="#create-a-bootsrapper">Create a Bootsrapper</a></li>

<li class="tocentry"><a href="#animatablecontentcontrol">AnimatableContentControl</a></li>

<li class="tocentry"><a href="#transitioningcontentcontrol">TransitioningContentControl</a></li>

<li class="tocentry"><a href="#transitioningitemscontrol">TransitioningItemsControl</a></li>

</ul>
<li class="tocentry"><a href="Navigation_Uwp.htm">MvvmLib.Windows</a>
</li>
<li class="tocentry"><a href="Navigation_XF.htm">MvvmLib.XF</a>
</li>
<li class="tocentry"><a href="Adaptive.htm">MvvmLib.Adaptive.Wpf</a>
</li>
<li class="tocentry"><a href="Adaptive_Uwp.htm">MvvmLib.Adaptive.Windows</a>
</li>
<li class="tocentry"><a href="LICENSE.htm">LICENSE</a>
</li>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="index.htm">MvvmLib Documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="index.htm">Home</a></li> / <li><a href="Navigation.htm">MvvmLib.Wpf</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h2 id="mvvmlib.wpf-navigation-net-4.5">MvvmLib.Wpf (Navigation) [net 4.5]<a class="headerlink" href="#mvvmlib.wpf-navigation-net-4.5" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<ul>
<li><strong>NavigationSource</strong>: navigation for <em>ContentControl</em></li>
<li><strong>SharedSource</strong>: for <em>ItemsControl</em>, <em>Selector</em>, etc.</li>
<li><strong>AnimatableContentControl</strong>, <strong>TransitioningContentControl</strong>, <strong>TransitioningItemsControl</strong>: allow to animate content</li>
<li><strong>NavigationManager</strong>: allows to manage NavigationSources and SharedSources</li>
<li><strong>INavigatable</strong>: allows views and <em>view models</em> to be notified on navigate</li>
<li><strong>ICanActivate</strong>, <strong>ICanDeactivate</strong>: allow to cancel navigation</li>
<li><strong>IIsSelected</strong>, <strong>ISelectable</strong>, <strong>SelectionChangedBehavior</strong>: allow to select a view </li>
<li><strong>ViewModelLocator</strong>: allows to <strong>resolve ViewModel</strong> for <strong>views</strong></li>
<li><strong>BootstrapperBase</strong>: base class for Bootstrapper</li>
</ul>
<h2 id="viewmodellocator">ViewModelLocator<a class="headerlink" href="#viewmodellocator" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Allows to resolve ViewModels for Views with <strong>ResolveViewModel</strong>. </p>
</blockquote>
<p>Default <strong>convention</strong>:</p>
<ul>
<li>Views in <code>Views</code> namespace</li>
<li>View models in <code>ViewModels</code> namespace</li>
<li>
View model name: 
<ul>
<li><em>view name + &quot;ViewModel&quot;</em> (example: ShellViewModel for Shell)</li>
<li>Or if the view name ends by &quot;View&quot;: <em>view name + &quot;Model&quot;</em> (example: NavigationViewModel for NavigationView)</li>
</ul>
</li>
</ul>
<h3 id="change-the-convention">Change the convention<a class="headerlink" href="#change-the-convention" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Example with &quot;View&quot; and &quot;ViewModel&quot; namespaces</p>
<pre><code class="cs">ViewModelLocationProvider.ChangeConvention((viewType) =&gt;
{
    var viewAssemblyName = viewType.GetTypeInfo().Assembly.FullName;

    var viewName = viewType.FullName;
    viewName = viewName.Replace(&quot;.View.&quot;, &quot;.ViewModel.&quot;);
    var suffix = viewName.EndsWith(&quot;View&quot;) ? &quot;Model&quot; : &quot;ViewModel&quot;;
    var viewModelName = string.Format(CultureInfo.InvariantCulture, &quot;{0}{1}, {2}&quot;, viewName, suffix, viewAssemblyName);

    var viewModelType = Type.GetType(viewModelName);
    return viewModelType;
});
</code></pre>

<h3 id="register-a-custom-view-model-for-a-view">Register a custom View Model for a view<a class="headerlink" href="#register-a-custom-view-model-for-a-view" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>For example: the view model for a ViewA is not ViewAViewModel but MyCustomViewAViewModel</p>
<pre><code class="cs">ViewModelLocationProvider.RegisterCustom(typeof(ViewA), typeof(MyCustomViewAViewModel));
</code></pre>

<h3 id="resolveviewmodel-attached-property-window-usercontrol">ResolveViewModel Attached property (Window, UserControl)<a class="headerlink" href="#resolveviewmodel-attached-property-window-usercontrol" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Allows to resolve the view model of the Views. Example:</p>
<pre><code class="xml">&lt;Window x:Class=&quot;Sample.Views.Shell&quot;
        ...
         xmlns:nav=&quot;http://mvvmlib.com/&quot;
         nav:ViewModelLocator.ResolveViewModel=&quot;True&quot;&gt;
</code></pre>

<p><strong>Note</strong>: NavigationSources and Shared Sources resolve automatically the ViewModel with the ViewModelLocator. So, using &quot;ResolveViewModel&quot; attached property is rarely required.</p>
<h2 id="navigationsource-and-contentcontrolnavigationsource">NavigationSource and ContentControlNavigationSource<a class="headerlink" href="#navigationsource-and-contentcontrolnavigationsource" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<h3 id="navigationsource">NavigationSource<a class="headerlink" href="#navigationsource" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>The NavigationSource is not linked to the UI. So its possible to create all the navigation sources required by the application at Startup.</p>
<p>Example: Creating some Navigation sources in ShellViewModel</p>
<pre><code class="cs">public class ShellViewModel
{
    public NavigationSource Navigation { get; }

    public ShellViewModel()
    {     
        Navigation = NavigationManager.CreateNavigationSource(&quot;Main&quot;);

        NavigationManager.CreateNavigationSource(&quot;Details&quot;);

        NavigationManager.CreateNavigationSource(&quot;AnimationSample&quot;);

        NavigationManager.CreateNavigationSource(&quot;HistorySample&quot;);
    }
}
</code></pre>

<p>Get a NavigationSource:</p>
<pre><code class="cs">var navigation = NavigationManager.GetNavigationSource(&quot;Main&quot;);
</code></pre>

<p>Or </p>
<pre><code class="cs">var navigation = NavigationManager.GetOrCreateNavigationSource(&quot;Main&quot;);
</code></pre>

<p>Bind the NavigationSource <strong>Current</strong> property to a <strong>ContentControl</strong></p>
<pre><code class="xml">&lt;ContentControl Content=&quot;{Binding Navigation.Current}&quot; /&gt;
</code></pre>

<p>The NavigationSource provide some quick Commands</p>
<pre><code class="xml">&lt;!--Navigate command --&gt;
&lt;Button Content=&quot;View A&quot; Command=&quot;{Binding Navigation.NavigateCommand}&quot; CommandParameter=&quot;{x:Type views:ViewA}&quot; /&gt;

&lt;!--GoBack command --&gt;
&lt;Button Content=&quot;Go Back&quot; Command=&quot;{Binding Navigation.GoBackCommand}&quot; /&gt;

&lt;!--GoForward command --&gt;
&lt;Button Content=&quot;Go Forward&quot; Command=&quot;{Binding Navigation.GoForwardCommand}&quot; /&gt;

&lt;!--NavigateToRoot command --&gt;
&lt;Button Content=&quot;Root&quot; Command=&quot;{Binding Navigation.NavigateToRootCommand}&quot; /&gt;
</code></pre>

<h3 id="contentcontrolnavigationsource">ContentControlNavigationSource<a class="headerlink" href="#contentcontrolnavigationsource" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Inherits from NavigationSource and updates directly the content of the ContentControl.</p>
<pre><code class="xml">&lt;ContentControl mvvmLib:NavigationManager.SourceName=&quot;Main&quot; /&gt;
</code></pre>

<p>The namespace:</p>
<pre><code class="xml">&lt;UserControl ...
            xmlns:mvvmLib=&quot;http://mvvmlib.com/&quot;&gt;
</code></pre>

<h2 id="inavigatable">INavigatable<a class="headerlink" href="#inavigatable" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Allows to notify ViewModel with parameter</p>
</blockquote>
<ul>
<li><strong>OnNavigatingFrom</strong></li>
<li><strong>OnNavigatingTo</strong></li>
<li><strong>OnNavigatedTo</strong></li>
</ul>
<pre><code class="cs">public class ViewAViewModel : INavigatable
{
    public void OnNavigatingTo(object parameter)
    {

    }

    public void OnNavigatedTo(object parameter)
    {

    }

    public void OnNavigatingFrom()
    {

    }
}
</code></pre>

<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Method</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>NavigateAsync</td>
	<td>Allows to navigate to a view or view model (with DataTemplate) (parameters: source type, parameter)</td>
</tr>
<tr>
	<td>GoBackAsync</td>
	<td>Allows to go to the previous view</td>
</tr>
<tr>
	<td>GoForwardAsync</td>
	<td>Allows to go the next view</td>
</tr>
<tr>
	<td>NavigateToRootAsync</td>
	<td>Allows to navigate to the first view/ root view</td>
</tr>
<tr>
	<td>RedirectAsync</td>
	<td>allows to redirect to a view and do not add/remove current page from history</td>
</tr>
</tbody>
</table>
<pre><code class="cs">var  navigation = NavigationManager.CreateNavigationSource(&quot;Main&quot;);

await navigation.NavigateAsync(typeof(ViewA));

// with parameter
await navigation.NavigateAsync(typeof(ViewA), &quot;My parameter&quot;);

// GoBack
await navigation.GoBackAsync();

// GoForward
await navigation.GoForwardAsync();

// Navigate to root
await navigation.NavigateToRootAsync();
</code></pre>

<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Property</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>History</td>
	<td>Navigation History with notification on add and remove entry</td>
</tr>
<tr>
	<td>CanGoBack</td>
	<td>Returns true if back stack history have more then one entry</td>
</tr>
<tr>
	<td>CanGoForward</td>
	<td>Returns true if forward stack history have one or more entries</td>
</tr>
</tbody>
</table>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Event</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>CanGoBackChanged</td>
	<td>Invoked after can go back changed</td>
</tr>
<tr>
	<td>CanGoForwardChanged</td>
	<td>Invoked after can go forward changed</td>
</tr>
<tr>
	<td>Navigating</td>
	<td>Invoked before navigation starts</td>
</tr>
<tr>
	<td>Navigated</td>
	<td>Invoked after navigation ends</td>
</tr>
<tr>
	<td>NavigatingFailed</td>
	<td>Invoked after navigation was cancelled</td>
</tr>
</tbody>
</table>
<h2 id="navigation-guards-icanactivate-icandeactivate">Navigation Guards (ICanActivate, ICanDeactivate)<a class="headerlink" href="#navigation-guards-icanactivate-icandeactivate" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Useful when the user want to leave a page or close a tabitem for example.</p>
<pre><code class="cs">public class ViewAViewModel : ICanActivate, ICanDeactivate
{

    public Task&lt;bool&gt; CanActivateAsync(object parameter)
    {
        var result = MessageBox.Show(&quot;Can activate?&quot;, &quot;Question&quot;, MessageBoxButton.OKCancel) == MessageBoxResult.OK;
        return Task.FromResult(result);
    }

    public Task&lt;bool&gt; CanDeactivateAsync()
    {
        var result = MessageBox.Show(&quot;Can deactivate?&quot;, &quot;Question&quot;, MessageBoxButton.OKCancel) == MessageBoxResult.OK;
        return Task.FromResult(result);
    }
}
</code></pre>

<h2 id="iselectable-with-navigationsource">ISelectable with NavigationSource<a class="headerlink" href="#iselectable-with-navigationsource" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Allows to use &quot;same view&quot; multiple times. For example in a Master/ details scenario, the details view is used for displaying each user.</p>
<pre><code class="cs">public class PersonDetailsViewModel : BindableBase, ISelectable 
{
    private Person person;
    public Person Person
    {
        get { return person; }
        set { SetProperty(ref person, value); }
    }

    // etc.

    public bool IsTarget(Type viewType, object parameter)
    {
        if (parameter != null)
            return person.Id == (int)parameter;
        
        return false;
    }
}
</code></pre>

<h2 id="sharedsource-for-itemscontrol-listbox-tabcontrol-etc.">SharedSource for ItemsControl, ListBox, TabControl, etc.<a class="headerlink" href="#sharedsource-for-itemscontrol-listbox-tabcontrol-etc." title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Provides an Items collection that implements INotifyCollectionChanged, a SelectedItem and more to quickly bind sources... add, remove, replace, move items, select an item by SelectedIndex or SelectedItem, etc. INotifyCollectionChanged and INotifyPropertyChanged do the work for the UI.</p>
<pre><code class="cs">public class ViewAViewModel
{
    public SharedSource&lt;ItemDetailsViewModel&gt; DetailsSource { get; }

    public ICommand AddCommand { get; }

    public  ViewAViewModel()
    {

        // empty
        // DetailsSource = NavigationManager.GetOrCreateSharedSource&lt;MyItemDetailsViewModel&gt;();

        // or with data at initialization
        DetailsSource = NavigationManager.GetOrCreateSharedSource&lt;MyItemDetailsViewModel&gt;().With(new List&lt;MyItemDetailsViewModel&gt;
        {
            new ItemDetailsViewModel(new Item { Name = &quot;Item.1&quot; }),
            new ItemDetailsViewModel(new Item { Name = &quot;Item.2&quot; })
        });

        AddCommand = new RelayCommand(Add);
    }

    private async void Add()
    {
        await DetailsSource.Items.AddAsync(new ItemDetailsViewModel(new Item { Name = $&quot;Item.{DetailsSource.Items.Count + 1}&quot; }));
    }
}
</code></pre>

<p>Bind the source to controls:</p>
<p>ItemsControl</p>
<pre><code class="xml">&lt;ItemsControl ItemsSource=&quot;{Binding DetailsSource.Items}&quot; /&gt;
</code></pre>

<p>Selector (ListBox, TabControl, etc.) :</p>
<pre><code class="xml">&lt;ListView ItemsSource=&quot;{Binding DetailsSource.Items}&quot; SelectedItem=&quot;{Binding DetailsSource.SelectedItem}&quot; /&gt;
</code></pre>

<pre><code class="xml">&lt;TabControl ItemsSource=&quot;{Binding DetailsSource.Items}&quot;  SelectedItem=&quot;{Binding DetailsSource.SelectedItem}&quot;&gt;
    &lt;TabControl.ItemTemplate&gt;
        &lt;DataTemplate&gt;
            &lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;
                &lt;TextBlock Text=&quot;{Binding Item.Name}&quot; Margin=&quot;20,0&quot;/&gt;
                &lt;Button Content=&quot;X&quot; 
                        Command=&quot;{Binding CloseCommand}&quot; 
                        HorizontalAlignment=&quot;Right&quot; Height=&quot;20&quot; Width=&quot;20&quot; 
                        VerticalAlignment=&quot;Top&quot; /&gt;
            &lt;/StackPanel&gt;
        &lt;/DataTemplate&gt;
    &lt;/TabControl.ItemTemplate&gt;
&lt;/TabControl&gt;
</code></pre>

<p><strong>Tip</strong>: Use an interface (IDetailViewModel for example) for TabControl that can display multiple views.</p>
<pre><code class="cs">public interface IDetailsViewModel
{
    string Title { get; set; }
}

public abstract class DetailsViewModelBase : BindableBase, IDetailsViewModel
{
    protected string title;
    public string Title
    {
        get { return title; }
        set { SetProperty(ref title, value); }
    }

    public SharedSource&lt;IDetailsViewModel&gt; DetailsSource { get; }

    public DetailsViewModelBase()
    {
        DetailsSource = SharedSourceManager.GetOrCreate&lt;IDetailsViewModel&gt;();
    }
}

public class ViewAViewModel : DetailsViewModelBase, ICanDeactivate
{
    // ...
}
public class ViewBViewModel : DetailsViewModelBase
{
    // ...
}
</code></pre>

<h2 id="iisselected-iselectable-and-selectionchangedbehavior">IIsSelected, ISelectable and SelectionChangedBehavior<a class="headerlink" href="#iisselected-iselectable-and-selectionchangedbehavior" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>We could bind easly the SelectedItem of the SharedSource to a Selector.</p>
<p><strong>IIsSelected</strong> allows to be notified from ViewModel of selection.</p>
<pre><code class="cs">public class ViewCViewModel : DetailsViewModelBase, IIsSelected
{
    private bool isSelected;
    public bool IsSelected
    {
        get { return isSelected; }
        set
        {
            SetProperty(ref isSelected, value);
            if (isSelected)
                Title = &quot;ACTIVE&quot;;
            else
                Title = &quot;NOT Active&quot;;
        }
    }
}
</code></pre>

<p><strong>ISelectable</strong> allows for example to select a tabitem opened</p>
<pre><code class="cs">public class ViewDViewModel : DetailsViewModelBase, ISelectable
{
    public bool IsTarget(Type sourceType, object parameter)
    {
        return sourceType == typeof(ViewDViewModel);
    }
}
</code></pre>

<p><strong>SelectionChangedBehavior</strong> allow to notify all ViewModels (that implements IIsSelected) for a ListView with selection mode Multiple for example.</p>
<pre><code class="xml">&lt;ListView ItemsSource=&quot;{Binding DetailsSource.Items}&quot;
          SelectedItem=&quot;{Binding DetailsSource.SelectedItem}&quot;
          mvvmLib:NavigationInteraction.SelectionChangedBehavior=&quot;True&quot;
          SelectionMode=&quot;Multiple&quot; /&gt;
</code></pre>

<h2 id="create-a-bootsrapper">Create a Bootsrapper<a class="headerlink" href="#create-a-bootsrapper" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Example: using MvvmLib.IoC Container (or Unity, StructureMap, etc.)</p>
<pre><code class="cs">public abstract class MvvmLibBootstrapper : BootstrapperBase
{
    protected IInjector container;

    public MvvmLibBootstrapper(IInjector container)
    {
        this.container = container;
    }

    protected override void RegisterRequiredTypes()
    {
        container.RegisterInstance&lt;IInjector&gt;(container);
        container.RegisterSingleton&lt;IEventAggregator, EventAggregator&gt;();
    }

    protected override void SetViewFactory()
    {
        ViewResolver.SetViewFactory((viewType) =&gt; container.GetNewInstance(viewType));
    }

    protected override void SetViewModelFactory()
    {
        ViewModelLocationProvider.SetViewModelFactory((viewModelType) =&gt; container.GetInstance(viewModelType));
    }
}
</code></pre>

<p>The implementation class</p>
<pre><code class="cs">public class Bootstrapper : MvvmLibBootstrapper
{
    public Bootstrapper(IInjector container) 
        : base(container)
    {  }

    protected override Window CreateShell()
    {
        return container.GetInstance&lt;Shell&gt;();
    }

    protected override void RegisterTypes()
    {
        container.RegisterSingleton&lt;IFakePeopleService, FakePeopleService&gt;();
    }
}
</code></pre>

<p>(App)</p>
<p><strong>Replace StartupUri</strong> by the <strong>Startup event</strong></p>
<pre><code class="xml">&lt;Application ...
             Startup=&quot;Application_Startup&quot;&gt;

&lt;/Application&gt;
</code></pre>

<pre><code class="cs">public partial class App : Application
{
    private void Application_Startup(object sender, StartupEventArgs e)
    {
        var bootstrapper = new Bootstrapper(new Injector());
        bootstrapper.Run();
    }
}
</code></pre>

<h2 id="animatablecontentcontrol">AnimatableContentControl<a class="headerlink" href="#animatablecontentcontrol" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Content Control that allows to animate on content change. </p>
</blockquote>
<p>2 Storyboards : </p>
<ul>
<li>EntranceAnimation </li>
<li>ExitAnimation</li>
<li>Simultaneous (boolean) allow to play simultaneously the animations.</li>
</ul>
<p>EntranceAnimation: Target &quot;CurrentContentPresenter&quot; 
ExitAnimation: Target &quot;CurrentContentPresenter&quot; or with Simulatenous &quot;PreviousContentPresenter&quot;</p>
<pre><code class="xml">&lt;mvvmLib:AnimatableContentControl mvvmLib:NavigationManager.SourceName=&quot;Main&quot;&gt;
    &lt;mvvmLib:AnimatableContentControl.EntranceAnimation&gt;
        &lt;Storyboard&gt;
            &lt;DoubleAnimation Storyboard.TargetName=&quot;CurrentContentPresenter&quot; 
                             Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)&quot;
                             From=&quot;400&quot; To=&quot;0&quot; Duration=&quot;0:0:0.4&quot;  /&gt;
        &lt;/Storyboard&gt;
    &lt;/mvvmLib:AnimatableContentControl.EntranceAnimation&gt;
    &lt;mvvmLib:AnimatableContentControl.ExitAnimation&gt;
        &lt;Storyboard&gt;
            &lt;DoubleAnimation Storyboard.TargetName=&quot;CurrentContentPresenter&quot; 
                             Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)&quot;
                             From=&quot;0&quot; To=&quot;400&quot; Duration=&quot;0:0:0.4&quot;  /&gt;
        &lt;/Storyboard&gt;
    &lt;/mvvmLib:AnimatableContentControl.ExitAnimation&gt;
&lt;/mvvmLib:AnimatableContentControl&gt;
</code></pre>

<p>Or Simulatneous</p>
<pre><code class="xml">  &lt;mvvmLib:AnimatableContentControl Content=&quot;{Binding Navigation.Current}&quot; 
                                    Simultaneous=&quot;True&quot;
                                    IsCancelled=&quot;{Binding IsCancelled}&quot;&gt;
    &lt;mvvmLib:AnimatableContentControl.ExitAnimation&gt;
        &lt;Storyboard&gt;
            &lt;DoubleAnimation  Storyboard.TargetName=&quot;PreviousContentPresenter&quot;
                                Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)&quot;
                                From=&quot;0&quot; To=&quot;{Binding ElementName=ThisControl,Path=ActualWidth,FallbackValue=400}&quot; 
                                Duration=&quot;{Binding ElementName=DuractionComboBox,Path=SelectedItem}&quot;&gt;
                &lt;DoubleAnimation.EasingFunction&gt;
                    &lt;SineEase EasingMode=&quot;EaseInOut&quot; /&gt;
                &lt;/DoubleAnimation.EasingFunction&gt;
            &lt;/DoubleAnimation&gt;
        &lt;/Storyboard&gt;
    &lt;/mvvmLib:AnimatableContentControl.ExitAnimation&gt;
    &lt;mvvmLib:AnimatableContentControl.EntranceAnimation&gt;
        &lt;Storyboard&gt;
            &lt;DoubleAnimation  Storyboard.TargetName=&quot;CurrentContentPresenter&quot;
                                Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)&quot;
                                From=&quot;{Binding ElementName=ThisControl,Path=ActualWidth,FallbackValue=400}&quot; To=&quot;0&quot; 
                                Duration=&quot;{Binding ElementName=DuractionComboBox,Path=SelectedItem}&quot;&gt;
                &lt;DoubleAnimation.EasingFunction&gt;
                    &lt;SineEase EasingMode=&quot;EaseInOut&quot; /&gt;
                &lt;/DoubleAnimation.EasingFunction&gt;
            &lt;/DoubleAnimation&gt;
        &lt;/Storyboard&gt;
    &lt;/mvvmLib:AnimatableContentControl.EntranceAnimation&gt;
&lt;/mvvmLib:AnimatableContentControl&gt;
</code></pre>

<h2 id="transitioningcontentcontrol">TransitioningContentControl<a class="headerlink" href="#transitioningcontentcontrol" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Allows to play a transition on loaded.</p>
</blockquote>
<p>2 Storyboards:</p>
<ul>
<li>EntranceTransition: played when control loaded (or explicitly with &quot;DoEnter&quot;)</li>
<li>ExitTransition: played explicitly with &quot;DoLeave&quot; or IsLeaving dependency property (for example played when the user click on a tab close button)</li>
</ul>
<p>Other methods:</p>
<ul>
<li>CancelTransition</li>
<li>Reset: reset the render transform property and opacity + cancel transition</li>
</ul>
<pre><code class="xml">&lt;mvvmLib:TransitioningContentControl x:Name=&quot;TransitioningContentControl1&quot; Margin=&quot;0,20&quot;&gt;
        &lt;mvvmLib:TransitioningContentControl.EntranceTransition&gt;
            &lt;Storyboard&gt;
                &lt;DoubleAnimation Storyboard.TargetName=&quot;ContentPresenter&quot; 
                                    Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)&quot; 
                                    From=&quot;0&quot; To=&quot;1&quot; Duration=&quot;0:0:0.6&quot;&gt;
                    &lt;DoubleAnimation.EasingFunction&gt;
                        &lt;ExponentialEase EasingMode=&quot;EaseInOut&quot;/&gt;
                    &lt;/DoubleAnimation.EasingFunction&gt;
                &lt;/DoubleAnimation&gt;
            &lt;/Storyboard&gt;
        &lt;/mvvmLib:TransitioningContentControl.EntranceTransition&gt;
        &lt;mvvmLib:TransitioningContentControl.ExitTransition&gt;
            &lt;Storyboard&gt;
                &lt;DoubleAnimation Storyboard.TargetName=&quot;ContentPresenter&quot; 
                                    Storyboard.TargetProperty=&quot;(UIElement.Opacity)&quot; 
                                    From=&quot;1&quot; To=&quot;0&quot; Duration=&quot;0:0:2&quot;/&gt;
            &lt;/Storyboard&gt;
&lt;/mvvmLib:TransitioningContentControl.ExitTransition&gt;
</code></pre>

<h2 id="transitioningitemscontrol">TransitioningItemsControl<a class="headerlink" href="#transitioningitemscontrol" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>ItemsControl that allows to animate on item insertion and deletion. </p>
</blockquote>
<p>The &quot;ControlledAnimation&quot; avoid to set the target and the target property of the storyboard. The TargetPropertyType is a shortcut. But it's possible to target explicitly the target property of the storyboard with &quot;TargetProperty&quot; dependency property.</p>
<pre><code class="xml">&lt;mvvmLib:TransitioningItemsControl ItemsSource=&quot;{Binding MyItems}&quot; 
                                   TransitionClearHandling=&quot;Transition&quot;
                                   IsCancelled=&quot;{Binding IsCancelled}&quot;&gt;
    &lt;mvvmLib:TransitioningItemsControl.EntranceAnimation&gt;
        &lt;mvvmLib:ParallelAnimation&gt;

            &lt;mvvmLib:ControlledAnimation TargetPropertyType=&quot;TranslateX&quot;&gt;
                &lt;DoubleAnimation From=&quot;200&quot; To=&quot;0&quot;  Duration=&quot;0:0:2&quot;/&gt;
            &lt;/mvvmLib:ControlledAnimation&gt;

        &lt;/mvvmLib:ParallelAnimation&gt;
    &lt;/mvvmLib:TransitioningItemsControl.EntranceAnimation&gt;

    &lt;mvvmLib:TransitioningItemsControl.ExitAnimation&gt;
        &lt;mvvmLib:ParallelAnimation&gt;
            &lt;mvvmLib:ControlledAnimation TargetPropertyType=&quot;TranslateX&quot;&gt;
                &lt;DoubleAnimation From=&quot;0&quot; To=&quot;200&quot; Duration=&quot;0:0:2&quot;/&gt;
            &lt;/mvvmLib:ControlledAnimation&gt;
        &lt;/mvvmLib:ParallelAnimation&gt;
    &lt;/mvvmLib:TransitioningItemsControl.ExitAnimation&gt;
&lt;/mvvmLib:TransitioningItemsControl&gt;
</code></pre>


                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
MvvmLib Documentation. &copy;2019. <a href='https://github.com/romagny13/MvvmLib' target='_blank'>GitHub</a> | <a href='https://www.nuget.org/profiles/romagny13' target='_blank'>NuGet</a>.
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="js/jquery-2.1.1.min.js"></script>
    <script src="js/modernizr-2.8.3.min.js"></script>
    <script src="js/highlight.pack.js"></script>
    <script src="js/theme.js"></script>

</body>
</html>
