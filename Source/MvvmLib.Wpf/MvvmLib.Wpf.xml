<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MvvmLib.Wpf</name>
    </assembly>
    <members>
        <member name="T:MvvmLib.Navigation.IItemsRegionAdapter">
            <summary>
            The items region adapter contract.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.IItemsRegionAdapter.TargetType">
            <summary>
            The type of the control used by the region adapter.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.IItemsRegionAdapter.OnInsert(System.Object,System.Object,System.Int32)">
            <summary>
            Invoked on insert new content.
            </summary>
            <param name="control">The control</param>
            <param name="content">The content</param>
            <param name="index">The index</param>
        </member>
        <member name="M:MvvmLib.Navigation.IItemsRegionAdapter.OnRemoveAt(System.Object,System.Int32)">
            <summary>
            Invoked on remove element.
            </summary>
            <param name="control">The control</param>
            <param name="index">The index</param>
        </member>
        <member name="M:MvvmLib.Navigation.IItemsRegionAdapter.OnClear(System.Object)">
            <summary>
            Invoked on clear all elements.
            </summary>
            <param name="control">The control</param>
        </member>
        <member name="T:MvvmLib.Navigation.ItemsControlAdapter">
            <summary>
            The <see cref="T:System.Windows.Controls.ItemsControl"/> adapter.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsControlAdapter.OnInsert(System.Windows.Controls.ItemsControl,System.Object,System.Int32)">
            <summary>
            Invoked on insert new content.
            </summary>
            <param name="control">The control</param>
            <param name="content">The content</param>
            <param name="index">The index</param>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsControlAdapter.OnRemoveAt(System.Windows.Controls.ItemsControl,System.Int32)">
            <summary>
            Invoked on remove element.
            </summary>
            <param name="control">The control</param>
            <param name="index">The index</param>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsControlAdapter.OnClear(System.Windows.Controls.ItemsControl)">
            <summary>
            Invoked on clear all elements.
            </summary>
            <param name="control">The control</param>
        </member>
        <member name="T:MvvmLib.Navigation.ItemsRegionAdapterBase`1">
            <summary>
            The region adapter base class.
            </summary>
            <typeparam name="T">The type of the control used by the region adapter</typeparam>
        </member>
        <member name="P:MvvmLib.Navigation.ItemsRegionAdapterBase`1.TargetType">
            <summary>
            The type of the control used by the region adapter.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsRegionAdapterBase`1.OnInsert(`0,System.Object,System.Int32)">
            <summary>
            Invoked on insert new content.
            </summary>
            <param name="control">The control</param>
            <param name="content">The content</param>
            <param name="index">The index</param>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsRegionAdapterBase`1.OnRemoveAt(`0,System.Int32)">
            <summary>
            Invoked on remove element.
            </summary>
            <param name="control">The control</param>
            <param name="index">The index</param>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsRegionAdapterBase`1.OnClear(`0)">
            <summary>
            Invoked on clear all elements.
            </summary>
            <param name="control">The control</param>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsRegionAdapterBase`1.OnInsert(System.Object,System.Object,System.Int32)">
            <summary>
            Invoked on insert new content.
            </summary>
            <param name="control">The control</param>
            <param name="content">The content</param>
            <param name="index">The index</param>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsRegionAdapterBase`1.OnRemoveAt(System.Object,System.Int32)">
            <summary>
            Invoked on remove element.
            </summary>
            <param name="control">The control</param>
            <param name="index">The index</param>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsRegionAdapterBase`1.OnClear(System.Object)">
            <summary>
            Invoked on clear all elements.
            </summary>
            <param name="control">The control</param>
        </member>
        <member name="T:MvvmLib.Navigation.TabControlAdapter">
            <summary>
            The <see cref="T:System.Windows.Controls.TabControl"/> adapter.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.TabControlAdapter.OnInsert(System.Windows.Controls.TabControl,System.Object,System.Int32)">
            <summary>
            Invoked on insert new content.
            </summary>
            <param name="control">The control</param>
            <param name="content">The content</param>
            <param name="index">The index</param>
        </member>
        <member name="M:MvvmLib.Navigation.TabControlAdapter.OnRemoveAt(System.Windows.Controls.TabControl,System.Int32)">
            <summary>
            Invoked on remove element.
            </summary>
            <param name="control">The control</param>
            <param name="index">The index</param>
        </member>
        <member name="M:MvvmLib.Navigation.TabControlAdapter.OnClear(System.Windows.Controls.TabControl)">
            <summary>
            Invoked on clear all elements.
            </summary>
            <param name="control">The control</param>
        </member>
        <member name="T:MvvmLib.Navigation.BootstrapperBase">
            <summary>
            The Bootstrapper base class.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.BootstrapperBase.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.BootstrapperBase.CreateLogger">
            <summary>
            Creates the logger used by the bootstrapper class.
            </summary>
            <returns>The logger</returns>
        </member>
        <member name="M:MvvmLib.Navigation.BootstrapperBase.RegisterRequiredTypes">
            <summary>
            Registers library services.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.BootstrapperBase.RegisterTypes">
            <summary>
            Registers application dependencies.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.BootstrapperBase.CreateShell">
            <summary>
            Creates the Main Window of the Application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvvmLib.Navigation.BootstrapperBase.ConfigureServiceLocator">
            <summary>
            Configures the service locator (Microsoft Common Service Locator) if used.
            </summary>
            <example>ServiceLocator.SetLocatorProvider(() => new MvvmLibServiceLocatorAdapter(injector));</example>
        </member>
        <member name="M:MvvmLib.Navigation.BootstrapperBase.ConfigureContainer">
            <summary>
            Used to configure the IoC Container.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.BootstrapperBase.SetViewFactory">
            <summary>
            Sets the View Factory.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.BootstrapperBase.SetViewModelFactory">
            <summary>
            Sets the View Model Factory.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.BootstrapperBase.InitializeShell(System.Windows.Window)">
            <summary>
            Sets the Application Current Window to the shell.
            </summary>
            <param name="shell">The Window created with <see cref="M:MvvmLib.Navigation.BootstrapperBase.CreateShell"/></param>
        </member>
        <member name="M:MvvmLib.Navigation.BootstrapperBase.RegisterCustomRegionAdapters">
            <summary>
            Registers custom region adapters.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.BootstrapperBase.OnInitialized">
            <summary>
            Called after the bootstrapper process ends.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.BootstrapperBase.Run">
            <summary>
            Runs the bootstrapper.
            </summary>
        </member>
        <member name="T:MvvmLib.Navigation.ContentRegion">
            <summary>
            The Content Region class.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.ContentRegion.History">
            <summary>
            Gets the history.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.ContentRegion.CurrentEntry">
            <summary>
            Gets the current history entry.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.ContentRegion.CanGoBack">
            <summary>
            Chekcs if the content region can go back.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.ContentRegion.CanGoForward">
            <summary>
            Chekcs if the content region can go forward.
            </summary>
        </member>
        <member name="E:MvvmLib.Navigation.ContentRegion.CanGoBackChanged">
            <summary>
            Invoked when the region can go back value changed.
            </summary>
        </member>
        <member name="E:MvvmLib.Navigation.ContentRegion.CanGoForwardChanged">
            <summary>
            Invoked when the region can go forward value changed.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.ContentRegion.#ctor(MvvmLib.Navigation.ViewOrObjectManager,MvvmLib.Navigation.INavigationHistory,System.String,System.Windows.FrameworkElement,MvvmLib.Navigation.RegionsRegistry)">
            <summary>
            Creates an ContentRegion.
            </summary>
            <param name="viewOrObjectManager">The view or object manager</param>
            <param name="history">The history</param>
            <param name="regionName">The region name</param>
            <param name="control">The control</param>
            <param name="regionsRegistry">The regions registry</param>
        </member>
        <member name="M:MvvmLib.Navigation.ContentRegion.#ctor(System.String,System.Windows.FrameworkElement,MvvmLib.Navigation.RegionsRegistry)">
            <summary>
            Creates an ContentRegion.
            </summary>
            <param name="regionName">The region name</param>
            <param name="control">The control</param>
            <param name="regionsRegistry">The regions registry</param>
        </member>
        <member name="M:MvvmLib.Navigation.ContentRegion.RemoveSelectablesAndSingletonsFromHistory">
            <summary>
            Removes the selectables and singletons from history.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.ContentRegion.ClearContent">
            <summary>
            Clear content with no animation.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.ContentRegion.NavigateAsync(System.Type)">
            <summary>
            Navigates to view and notify viewmodel.
            </summary>
            <param name="sourceType">The view type</param>
            <returns>True on navigation  success</returns>
        </member>
        <member name="M:MvvmLib.Navigation.ContentRegion.NavigateAsync(System.Type,System.Object)">
            <summary>
            Navigates to view and notify viewmodel.
            </summary>
            <param name="sourceType">The view type</param>
            <param name="parameter">The parameter</param>
            <returns>True on navigation  success</returns>
        </member>
        <member name="M:MvvmLib.Navigation.ContentRegion.RedirectAsync(System.Type,System.Object)">
            <summary>
            Redirect to the view and remove the previous entry from history.
            </summary>
            <param name="sourceType">The type of the view to redirect</param>
            <param name="parameter">The parameter</param>
            <returns>True on navigation  success</returns>
        </member>
        <member name="M:MvvmLib.Navigation.ContentRegion.RedirectAsync(System.Type)">
            <summary>
            Redirect to the view and remove the previous entry from history.
            </summary>
            <param name="sourceType">The type of the view to redirect</param>
            <returns>True on navigation  success</returns>
        </member>
        <member name="M:MvvmLib.Navigation.ContentRegion.GoBackAsync">
            <summary>
            Navigates to previous view.
            </summary>
            <returns>True on navigation  success</returns>
        </member>
        <member name="M:MvvmLib.Navigation.ContentRegion.GoForwardAsync">
            <summary>
            Navigates to next view.
            </summary>
            <returns>True on navigation  success</returns>
        </member>
        <member name="M:MvvmLib.Navigation.ContentRegion.NavigateToRootAsync">
            <summary>
            Navigates to the root view.
            </summary>
            <returns>True on navigation  success</returns>
        </member>
        <member name="T:MvvmLib.Navigation.RegionNavigationEventArgs">
            <summary>
            The region navigation event args class.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.RegionNavigationEventArgs.SourceType">
            <summary>
            The source type.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.RegionNavigationEventArgs.Parameter">
            <summary>
            The parameter.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.RegionNavigationEventArgs.RegionNavigationType">
            <summary>
            The navigation type.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationEventArgs.#ctor(System.Type,System.Object,MvvmLib.Navigation.RegionNavigationType)">
            <summary>
            Creates the region navigation event args class.
            </summary>
            <param name="sourceType">The source type</param>
            <param name="parameter">The parameter</param>
            <param name="regionNavigationType">The navigation type</param>
        </member>
        <member name="T:MvvmLib.Navigation.RegionNavigationFailedEventArgs">
            <summary>
            The region navigation failed event args class.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.RegionNavigationFailedEventArgs.Exception">
            <summary>
            The exception.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationFailedEventArgs.#ctor(MvvmLib.Navigation.NavigationFailedException)">
            <summary>
            Creates the region navigation failed event args class.
            </summary>
            <param name="exception">The exception</param>
        </member>
        <member name="T:MvvmLib.Navigation.RegionNavigationType">
            <summary>
            The navigation type.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.RegionNavigationType.New">
            <summary>
            On navigate.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.RegionNavigationType.Back">
            <summary>
            On go back.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.RegionNavigationType.Forward">
            <summary>
            On go forward.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.RegionNavigationType.Redirect">
            <summary>
            On redirect.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.RegionNavigationType.Insert">
            <summary>
            On insert.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.RegionNavigationType.Remove">
            <summary>
            On remove.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.RegionNavigationType.Root">
            <summary>
            On go root.
            </summary>
        </member>
        <member name="T:MvvmLib.Navigation.RegionRegisteredEventArgs">
            <summary>
            The region registration event args class.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.RegionRegisteredEventArgs.RegionName">
            <summary>
            The region name.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.RegionRegisteredEventArgs.Region">
            <summary>
            The region created.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.RegionRegisteredEventArgs.#ctor(System.String,MvvmLib.Navigation.IRegion)">
            <summary>
            Creates the region registration event args class.
            </summary>
            <param name="regionName">The region name</param>
            <param name="region">The region created</param>
        </member>
        <member name="T:MvvmLib.Navigation.RegionUnregisteredEventArgs">
            <summary>
            The region unregistration event args class.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.RegionUnregisteredEventArgs.RegionName">
            <summary>
            The region name.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.RegionUnregisteredEventArgs.#ctor(System.String)">
            <summary>
            Creates the region unregistration event args class.
            </summary>
            <param name="regionName">The region name</param>
        </member>
        <member name="T:MvvmLib.Navigation.INavigationHistory">
            <summary>
            History for content regions.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.INavigationHistory.BackStack">
            <summary>
            The back stack.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.INavigationHistory.Current">
            <summary>
            Gets the current entry. 
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.INavigationHistory.ForwardStack">
            <summary>
            The forward Stack.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.INavigationHistory.Next">
            <summary>
            Gets the next entry. 
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.INavigationHistory.Previous">
            <summary>
            Gets the previous entry. 
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.INavigationHistory.Root">
            <summary>
            Gets the root entry. 
            </summary>
        </member>
        <member name="E:MvvmLib.Navigation.INavigationHistory.CanGoBackChanged">
            <summary>
            Invoked when the can go back value changed.
            </summary>
        </member>
        <member name="E:MvvmLib.Navigation.INavigationHistory.CanGoForwardChanged">
            <summary>
            Invoked when the can go forward value changed.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.INavigationHistory.Clear">
            <summary>
            Clear the history.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.INavigationHistory.GoBack">
            <summary>
            Moves back the history.
            </summary>
            <returns>The previous entry</returns>
        </member>
        <member name="M:MvvmLib.Navigation.INavigationHistory.GoForward">
            <summary>
            Moves forward the history.
            </summary>
            <returns>The next entry</returns>
        </member>
        <member name="M:MvvmLib.Navigation.INavigationHistory.HandleGoBackChanged">
            <summary>
            Handles go back changed.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.INavigationHistory.HandleGoForwardChanged">
            <summary>
            Handles go forward changed.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.INavigationHistory.Navigate(MvvmLib.Navigation.NavigationEntry)">
            <summary>
            Moves to the the entry.
            </summary>
            <param name="navigationEntry">The new entry</param>
        </member>
        <member name="M:MvvmLib.Navigation.INavigationHistory.NavigateToRoot">
            <summary>
            Handles go back changed.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.INavigationHistory.UnhandleGoBackChanged">
            <summary>
            Unhandles go back changed.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.INavigationHistory.UnhandleGoForwardChanged">
            <summary>
            Unhandles go forward changed.
            </summary>
        </member>
        <member name="T:MvvmLib.Navigation.NavigationHistory">
            <summary>
            History for content regions.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.NavigationHistory.BackStack">
            <summary>
            The back stack.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.NavigationHistory.ForwardStack">
            <summary>
            The forward Stack.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.NavigationHistory.Root">
            <summary>
            Gets the root entry. 
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.NavigationHistory.Previous">
            <summary>
            Get the previous entry.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.NavigationHistory.Next">
            <summary>
            Get the next entry.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.NavigationHistory.Current">
            <summary>
            Get the current entry.
            </summary>
        </member>
        <member name="E:MvvmLib.Navigation.NavigationHistory.CanGoBackChanged">
            <summary>
            Invoked when the can go back value changed.
            </summary>
        </member>
        <member name="E:MvvmLib.Navigation.NavigationHistory.CanGoForwardChanged">
            <summary>
            Invoked when can the go forward value changed.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.NavigationHistory.#ctor">
            <summary>
            Creates the history.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.NavigationHistory.HandleGoBackChanged">
            <summary>
            Handles go back changed.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.NavigationHistory.UnhandleGoBackChanged">
            <summary>
            Unhandles go back changed.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.NavigationHistory.HandleGoForwardChanged">
            <summary>
            Handles go forward changed.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.NavigationHistory.UnhandleGoForwardChanged">
            <summary>
            Unhandles go forward changed.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.NavigationHistory.Navigate(MvvmLib.Navigation.NavigationEntry)">
            <summary>
            Moves to the the entry.
            </summary>
            <param name="navigationEntry">The new entry</param>
        </member>
        <member name="M:MvvmLib.Navigation.NavigationHistory.NavigateToRoot">
            <summary>
            Moves to root entry.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.NavigationHistory.GoBack">
            <summary>
            Moves back the history.
            </summary>
            <returns>The previous entry</returns>
        </member>
        <member name="M:MvvmLib.Navigation.NavigationHistory.GoForward">
            <summary>
            Moves forward the history.
            </summary>
            <returns>The next entry</returns>
        </member>
        <member name="M:MvvmLib.Navigation.NavigationHistory.Clear">
            <summary>
            The clear the history.
            </summary>
        </member>
        <member name="T:MvvmLib.Navigation.IActivatable">
            <summary>
            Activation guard for views and view models.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.IActivatable.CanActivateAsync(System.Object)">
            <summary>
            Checks if can activate the view or view model.
            </summary>
            <param name="parameter">The parameter</param>
            <returns>True or false</returns>
        </member>
        <member name="T:MvvmLib.Navigation.IDeactivatable">
            <summary>
            Deactivation guard for views and view models.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.IDeactivatable.CanDeactivateAsync">
            <summary>
            Checks if can deactivate the view or view model.
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="T:MvvmLib.Navigation.ILoadedEventListener">
            <summary>
            Allows to notify the view model when view is loaded.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.ILoadedEventListener.OnLoaded(System.Windows.FrameworkElement,System.Object)">
            <summary>
            Invoked when view is loaded.
            </summary>
            <param name="view">The view</param>
            <param name="parameter">The parameter</param>
        </member>
        <member name="T:MvvmLib.Navigation.INavigatable">
            <summary>
            Allows to notify the view model and / or the view.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.INavigatable.OnNavigatingFrom">
            <summary>
            Invoked before leaving the view.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.INavigatable.OnNavigatingTo(System.Object)">
            <summary>
            Allows to preload data before the content of the region has changed. 
            </summary>
            <param name="parameter">The parameter</param>
        </member>
        <member name="M:MvvmLib.Navigation.INavigatable.OnNavigatedTo(System.Object)">
            <summary>
            Invoked after the content of the region has changed.
            </summary>
            <param name="parameter">The parameter</param>
        </member>
        <member name="T:MvvmLib.Navigation.IRegionNavigationService">
            <summary>
            Allows to get content and items regions and navigate.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.IRegionNavigationService.GetContentRegion(System.String)">
            <summary>
            Gets the last content region for the region name.
            </summary>
            <param name="regionName">The region name</param>
            <returns>The content region</returns>
        </member>
        <member name="M:MvvmLib.Navigation.IRegionNavigationService.GetContentRegion(System.String,System.String)">
            <summary>
            Gets the content region for the region name and the control name.
            </summary>
            <param name="regionName">The region name</param>
            <param name="controlName">The control name</param>
            <returns>The content region</returns>
        </member>
        <member name="M:MvvmLib.Navigation.IRegionNavigationService.GetContentRegions(System.String)">
            <summary>
            Gets the content regions.
            </summary>
            <param name="regionName">The region name</param>
            <returns>A readonly list of content regions</returns>
        </member>
        <member name="M:MvvmLib.Navigation.IRegionNavigationService.GetItemsRegion(System.String)">
            <summary>
            Get the last items region for the region name.
            </summary>
            <param name="regionName">The region name</param>
            <returns>A list of items regions</returns>
        </member>
        <member name="M:MvvmLib.Navigation.IRegionNavigationService.GetItemsRegions(System.String)">
            <summary>
            Gets the items regions.
            </summary>
            <param name="regionName">The region name</param>
            <returns>A readonly list of items regions</returns>
        </member>
        <member name="M:MvvmLib.Navigation.IRegionNavigationService.GetItemsRegion(System.String,System.String)">
            <summary>
            Gets the items region for the region name and the control name.
            </summary>
            <param name="regionName">The region name</param>
            <param name="controlName">The control name</param>
            <returns>The items region</returns>
        </member>
        <member name="M:MvvmLib.Navigation.IRegionNavigationService.IsContentRegionDiscovered(System.String)">
            <summary>
            Checks if the content region is discovered.
            </summary>
            <param name="regionName">The region name</param>
            <returns>True if discovered</returns>
        </member>
        <member name="M:MvvmLib.Navigation.IRegionNavigationService.IsContentRegionDiscovered(System.String,System.String)">
            <summary>
            Checks if the content region is discovered.
            </summary>
            <param name="regionName">The region name</param>
            <param name="controlName">The control name</param>
            <returns>True if discovered</returns>
        </member>
        <member name="M:MvvmLib.Navigation.IRegionNavigationService.IsItemsRegionDiscovered(System.String)">
            <summary>
            Checks if the items region is discovered.
            </summary>
            <param name="regionName">The region name</param>
            <returns>True if discovered</returns>
        </member>
        <member name="M:MvvmLib.Navigation.IRegionNavigationService.IsItemsRegionDiscovered(System.String,System.String)">
            <summary>
            Checks if the items region is discovered.
            </summary>
            <param name="regionName">The region name</param>
            <param name="controlName">The control name</param>
            <returns>True if discovered</returns>
        </member>
        <member name="M:MvvmLib.Navigation.IRegionNavigationService.NavigateWhenAvailable(System.String,System.Type,System.String,System.Object,System.Action)">
            <summary>
            Executes immediatly if the region is discovered or wait and execute the navigation later.
            </summary>
            <param name="regionName">The region name</param>
            <param name="sourceType">The source type</param>
            <param name="controlName">The control name</param>
            <param name="parameter">The parameter</param>
            <param name="onCompleted">The callback</param>
            <returns>True if executed immediately</returns>
        </member>
        <member name="M:MvvmLib.Navigation.IRegionNavigationService.NavigateWhenAvailable(System.String,System.String,System.Type,System.Action)">
            <summary>
            Executes immediatly if the region is discovered or wait and execute the navigation later.
            </summary>
            <param name="regionName">The region name</param>
            <param name="controlName">The control name</param>
            <param name="sourceType">The source type</param>
            <param name="onCompleted">The callback</param>
            <returns>True if executed immediately</returns>
        </member>
        <member name="M:MvvmLib.Navigation.IRegionNavigationService.NavigateWhenAvailable(System.String,System.Type,System.Object,System.Action)">
            <summary>
            Executes immediatly if the region is discovered or wait and execute the navigation later.
            </summary>
            <param name="regionName">The region name</param>
            <param name="sourceType">The source type</param>
            <param name="parameter">The parameter</param>
            <param name="onCompleted">The callback</param>
            <returns>True if executed immediately</returns>
        </member>
        <member name="M:MvvmLib.Navigation.IRegionNavigationService.NavigateWhenAvailable(System.String,System.Type,System.Action)">
            <summary>
            Executes immediatly if the region is discovered or wait and execute the navigation later.
            </summary>
            <param name="regionName">The region name</param>
            <param name="sourceType">The source type</param>
            <param name="onCompleted">The callback</param>
            <returns>True if executed immediately</returns>
        </member>
        <member name="T:MvvmLib.Navigation.ISelectable">
            <summary>
            Allows to select a view model.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.ISelectable.IsTarget(System.Type,System.Object)">
            <summary>
            Checks if the current view model is target.
            </summary>
            <param name="viewType">The view type</param>
            <param name="parameter">The parameter</param>
            <returns>True if the view model is the target</returns>
        </member>
        <member name="T:MvvmLib.Navigation.StrategyType">
            <summary>
            Strategy type.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.StrategyType.Singleton">
            <summary>
            Always the same instance.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.StrategyType.Transcient">
            <summary>
            Always a new instance.
            </summary>
        </member>
        <member name="T:MvvmLib.Navigation.IViewLifetimeStrategy">
            <summary>
            Allows to get always the same instance of view (Singleton) or always a new instance (Transcient).
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.IViewLifetimeStrategy.Strategy">
            <summary>
            Gets the strategy.
            </summary>
        </member>
        <member name="T:MvvmLib.Navigation.ItemsRegion">
            <summary>
            The Items Region class.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.ItemsRegion.History">
            <summary>
            Gets the history.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.ItemsRegion.CurrentEntry">
            <summary>
            Gets the current history entry.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.ItemsRegion.CanInsert">
            <summary>
            Checks if can insert item(s).
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.ItemsRegion.CanRemove">
            <summary>
            Checks if can remove item(s).
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsRegion.#ctor(MvvmLib.Navigation.ViewOrObjectManager,MvvmLib.Navigation.IListHistory,System.String,System.Windows.FrameworkElement,MvvmLib.Navigation.RegionsRegistry)">
            <summary>
            Creates an ItemsRegion.
            </summary>
            <param name="viewOrObjectManager">The view or object manager</param>
            <param name="history">The list history</param>
            <param name="regionName">The region name</param>
            <param name="control">The control</param>
            <param name="regionsRegistry">The regions registry</param>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsRegion.#ctor(System.String,System.Windows.FrameworkElement,MvvmLib.Navigation.RegionsRegistry)">
            <summary>
            Creates an ItemsRegion.
            </summary>
            <param name="regionName">The region name</param>
            <param name="control">The control</param>
            <param name="regionsRegistry">The regions registry</param>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsRegion.RemoveSelectablesAndSingletonsFromHistory">
            <summary>
            Removes the selectables and singletons from history.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsRegion.InsertAsync(System.Int32,System.Type,System.Object)">
            <summary>
            Insert a view to the items region.
            </summary>
            <param name="index">The index</param>
            <param name="sourceType">The view or object type</param>
            <param name="parameter">The parameter</param>
            <returns>True if inserted</returns>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsRegion.InsertAsync(System.Int32,System.Type)">
            <summary>
            Insert a view to the items region.
            </summary>
            <param name="index">The index</param>
            <param name="sourceType">The view or object type</param>
            <returns>True if inserted</returns>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsRegion.AddAsync(System.Type,System.Object)">
            <summary>
            Add a view to the items region.
            </summary>
            <param name="sourceType">The view or object type</param>
            <param name="parameter">The parameter</param>
            <returns>True if added</returns>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsRegion.AddAsync(System.Type)">
            <summary>
            Add a view to the items region.
            </summary>
            <param name="sourceType">The view or object type</param>
            <returns>True if navigation added</returns>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsRegion.RemoveAtAsync(System.Int32)">
            <summary>
            Remove a view from the items region.
            </summary>
            <param name="index">The index</param>
            <returns>True if navigation removed</returns>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsRegion.RemoveLastAsync">
            <summary>
            Remove the last view from the items region.
            </summary>
            <returns>True if navigation removed</returns>
        </member>
        <member name="M:MvvmLib.Navigation.ItemsRegion.Clear">
            <summary>
            Clear the items region.
            </summary>
            <returns>True if navigation removed</returns>
        </member>
        <member name="T:MvvmLib.Navigation.RegionBase">
            <summary>
            The Reghion base class.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.RegionBase.Logger">
            <summary>
            The logger used by the library.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.RegionBase.viewOrObjectManager">
            <summary>
            The view or object manager.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.RegionBase.regionsRegistry">
            <summary>
            The regions registry used by the region.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.RegionBase.isLoaded">
            <summary>
            Checks if region is loaded.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.RegionBase.regionName">
            <summary>
            The region name.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.RegionBase.RegionName">
            <summary>
            The region name.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.RegionBase.control">
            <summary>
            The control for this region.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.RegionBase.Control">
            <summary>
            The control for this region.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.RegionBase.ControlName">
            <summary>
            The name of the control. Can be used to get a region by region name and control name.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.RegionBase.CurrentEntry">
            <summary>
            Gets the current entry of history.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.RegionBase.navigating">
            <summary>
            Navigating event handlers list.
            </summary>
        </member>
        <member name="E:MvvmLib.Navigation.RegionBase.Navigating">
            <summary>
            Invoked before navigation starts.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.RegionBase.navigated">
            <summary>
            Navigated event handlers list.
            </summary>
        </member>
        <member name="E:MvvmLib.Navigation.RegionBase.Navigated">
            <summary>
            Invoked after navigation ends.
            </summary>
        </member>
        <member name="F:MvvmLib.Navigation.RegionBase.navigationFailed">
            <summary>
            NavigationFailed event handlers list.
            </summary>
        </member>
        <member name="E:MvvmLib.Navigation.RegionBase.NavigationFailed">
            <summary>
            Invoked on navigation cancelled or on exception.
            </summary>
        </member>
        <member name="E:MvvmLib.Navigation.RegionBase.ViewLoaded">
            <summary>
            Invoked on view loaded.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.#ctor(MvvmLib.Navigation.ViewOrObjectManager,System.String,System.Windows.FrameworkElement,MvvmLib.Navigation.RegionsRegistry)">
            <summary>
            Creates the region.
            </summary>
            <param name="viewOrObjectManager">The view or object manager</param>
            <param name="regionsRegistry">The region registry</param>
            <param name="regionName">The region name</param>
            <param name="control">The control</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.OnControlUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Invoked on control unload.
            </summary>
            <param name="sender">The control</param>
            <param name="e">The routed event args</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.RemoveSelectablesAndSingletonsFromHistory">
            <summary>
            Removes the selectables and singletons from history.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.RemoveSelectables(System.Type)">
            <summary>
            Removes the selectables from view or object manager.
            </summary>
            <param name="sourceType">The source type</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.RemoveSelectables(System.Collections.Generic.IEnumerable{MvvmLib.Navigation.NavigationEntry})">
            <summary>
            Removes the selectables from view or object manager.
            </summary>
            <param name="entries">The navigation entries</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.RemoveSingleton(System.Type)">
            <summary>
            Removes the singleton from view or object manager.
            </summary>
            <param name="sourceType">The source type</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.RemoveSingletons(System.Collections.Generic.IEnumerable{MvvmLib.Navigation.NavigationEntry})">
            <summary>
            Removes the singletons from view or object manager.
            </summary>
            <param name="entries">The navigation entries</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.CreateViewOrObjectInstance(System.Type)">
            <summary>
            Creates a new instance with the view resolver.
            </summary>
            <param name="viewOrObjectType">The type of the instance</param>
            <returns>The instance</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.CheckCanDeactivateChildRegionsOrThrowAsync(System.Collections.Generic.IList{MvvmLib.Navigation.RegionBase})">
            <summary>
            Check Can Deactivate for child regions.
            </summary>
            <param name="childRegions">The child regions</param>
            <returns></returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.CheckCanDeactivateOrThrowAsync(MvvmLib.Navigation.NavigationEntry)">
            <summary>
            Check Can Deactivate for child regions and current entry.
            </summary>
            <param name="currentEntry">The current navigation entry.</param>
            <returns></returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.CheckCanActivateOrThrowAsync(System.Object,System.Object,System.Object)">
            <summary>
            Checks can deactivate for view or object and context that implements <see cref="T:MvvmLib.Navigation.IDeactivatable" /> or throws an exception.
            </summary>
            <param name="viewOrObject">The view or object</param>
            <param name="context">The data context</param>
            <param name="parameter">the parameter</param>
            <returns></returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.CheckCanActivateOrThrowAsync(MvvmLib.Navigation.NavigationEntry)">
            <summary>
            Checks can activate for view or object and context that implements <see cref="T:MvvmLib.Navigation.IActivatable" /> or throws an exception.
            </summary>
            <param name="entry">The navigation entry</param>
            <returns></returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.CheckCanActivateChildRegionsOrThrowAsync(System.Collections.Generic.IList{MvvmLib.Navigation.RegionBase})">
            <summary>
            Checks can activate for view or object and context that implements <see cref="T:MvvmLib.Navigation.IActivatable" /> or throws an exception.
            </summary>
            <param name="childRegions">The child regions</param>
            <returns></returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.OnNavigatingFrom(MvvmLib.Navigation.NavigationEntry)">
            <summary>
            Invokes OnNavigatingFrom for view or object and context that implements <see cref="T:MvvmLib.Navigation.INavigatable" />.
            </summary>
            <param name="entry">The navigation entry</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.OnNavigatingFromChildRegions(System.Collections.Generic.IList{MvvmLib.Navigation.RegionBase})">
            <summary>
            Invokes OnNavigatingFrom for view or object and context that implements <see cref="T:MvvmLib.Navigation.INavigatable" />.
            </summary>
            <param name="childRegions">The child regions</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.OnNavigatingTo(System.Object,System.Object,System.Object)">
            <summary>
            Invokes OnNavigatingTo for view or object and context that implements <see cref="T:MvvmLib.Navigation.INavigatable" />.
            </summary>
            <param name="viewOrObject"></param>
            <param name="context"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.OnNavigatingTo(MvvmLib.Navigation.NavigationEntry)">
            <summary>
            Invokes OnNavigatingTo for view or object and context that implements <see cref="T:MvvmLib.Navigation.INavigatable" />.
            </summary>
            <param name="entry">The navigation entry</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.OnNavigatingToChildRegions(System.Collections.Generic.IList{MvvmLib.Navigation.RegionBase})">
            <summary>
            Invokes OnNavigatingTo for view or object and context that implements <see cref="T:MvvmLib.Navigation.INavigatable" />.
            </summary>
            <param name="childRegions">The child regions</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.OnNavigatedTo(System.Object,System.Object,System.Object)">
            <summary>
            Invokes OnNavigatedTo for view or object and context that implements <see cref="T:MvvmLib.Navigation.INavigatable" />.
            </summary>
            <param name="viewOrObject">The view or object</param>
            <param name="context">The data context</param>
            <param name="parameter">The parameter</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.OnNavigatedTo(MvvmLib.Navigation.NavigationEntry)">
            <summary>
            Invokes OnNavigatedTo for view or object and context that implements <see cref="T:MvvmLib.Navigation.INavigatable" />.
            </summary>
            <param name="entry">The navigation entry</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.OnNavigatedToChildRegions(System.Collections.Generic.List{MvvmLib.Navigation.RegionBase})">
            <summary>
            Invokes OnNavigatedTo for view or object and context that implements <see cref="T:MvvmLib.Navigation.INavigatable" />.
            </summary>
            <param name="childRegions">The child regions</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.ResolveContextWithViewModelLocator(System.Type)">
            <summary>
            Resolves the view model model for the view type.
            </summary>
            <param name="viewType">The view type</param>
            <returns>The view model</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.UnregisterRegion(MvvmLib.Navigation.IRegion)">
            <summary>
            Unregisters the region.
            </summary>
            <param name="region">The items region</param>
            <returns>True if unregistered</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.RemoveNonLoadedRegions">
            <summary>
            Remove non loaded regions.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.FindChildRegions(System.Windows.DependencyObject)">
            <summary>
            Find child regions for the region.
            </summary>
            <param name="parent">The control of the region</param>
            <returns>A list of regions</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.ClearChildRegions(MvvmLib.Navigation.NavigationEntry)">
            <summary>
            Clear and unergister regions and child regions.
            </summary>
            <param name="entry">The navigation entry</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.HandleViewLoaded(System.Windows.FrameworkElement,System.Action{System.Object,System.Windows.RoutedEventArgs})">
            <summary>
            Handle loaded for a view.
            </summary>
            <param name="view">The view</param>
            <param name="onLoaded">The callback</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.NotifyLoadedListeners(System.Windows.FrameworkElement,System.Object,System.Object)">
            <summary>
            Notify view models that implement <see cref="T:MvvmLib.Navigation.ILoadedEventListener" />.
            </summary>
            <param name="view">The view</param>
            <param name="context">The data context</param>
            <param name="parameter">The parameter</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.GetGenericRegionKnowledge(System.Type)">
            <summary>
            Gets the generic type <see cref="T:MvvmLib.Navigation.IRegionKnowledge`1"/> for the context type.
            </summary>
            <param name="contextType">The context type</param>
            <returns>The generic type or null</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.NotifyRegionKnowledge(MvvmLib.Navigation.IRegion,System.Object)">
            <summary>
            Notify view models that implement <see cref="T:MvvmLib.Navigation.ILoadedEventListener" />.
            </summary>
            <param name="region">The region</param>
            <param name="context">The data context</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.RaiseNavigating(System.Type,System.Object,MvvmLib.Navigation.RegionNavigationType)">
            <summary>
            Notifies <see cref="E:MvvmLib.Navigation.RegionBase.Navigating"/> subscribers.
            </summary>
            <param name="sourceType">The source type</param>
            <param name="parameter">The parameter type</param>
            <param name="regionNavigationType">The navigation type</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.RaiseNavigated(System.Type,System.Object,MvvmLib.Navigation.RegionNavigationType)">
            <summary>
            Notifies <see cref="E:MvvmLib.Navigation.RegionBase.Navigated"/> subscribers.
            </summary>
            <param name="sourceType">The source type</param>
            <param name="parameter">The parameter type</param>
            <param name="regionNavigationType">The navigation type</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionBase.RaiseNavigationNavigationFailed(MvvmLib.Navigation.NavigationFailedException)">
            <summary>
             Notifies <see cref="E:MvvmLib.Navigation.RegionBase.NavigationFailed"/> subscribers.
            </summary>
            <param name="exception">The exception</param>
        </member>
        <member name="T:MvvmLib.Navigation.RegionManager">
            <summary>
            Allows to register content regions and items region with dependency properties.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.RegionManager.SetContentRegionName(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the content region name.
            </summary>
            <param name="target">The control</param>
            <param name="regionName">The region name</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionManager.GetContentRegionName(System.Windows.DependencyObject)">
            <summary>
            Gets the content region name.
            </summary>
            <param name="target">The control</param>
            <returns>The region name</returns>
        </member>
        <member name="F:MvvmLib.Navigation.RegionManager.ContentRegionNameProperty">
            <summary>
            The content region name.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.RegionManager.SetItemsRegionName(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the items region name.
            </summary>
            <param name="target">The control</param>
            <param name="regionName">The region name</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionManager.GetItemsRegionName(System.Windows.DependencyObject)">
            <summary>
            Gets the items region name.
            </summary>
            <param name="target">The control</param>
            <returns>The region name</returns>
        </member>
        <member name="F:MvvmLib.Navigation.RegionManager.ItemsRegionNameProperty">
            <summary>
            The items region name.
            </summary>
        </member>
        <member name="T:MvvmLib.Navigation.RegionNavigationService">
            <summary>
            Allows to get content and items regions and navigate.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationService.#ctor">
            <summary>
            Creates the regions navigation service.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationService.#ctor(MvvmLib.Navigation.RegionsRegistry)">
            <summary>
            Creates the regions navigation service.
            </summary>
            <param name="regionsRegistry">The regions registry used by the navigation service</param>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationService.GetContentRegion(System.String)">
            <summary>
            Gets the last content region for the region name.
            </summary>
            <param name="regionName">The region name</param>
            <returns>The content region</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationService.GetContentRegion(System.String,System.String)">
            <summary>
            Gets the content region for the region name and the control name.
            </summary>
            <param name="regionName">The region name</param>
            <param name="controlName">The control name</param>
            <returns>The content region</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationService.GetContentRegions(System.String)">
            <summary>
            Gets the content regions.
            </summary>
            <param name="regionName">The region name</param>
            <returns>A readonly list of content regions</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationService.GetItemsRegion(System.String)">
            <summary>
            Get the last items region for the region name.
            </summary>
            <param name="regionName">The region name</param>
            <returns>A list of items regions</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationService.GetItemsRegions(System.String)">
            <summary>
            Gets the items regions.
            </summary>
            <param name="regionName">The region name</param>
            <returns>A readonly list of items regions</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationService.GetItemsRegion(System.String,System.String)">
            <summary>
            Gets the items region for the region name and the control name.
            </summary>
            <param name="regionName">The region name</param>
            <param name="controlName">The control name</param>
            <returns>The items region</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationService.IsContentRegionDiscovered(System.String)">
            <summary>
            Checks if the content region is discovered.
            </summary>
            <param name="regionName">The region name</param>
            <returns>True if discovered</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationService.IsContentRegionDiscovered(System.String,System.String)">
            <summary>
            Checks if the content region is discovered.
            </summary>
            <param name="regionName">The region name</param>
            <param name="controlName">The control name</param>
            <returns>True if discovered</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationService.IsItemsRegionDiscovered(System.String)">
            <summary>
            Checks if the items region is discovered.
            </summary>
            <param name="regionName">The region name</param>
            <returns>True if discovered</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationService.IsItemsRegionDiscovered(System.String,System.String)">
            <summary>
            Checks if the items region is discovered.
            </summary>
            <param name="regionName">The region name</param>
            <param name="controlName">The control name</param>
            <returns>True if discovered</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationService.NavigateWhenAvailable(System.String,System.Type,System.String,System.Object,System.Action)">
            <summary>
            Executes immediatly if the region is discovered or wait and execute the navigation later.
            </summary>
            <param name="regionName">The region name</param>
            <param name="sourceType">The source type</param>
            <param name="controlName">The control name</param>
            <param name="parameter">The parameter</param>
            <param name="onCompleted">The callback</param>
            <returns>True if executed immediately</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationService.NavigateWhenAvailable(System.String,System.String,System.Type,System.Action)">
            <summary>
            Executes immediatly if the region is discovered or wait and execute the navigation later.
            </summary>
            <param name="regionName">The region name</param>
            <param name="controlName">The control name</param>
            <param name="sourceType">The source type</param>
            <param name="onCompleted">The callback</param>
            <returns>True if executed immediately</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationService.NavigateWhenAvailable(System.String,System.Type,System.Object,System.Action)">
            <summary>
            Executes immediatly if the region is discovered or wait and execute the navigation later.
            </summary>
            <param name="regionName">The region name</param>
            <param name="sourceType">The source type</param>
            <param name="parameter">The parameter</param>
            <param name="onCompleted">The callback</param>
            <returns>True if executed immediately</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionNavigationService.NavigateWhenAvailable(System.String,System.Type,System.Action)">
            <summary>
            Executes immediatly if the region is discovered or wait and execute the navigation later.
            </summary>
            <param name="regionName">The region name</param>
            <param name="sourceType">The source type</param>
            <param name="onCompleted">The callback</param>
            <returns>True if executed immediately</returns>
        </member>
        <member name="P:MvvmLib.Navigation.PendingContentNavigation.RegionName">
            <summary>
            The region name.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.PendingContentNavigation.ControlName">
            <summary>
            The control name.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.PendingContentNavigation.SourceType">
            <summary>
            The source type.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.PendingContentNavigation.Parameter">
            <summary>
            The parameter.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.PendingContentNavigation.OnCompleted">
            <summary>
            Invoked on navigation completed.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.PendingContentNavigation.#ctor(System.String,System.String,System.Type,System.Object,System.Action)">
            <summary>
            Creates the pending navigation class.
            </summary>
            <param name="regionName">The region name</param>
            <param name="controlName">the control name</param>
            <param name="sourceType">The source type</param>
            <param name="parameter">The parameter</param>
            <param name="onCompleted">The callback</param>
        </member>
        <member name="T:MvvmLib.Navigation.RegionsRegistry">
            <summary>
            The registry for content and items regions.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.RegionsRegistry.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.RegionsRegistry.ContentRegions">
            <summary>
            The content regions list.
            </summary>
        </member>
        <member name="E:MvvmLib.Navigation.RegionsRegistry.RegionRegistered">
            <summary>
            Invoked on region created.
            </summary>
        </member>
        <member name="E:MvvmLib.Navigation.RegionsRegistry.RegionUnregistered">
            <summary>
            Invoked on region removed.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.RegionsRegistry.ItemsRegions">
            <summary>
            The items regions list.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.RegionsRegistry.Instance">
            <summary>
            The default static instance of the regions registry.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.RegionsRegistry.RegisterContentRegion(System.String,System.Windows.FrameworkElement)">
            <summary>
            Registers a content region.
            </summary>
            <param name="regionName">The region name</param>
            <param name="control">The control</param>
            <returns>The region created</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionsRegistry.RegisterItemsRegion(System.String,System.Windows.FrameworkElement)">
            <summary>
            Registers an items region.
            </summary>
            <param name="regionName">The region name</param>
            <param name="control">The control</param>
            <returns>The region created</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionsRegistry.GetContentRegion(System.String)">
            <summary>
            Gets the last content region for the region name.
            </summary>
            <param name="regionName">The region name</param>
            <returns>The content region or null</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionsRegistry.GetContentRegion(System.String,System.String)">
            <summary>
            Gets the content region for the region name and the control name.
            </summary>
            <param name="regionName">The region name</param>
            <param name="controlName">The control name property</param>
            <returns>The content region  found or null</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionsRegistry.GetContentRegion(System.String,System.Windows.DependencyObject)">
            <summary>
            Gets the content region for the region name and child.
            </summary>
            <param name="regionName">The region name</param>
            <param name="control">The control to check</param>
            <returns>The content region found or null</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionsRegistry.GetItemsRegion(System.String)">
            <summary>
            Gets the last items region for the region name.
            </summary>
            <param name="regionName">The region name</param>
            <returns>The items region found or null</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionsRegistry.GetItemsRegion(System.String,System.String)">
            <summary>
            Gets the items region for the region name and the control name.
            </summary>
            <param name="regionName">The region name</param>
            <param name="controlName">The control name property</param>
            <returns>The items region found or null</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionsRegistry.GetItemsRegion(System.String,System.Windows.DependencyObject)">
            <summary>
            Gets the items region for the region name and child.
            </summary>
            <param name="regionName">The region name</param>
            <param name="control">The control to check</param>
            <returns>The content region found or null</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionsRegistry.UnregisterContentRegion(MvvmLib.Navigation.ContentRegion)">
            <summary>
            Unregister the content region.
            </summary>
            <param name="contentRegion">The content region</param>
            <returns>True if region removed successfully</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionsRegistry.UnregisterItemsRegion(MvvmLib.Navigation.ItemsRegion)">
            <summary>
            Unregister the iems region.
            </summary>
            <param name="itemsRegion">The items region</param>
            <returns>True if region removed successfully</returns>
        </member>
        <member name="M:MvvmLib.Navigation.RegionsRegistry.RemoveNonLoadedContentRegions">
            <summary>
            Remove all content regions not loaded.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.RegionsRegistry.RemoveNonLoadedItemsRegions">
            <summary>
            Remove all items regions not loaded.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.RegionsRegistry.RemoveNonLoadedRegions">
            <summary>
            Remove all regions not loaded.
            </summary>
        </member>
        <member name="T:MvvmLib.Navigation.ViewLoadedEventArgs">
            <summary>
            The view loaded event args class.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.ViewLoadedEventArgs.RegionName">
            <summary>
            The region name.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.ViewLoadedEventArgs.View">
            <summary>
            The view.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.ViewLoadedEventArgs.Region">
            <summary>
            The region.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.ViewLoadedEventArgs.#ctor(System.String,System.Object,MvvmLib.Navigation.IRegion)">
            <summary>
            Creates the view loaded event args class.
            </summary>
            <param name="regionName">The region name</param>
            <param name="view"></param>
            <param name="region">The region created</param>
        </member>
        <member name="T:MvvmLib.Navigation.ViewModelLocationProvider">
            <summary>
            The ViewModelLocationProvider class locates the view model for the view.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.ViewModelLocationProvider.SetViewTypeToViewModelTypeResolver(System.Func{System.Type,System.Type})">
            <summary>
            Allows to change the convention used to resolve ViewModels for the views.
            </summary>
            <param name="viewTypeToViewModelTypeResolver">The new convention</param>
        </member>
        <member name="M:MvvmLib.Navigation.ViewModelLocationProvider.RegisterCustom(System.Type,System.Type)">
            <summary>
            Registers a ViewModelType for a ViewType.
            </summary>
            <param name="viewType">The view type</param>
            <param name="viewModelType">The view model type</param>
        </member>
        <member name="M:MvvmLib.Navigation.ViewModelLocationProvider.SetViewModelFactory(System.Func{System.Type,System.Object})">
            <summary>
            The view model factory receives a view model type and have to create an instance of the view model. It could uses a ioc container to create the instance and resolve view model dependences.
            </summary>
            <param name="viewModelFactory"></param>
        </member>
        <member name="T:MvvmLib.Navigation.ViewModelLocator">
            <summary>
            Allows to resolve the ViewModel for a view.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.ViewModelLocator.GetResolveWindowViewModel(System.Windows.DependencyObject)">
            <summary>
            Gets The resolve view model value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MvvmLib.Navigation.ViewModelLocator.SetResolveWindowViewModel(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets The resolve view model value.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:MvvmLib.Navigation.ViewModelLocator.ResolveWindowViewModelProperty">
            <summary>
            Allows to resolve ViewModel for a Window.
            </summary>
        </member>
        <member name="T:MvvmLib.Navigation.ViewOrObjectManager">
            <summary>
            The container for view or object singletons and selectables.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.ViewOrObjectManager.Singletons">
            <summary>
            Registered View or objects as Singletons that implement <see cref="T:MvvmLib.Navigation.IViewLifetimeStrategy"/>.
            </summary>
        </member>
        <member name="P:MvvmLib.Navigation.ViewOrObjectManager.Selectables">
            <summary>
            Registered View or objects that implement <see cref="T:MvvmLib.Navigation.ISelectable"/>.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.ViewOrObjectManager.#ctor">
            <summary>
            Creates the view or object manager.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.ViewOrObjectManager.TryAddViewOrObject(System.Type,System.Object,System.Object)">
            <summary>
            Add view or object that implements <see cref="T:MvvmLib.Navigation.IViewLifetimeStrategy"/> or <see cref="T:MvvmLib.Navigation.ISelectable"/>.
            </summary>
            <param name="sourceType">The source type</param>
            <param name="viewOrObject">The instance</param>
            <param name="context">The context</param>
        </member>
        <member name="M:MvvmLib.Navigation.ViewOrObjectManager.TryGetSingleton(System.Type)">
            <summary>
            Tries to get a singleton for the type.
            </summary>
            <param name="sourceType">The source type</param>
            <returns>The singleton found or null</returns>
        </member>
        <member name="M:MvvmLib.Navigation.ViewOrObjectManager.TryGetSelectable(System.Type,System.Object)">
            <summary>
            Tries to get a registered selectable for the type.
            </summary>
            <param name="sourceType">The source type</param>
            <param name="parameter">The parameter</param>
            <returns>The selectable found or null</returns>
        </member>
        <member name="M:MvvmLib.Navigation.ViewOrObjectManager.CreateInstance(System.Type)">
            <summary>
            Creates an new instance of the type.
            </summary>
            <param name="sourceType">The source type</param>
            <returns>The new instance</returns>
        </member>
        <member name="M:MvvmLib.Navigation.ViewOrObjectManager.GetOrCreateViewOrObjectInstance(System.Type,System.Object)">
            <summary>
            Gets a singleton, a selectable or a new instance.
            </summary>
            <param name="sourceType">The source type</param>
            <param name="parameter">The parameter</param>
            <returns>The instance with <see cref="T:MvvmLib.Navigation.ResolutionType"/></returns>
        </member>
        <member name="M:MvvmLib.Navigation.ViewOrObjectManager.RemoveSingleton(System.Type)">
            <summary>
            Removes the singleton.
            </summary>
            <param name="sourceType">The source type</param>
            <returns>True if removed</returns>
        </member>
        <member name="M:MvvmLib.Navigation.ViewOrObjectManager.RemoveSelectable(System.Type)">
            <summary>
            Removes the selectable.
            </summary>
            <param name="sourceType">The source type</param>
            <returns>True if removed</returns>
        </member>
        <member name="M:MvvmLib.Navigation.ViewOrObjectManager.Clear">
            <summary>
            Clear the singletons and the selectables.
            </summary>
        </member>
        <member name="T:MvvmLib.Navigation.ViewResolver">
            <summary>
            Allows to create instances of views.
            </summary>
        </member>
        <member name="M:MvvmLib.Navigation.ViewResolver.SetViewFactory(System.Func{System.Type,System.Object})">
            <summary>
            Allows to change the default view factory (Activator CreateInstance).
            </summary>
            <param name="viewFactory">The new view factory</param>
        </member>
        <member name="T:MvvmLib.Core.Mvvm.BindableObject`1">
            <summary>
            Allows to bind a value or object to Value dependency property and be notified on value changed.
            </summary>
            <typeparam name="T">The type of the value to observe</typeparam>
        </member>
        <member name="E:MvvmLib.Core.Mvvm.BindableObject`1.PropertyChanged">
            <summary>
            The property changed to subscribe to be notified on value changed.
            </summary>
        </member>
        <member name="P:MvvmLib.Core.Mvvm.BindableObject`1.Value">
            <summary>
            The Value.
            </summary>
        </member>
        <member name="F:MvvmLib.Core.Mvvm.BindableObject`1.ValueProperty">
            <summary>
            The value property.
            </summary>
        </member>
        <member name="T:MvvmLib.Wpf.Properties.Resources">
            <summary>
              Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
            </summary>
        </member>
        <member name="P:MvvmLib.Wpf.Properties.Resources.ResourceManager">
            <summary>
              Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
            </summary>
        </member>
        <member name="P:MvvmLib.Wpf.Properties.Resources.Culture">
            <summary>
              Remplace la propriété CurrentUICulture du thread actuel pour toutes
              les recherches de ressources à l'aide de cette classe de ressource fortement typée.
            </summary>
        </member>
    </members>
</doc>
