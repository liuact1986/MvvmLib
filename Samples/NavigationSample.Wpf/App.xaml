<Application x:Class="NavigationSample.Wpf.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:NavigationSample.Wpf"
             xmlns:viewModels="clr-namespace:NavigationSample.Wpf.ViewModels"
             xmlns:views="clr-namespace:NavigationSample.Wpf.Views"
             xmlns:converters="clr-namespace:NavigationSample.Wpf.Converters"
             Startup="Application_Startup">
    <Application.Resources>

        <ResourceDictionary>

            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>

            <DataTemplate DataType="{x:Type viewModels:ItemDetailsViewModel}">
                <views:ItemDetailsView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewModels:ViewAViewModel}">
                <views:ViewA />
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewModels:ViewBViewModel}">
                <views:ViewB />
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewModels:ViewCViewModel}">
                <views:ViewC />
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewModels:ViewDViewModel}">
                <views:ViewD />
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewModels:PersonDetailsViewModel}">
                <views:PersonDetailsView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewModels:TransitoningControlViewModel}">
                <TextBlock Text="{Binding Message}" FontSize="24" FontFamily="MV Boli" />
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewModels:MyItemDetailsViewModel}">
                <views:MyItemDetailsView />
            </DataTemplate>

            <ControlTemplate x:Key="DefaultErrorTemplate">
                <Grid x:Name="container">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <AdornedElementPlaceholder Grid.Column="0"
                                           Name="customAdorner"
                                           VerticalAlignment="Center" />

                    <Border x:Name="ValidationErrorElement"
                        BorderBrush="#FFDB000C"
                        BorderThickness="1"
                        CornerRadius="1"
                        ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                        <Grid Background="Transparent"
                          HorizontalAlignment="Right"
                          Height="12"
                          Margin="1,-4,-4,0"
                          VerticalAlignment="Top"
                          Width="12">
                            <Path Data="M 1,0 L6,0 A 2,2 90 0 1 8,2 L8,7 z"
                              Fill="#FFDC000C"
                              Margin="1,3,0,0" />
                            <Path Data="M 0,0 L2,0 L 8,6 L8,8"
                              Fill="#ffffff"
                              Margin="1,3,0,0" />
                        </Grid>
                    </Border>

                    <Border Grid.Column="1"
                        Background="Red"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Top"
                        Width="15"
                        Height="15"
                        Margin="5"
                        CornerRadius="10"
                        ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                        <TextBlock Text="!"
                               FontSize="12"
                               VerticalAlignment="center"
                               HorizontalAlignment="center"
                               FontWeight="Bold"
                               Foreground="white" />
                    </Border>
                </Grid>
            </ControlTemplate>

            <Style TargetType="{x:Type TextBox}">
                <Setter Property="Validation.ErrorTemplate"
                    Value="{StaticResource DefaultErrorTemplate}" />
            </Style>

            <Style TargetType="{x:Type ListView}">
                <Setter Property="Validation.ErrorTemplate"
                    Value="{StaticResource DefaultErrorTemplate}" />
            </Style>

            <DataTemplate x:Key="StackTemplate">
                <TextBlock Text="{Binding SourceType.Name}" />
            </DataTemplate>

            <Color x:Key="ShadowColor">#FFA8A8A8</Color>
            <SolidColorBrush x:Key="ContentBackground" Color="#FF1C1C1C" />
            <SolidColorBrush x:Key="HighlightBrush" Color="#2980b9"/>
            <LinearGradientBrush x:Key="PanelBackground" EndPoint="0.5,1" StartPoint="0.5,0">
                <GradientStop Color="#FF2D2D30"/>
                <GradientStop Color="#FF3A3A44" Offset="1" />
            </LinearGradientBrush>
            <SolidColorBrush x:Key="HamburgerButtonBackground" Color="#FF1188DE" />
            <SolidColorBrush x:Key="StatusBarBackground" Color="#FF007ACC" />
            <SolidColorBrush x:Key="PageHeaderBackground" Color="#FF2D2D30" />
            <LinearGradientBrush x:Key="PageBackground" EndPoint="0.5,1" StartPoint="0.5,0">
                <GradientStop Color="#FFEEEEF2"/>
                <GradientStop Color="#FFC8C8D3" Offset="1" />
            </LinearGradientBrush>
            <SolidColorBrush x:Key="MaterialDesignSelection" Color="#FFE82E2E" />
            <SolidColorBrush x:Key="MaterialDesignFlatButtonClick" Color="#FF0097FB" />
            <SolidColorBrush x:Key="MenuForeground" Color="White" />
            <SolidColorBrush x:Key="PageHeaderTitleForeground" Color="White" />

            <SolidColorBrush x:Key="Heading" Color="#2980b9" />
            <Style x:Key="HeadingStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="TextBlock.Foreground" Value="{StaticResource Heading}" />
                <Setter Property="TextBlock.FontSize" Value="14"/>
                <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
            </Style>

            <Style TargetType="Button">
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Padding" Value="5" />
            </Style>

            <Style x:Key="FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <SolidColorBrush x:Key="Item.MouseOver.Background" Color="#FF1188DE"/>
            <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
            <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#d35400"/>
            <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#d35400"/>
            <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#d35400"/>
            <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#d35400"/>
            <Style x:Key="ListViewItemStyle" TargetType="{x:Type ListViewItem}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Padding" Value="4,1"/>
                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                        <Condition Property="IsSelected" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                        <Condition Property="IsSelected" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="InformationListViewItemStyle" TargetType="{x:Type ListViewItem}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Padding" Value="4,1"/>
                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="IsEnabled" Value="False"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                        <Condition Property="IsSelected" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="FontWeight" Value="Bold" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                        <Condition Property="IsSelected" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="FontWeight" Value="Bold" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="MaterialDesignFlatButton" TargetType="{x:Type ButtonBase}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Height" Value="48" />
                <Setter Property="Width" Value="48" />
                <Setter Property="Padding" Value="8,4,8,4" />
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="FontWeight" Value="Medium" />
                <Setter Property="FontSize" Value="21" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ButtonBase}">
                            <Grid>
                                <Border x:Name="Border" CornerRadius="1" 
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                    <ContentPresenter x:Name="ContentPresenter"  
                                                    Content="{TemplateBinding Content}"
                                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                                    />
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Button.IsDefaulted" Value="true"/>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource MaterialDesignFlatButtonClick}" />
                                    <Setter Property="Background" TargetName="Border" Value="{DynamicResource MaterialDesignFlatButtonClick}" />
                                </Trigger>
                                <!--<Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" Value="0.23"/>
                            </Trigger>-->
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>
